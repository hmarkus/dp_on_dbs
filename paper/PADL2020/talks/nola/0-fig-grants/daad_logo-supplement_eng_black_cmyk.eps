%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: MacOS Roman
%%Title: DAAD_Logo-Supplement_eng_black_cmyk.eps
%%Creator: Adobe Illustrator(R) 13.0
%%For: sl
%%CreationDate: 3/4/15
%%BoundingBox: 0 0 618 45
%%HiResBoundingBox: 0 0 617.4868 44.4097
%%CropBox: 0 0 617.4868 44.4097
%%LanguageLevel: 2
%%DocumentData: Clean7Bit
%ADOBeginClientInjection: DocumentHeader "AI11EPS"
%%AI8_CreatorVersion: 13.0.2%AI9_PrintingDataBegin%ADO_BuildNumber: Adobe Illustrator(R) 13.0.2 x434 R agm 4.4379 ct 5.1039%ADO_ContainsXMP: MainFirst%AI7_Thumbnail: 128 12 8%%BeginData: 3638 Hex Bytes%0000330000660000990000CC0033000033330033660033990033CC0033FF%0066000066330066660066990066CC0066FF009900009933009966009999%0099CC0099FF00CC0000CC3300CC6600CC9900CCCC00CCFF00FF3300FF66%00FF9900FFCC3300003300333300663300993300CC3300FF333300333333%3333663333993333CC3333FF3366003366333366663366993366CC3366FF%3399003399333399663399993399CC3399FF33CC0033CC3333CC6633CC99%33CCCC33CCFF33FF0033FF3333FF6633FF9933FFCC33FFFF660000660033%6600666600996600CC6600FF6633006633336633666633996633CC6633FF%6666006666336666666666996666CC6666FF669900669933669966669999%6699CC6699FF66CC0066CC3366CC6666CC9966CCCC66CCFF66FF0066FF33%66FF6666FF9966FFCC66FFFF9900009900339900669900999900CC9900FF%9933009933339933669933999933CC9933FF996600996633996666996699%9966CC9966FF9999009999339999669999999999CC9999FF99CC0099CC33%99CC6699CC9999CCCC99CCFF99FF0099FF3399FF6699FF9999FFCC99FFFF%CC0000CC0033CC0066CC0099CC00CCCC00FFCC3300CC3333CC3366CC3399%CC33CCCC33FFCC6600CC6633CC6666CC6699CC66CCCC66FFCC9900CC9933%CC9966CC9999CC99CCCC99FFCCCC00CCCC33CCCC66CCCC99CCCCCCCCCCFF%CCFF00CCFF33CCFF66CCFF99CCFFCCCCFFFFFF0033FF0066FF0099FF00CC%FF3300FF3333FF3366FF3399FF33CCFF33FFFF6600FF6633FF6666FF6699%FF66CCFF66FFFF9900FF9933FF9966FF9999FF99CCFF99FFFFCC00FFCC33%FFCC66FFCC99FFCCCCFFCCFFFFFF33FFFF66FFFF99FFFFCC110000001100%000011111111220000002200000022222222440000004400000044444444%550000005500000055555555770000007700000077777777880000008800%000088888888AA000000AA000000AAAAAAAABB000000BB000000BBBBBBBB%DD000000DD000000DDDDDDDDEE000000EE000000EEEEEEEE0000000000FF%00FF0000FFFFFF0000FF00FFFFFF00FFFFFF%524C45A87D7D7D84A8FD04FFA87DA8FD06FF7D7D7DFFFFFFA8FD047DA8A8%FD0AFF7D52A8FD05FFA8A8FD04FFA8A8FFA8FD05FF52A8A8A8FD04FF7DA8%FD04FFA8FFA8FD04FFA8A8FD07FF52A8FD05FFA8A8FD09FF7DA8FFFF7D7D%A8FFFFFFA8FFFFFF7D7D84A8A87D7DA8FFFFFF7D7D7DFD05FFA87D7D7DA8%FFFFFF7DA8A8A87D7DA8FD09FF7DFF7DA8527DA8A852A852A87DA87D52A8%7D527D7DFFA8527DA852FF52FD047D527D7D527D7DA87D7D7DA87D527D84%527D52FFA85252A8A8A8FD077DA8A8FD057D52A87D7D7DA8527D7D7DA8FD%057DFFFFFF7DA8FFFFA87DA87DA8FD05FF7DA87DA8FFFFA87DA8FFFFA87D%A8FD09FF7DA87D52527C7D7D7DA852527DA87D7D7D277D52FFFF7D527D7D%52A852527D7D5227FD047D527D7D527D7DA87D7D527D52A8FFA852FD057D%52A87D7D527D7D84527D52A8527D52FD047D27527D7D7D27A87D7DA8FFFF%FFA852FFFFA87DFF7D7DFD04FF7D7DA87D7DFFFFA852A8FFFFA87D7DFD09%FF7D7DA8A87DA852A8A8A87DA87D7DA8A87D7D7DA8A8FF7DFF7DA87DA87D%A8FD057DA8A8A87DA87D7E7D7D7DA8A87D7DA8A8FF7DA8A87D52A87D7DA8%A8FD047DA87D7DA87DA8A8A87D7D7DA852A8A8FF7D7DA8A87D7DFFFFFFA8%7DA8FF7DA8FFA87DFD04FF7DA8FF7D7DFFFFA87DA8FFFFFF7D7DFD5FFF7D%A8FFFFFFA852FFA87DA8FFA87DA8FFFFA852A8FFA852A8FFA852AFFFFFFF%A87DFD31FFA8FD2DFF7DA8FFFFFFA87DA8A87DA87DA87DA8FFFFA87D7DA8%7D7D7DFFA87DA8FFFFFF7DA8FD09FFA87DA8FD0FFFA8A8FD07FFA8FD06FF%A8FD04FF7DA8A8FD04FFA8FD0DFF7D7DFD07FFA8FD10FF52A8FFFFA87D7D%FFFD077DFFFFFD077DFFA852A8FFFFA87D7DFD09FF52847DA87DA87DA87D%7D7DA87DA852A8FFFF527DA87DA8A87DA852FD067DA87DA87DFFA8527DA8%7DA87DA87D7DA8A87DA87DA87DA8A87DA8FF5252A8A87DA852FFA87D7D7D%A87DA8FD0BFF7D7DA8A87D7DFFA87DA8FFFFFFA87DA8FF7DA8FFFFFFA852%FFA87D7DA87D7D7DFD0AFF7DA8A8525252FD047DA87D52527D7DFFA85252%7D7DFF52527D7D525252FD047DA852A8FFFF52A8A8527D7DA8A87DA8527D%7D7D527D7D7D27FFFFA87D7D525252A852FD057D27A8FD0BFFFD057DFFFF%A87DFD05FF7DA8A87DA8FFFFFFA87DA8FFFD057DFD0BFFFD047D527DA8A8%84A87D7D527D7DA8FF7D7DA87D52847D527D527D527D7DA8A8A87D7D7DFF%FF7D7DA852A852A87DA87D5252A8A87D527D5252A8FF7D7D7D527DA8FF7D%7DA8527D7D527DFD0CFFA8FD0FFFA8FD0BFFA8FD0DFFA8FFA8FD07FFA8FD%09FFA8FFA8FFFFA8FFFFA8FD05FFA8A8FFFFA8FFA8FFA8FFA8FFFFFFA8FF%FFFFA8527DFFA8FFFFFFA8FFA8FFFFFFA8FFFFFFA8FFA8FD6CFFA8FD1EFF%FF%%EndData
%ADOEndClientInjection: DocumentHeader "AI11EPS"
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentFonts: 
%%DocumentNeededFonts: 
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentProcessColors:  Black
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EndComments
                                                                                                                                                                                                                                                  
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 73 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 32 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq{pop/AGMCORE_currentbg load}{/Procedure get_res}ifelse setblackgeneration
	dup null eq{pop/AGMCORE_currentucr load}{/Procedure get_res}ifelse setundercolorremoval
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		clonedict
		begin
			/Intent Intent def
			currentdict
		end
		setcolorrendering
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.%%Version: 2.31 010 dict begin/Adobe_CoolType_Passthru currentdict def/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known defAdobe_CoolType_Core_Defined	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}ifuserdict/Adobe_CoolType_Core 70 dict dup begin put/Adobe_CoolType_Version 2.31 def/Level2?	systemdict/languagelevel known dup		{pop systemdict/languagelevel get 2 ge}	if defLevel2? not	{	/currentglobal false def	/setglobal/pop load def	/gcheck{pop false}bind def	/currentpacking false def	/setpacking/pop load def	/SharedFontDirectory 0 dict def	}ifcurrentpackingtrue setpackingcurrentglobal false setglobaluserdict/Adobe_CoolType_Data 2 copy known not	{2 copy 10 dict put}ifget	 begin	/@opStackCountByLevel 32 dict def	/@opStackLevel 0 def	/@dictStackCountByLevel 32 dict def	/@dictStackLevel 0 def	 endsetglobalcurrentglobal true setglobaluserdict/Adobe_CoolType_GVMFonts known not	{userdict/Adobe_CoolType_GVMFonts 10 dict put}ifsetglobalcurrentglobal false setglobaluserdict/Adobe_CoolType_LVMFonts known not	{userdict/Adobe_CoolType_LVMFonts 10 dict put}ifsetglobal/ct_VMDictPut	{	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse	3 1 roll put	}bind def/ct_VMDictUndef	{	dup Adobe_CoolType_GVMFonts exch known		{Adobe_CoolType_GVMFonts exch undef}		{			dup Adobe_CoolType_LVMFonts exch known			{Adobe_CoolType_LVMFonts exch undef}			{pop}			ifelse		}ifelse	}bind def/ct_str1 1 string def/ct_xshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			_ct_x _ct_y moveto			0			rmoveto		}		ifelse		/_ct_i _ct_i 1 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/ct_yshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			_ct_x _ct_y moveto			0 exch			rmoveto		}		ifelse		/_ct_i _ct_i 1 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/ct_xyshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			{_ct_na _ct_i 1 add get}stopped 			{pop pop pop}			{				_ct_x _ct_y moveto				rmoveto			}			ifelse		}		ifelse		/_ct_i _ct_i 2 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind defcurrentglobal true setglobal/ct_T3Defs{/BuildChar{	1 index/Encoding get exch get	1 index/BuildGlyph get exec}bind def/BuildGlyph{	exch begin	GlyphProcs exch get exec	end}bind def}bind defsetglobal/@_SaveStackLevels	{	Adobe_CoolType_Data		begin		/@vmState currentglobal def false setglobal		@opStackCountByLevel		@opStackLevel		2 copy known not			{			2 copy			3 dict dup/args			7 index			5 add array put			put get			}			{			get dup/args get dup length 3 index lt				{				dup length 5 add array exch				1 index exch 0 exch putinterval				1 index exch/args exch put				}				{pop}			ifelse			}		ifelse			begin			count 1 sub			1 index lt				{pop count}			if			dup/argCount exch def			dup 0 gt				{				args exch 0 exch getinterval 			astore pop				}				{pop}			ifelse			count			/restCount exch def			end		/@opStackLevel @opStackLevel 1 add def		countdictstack 1 sub		@dictStackCountByLevel exch @dictStackLevel exch put		/@dictStackLevel @dictStackLevel 1 add def		@vmState setglobal		end	}bind def/@_RestoreStackLevels	{	Adobe_CoolType_Data		begin		/@opStackLevel @opStackLevel 1 sub def		@opStackCountByLevel @opStackLevel get			begin			count restCount sub dup 0 gt				{{pop}repeat}				{pop}			ifelse			args 0 argCount getinterval{}forall			end		/@dictStackLevel @dictStackLevel 1 sub def		@dictStackCountByLevel @dictStackLevel get		end	countdictstack exch sub dup 0 gt		{{end}repeat}		{pop}	ifelse	}bind def/@_PopStackLevels	{	Adobe_CoolType_Data		begin		/@opStackLevel @opStackLevel 1 sub def		/@dictStackLevel @dictStackLevel 1 sub def		end	}bind def/@Raise	{	exch cvx exch errordict exch get exec	stop	}bind def/@ReRaise	{	cvx $error/errorname get errordict exch get exec	stop	}bind def/@Stopped	{	0 @#Stopped	}bind def/@#Stopped	{	@_SaveStackLevels	stopped		{@_RestoreStackLevels true}		{@_PopStackLevels false}	ifelse	}bind def/@Arg	{	Adobe_CoolType_Data		begin		@opStackCountByLevel @opStackLevel 1 sub get		begin		args exch		argCount 1 sub exch sub get		end		end	}bind defcurrentglobal true setglobal/CTHasResourceForAllBug	Level2?		{		1 dict dup				/@shouldNotDisappearDictValue true def				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put				begin				count @_SaveStackLevels					{(*){pop stop}128 string/Category resourceforall}				stopped pop				@_RestoreStackLevels				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll					{						 /@shouldNotDisappearDictValue known								{										 {												end												currentdict 1 index eq													{pop exit}												if										 }									 loop								}						 if					}					{						 pop						 end					}				ifelse		}		{false}	ifelse	deftrue setglobal/CTHasResourceStatusBug	Level2?		{		mark			{/steveamerige/Category resourcestatus}		stopped			{cleartomark true}			{cleartomark currentglobal not}		ifelse		}		{false}	ifelse	defsetglobal/CTResourceStatus		{		mark 3 1 roll		/Category findresource			begin			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec				{cleartomark false}				{{3 2 roll pop true}{cleartomark false}ifelse}			ifelse			end		}bind def/CTWorkAroundBugs	{	Level2?		{		/cid_PreLoad/ProcSet resourcestatus			{			pop pop			currentglobal			mark				{				(*)					{					dup/CMap CTHasResourceStatusBug						{CTResourceStatus}						{resourcestatus}					ifelse						{						pop dup 0 eq exch 1 eq or							{							dup/CMap findresource gcheck setglobal							/CMap undefineresource							}							{							pop CTHasResourceForAllBug								{exit}								{stop}							ifelse							}						ifelse						}						{pop}					ifelse					}				128 string/CMap resourceforall				}			stopped				{cleartomark}			stopped pop			setglobal			}		if		}	if	}bind def/ds	{	Adobe_CoolType_Core		begin		CTWorkAroundBugs		/mo/moveto load def		/nf/newencodedfont load def		/msf{makefont setfont}bind def		/uf{dup undefinefont ct_VMDictUndef}bind def		/ur/undefineresource load def		/chp/charpath load def		/awsh/awidthshow load def		/wsh/widthshow load def		/ash/ashow load def		/@xshow/xshow load def		/@yshow/yshow load def		/@xyshow/xyshow load def		/@cshow/cshow load def		/sh/show load def		/rp/repeat load def		/.n/.notdef def		end		currentglobal false setglobal	 userdict/Adobe_CoolType_Data 2 copy known not		 {2 copy 10 dict put}		if		get		begin		/AddWidths? false def		/CC 0 def		/charcode 2 string def		/@opStackCountByLevel 32 dict def		/@opStackLevel 0 def		/@dictStackCountByLevel 32 dict def		/@dictStackLevel 0 def		/InVMFontsByCMap 10 dict def		/InVMDeepCopiedFonts 10 dict def		end		setglobal	}bind def/dt	{	currentdict Adobe_CoolType_Core eq		{end}	if	}bind def/ps	{	Adobe_CoolType_Core begin	Adobe_CoolType_GVMFonts begin	Adobe_CoolType_LVMFonts begin	SharedFontDirectory begin	}bind def/pt	{	end	end	end	end	}bind def/unload	{	systemdict/languagelevel known		{		systemdict/languagelevel get 2 ge			{			userdict/Adobe_CoolType_Core 2 copy known				{undef}				{pop pop}			ifelse			}		if		}	if	}bind def/ndf	{	1 index where		{pop pop pop}		{dup xcheck{bind}if def}	ifelse	}def/findfont systemdict	begin	userdict		begin		/globaldict where{/globaldict get begin}if			dup where pop exch get		/globaldict where{pop end}if		end	endAdobe_CoolType_Core_Defined	{/systemfindfont exch def}	{	/findfont 1 index def	/systemfindfont exch def	}ifelse/undefinefont	{pop}ndf/copyfont	{	currentglobal 3 1 roll	1 index gcheck setglobal	dup null eq{0}{dup length}ifelse	2 index length add 1 add dict		begin		exch			{			1 index/FID eq				{pop pop}				{def}			ifelse			}		forall		dup null eq			{pop}			{{def}forall}		ifelse		currentdict		end	exch setglobal	}bind def/copyarray	{	currentglobal exch	dup gcheck setglobal	dup length array copy	exch setglobal	}bind def/newencodedfont	{	currentglobal		{		SharedFontDirectory 3 index known			{SharedFontDirectory 3 index get/FontReferenced known}			{false}		ifelse		}		{		FontDirectory 3 index known			{FontDirectory 3 index get/FontReferenced known}			{			SharedFontDirectory 3 index known				{SharedFontDirectory 3 index get/FontReferenced known}				{false}			ifelse			}		ifelse		}	ifelse	dup		{		3 index findfont/FontReferenced get		2 index dup type/nametype eq			{findfont}		if ne			{pop false}		if		}	if	dup		{		1 index dup type/nametype eq			{findfont}		 if		dup/CharStrings known			{			/CharStrings get length			4 index findfont/CharStrings get length			ne				{				pop false				}			if 			}			{pop}			ifelse		}	if		{		pop		1 index findfont		/Encoding get exch		0 1 255			{2 copy get 3 index 3 1 roll put}		for		pop pop pop		}		{		currentglobal	 4 1 roll		dup type/nametype eq		 {findfont}	 if	 dup gcheck setglobal		dup dup maxlength 2 add dict			begin			exch				{				1 index/FID ne				2 index/Encoding ne and					{def}					{pop pop}				ifelse				}			forall			/FontReferenced exch def			/Encoding exch dup length array copy def			/FontName 1 index dup type/stringtype eq{cvn}if def dup			currentdict			end		definefont ct_VMDictPut		setglobal		}	ifelse	}bind def/SetSubstituteStrategy	{	$SubstituteFont		begin		dup type/dicttype ne			{0 dict}		if		currentdict/$Strategies known			{			exch $Strategies exch 			2 copy known				{				get				2 copy maxlength exch maxlength add dict					begin					{def}forall					{def}forall					currentdict					dup/$Init known						{dup/$Init get exec}					if					end				/$Strategy exch def				}				{pop pop pop}			ifelse			}			{pop pop}		ifelse		end	}bind def/scff	{	$SubstituteFont		begin		dup type/stringtype eq			{dup length exch}			{null}		ifelse		/$sname exch def		/$slen exch def		/$inVMIndex			$sname null eq				{				1 index $str cvs				dup length $slen sub $slen getinterval cvn				}				{$sname}			ifelse def		end		{findfont}	@Stopped		{		dup length 8 add string exch		1 index 0(BadFont:)putinterval		1 index exch 8 exch dup length string cvs putinterval cvn			{findfont}		@Stopped			{pop/Courier findfont}		if		}	if	$SubstituteFont		begin		/$sname null def		/$slen 0 def		/$inVMIndex null def		end	}bind def/isWidthsOnlyFont	{	dup/WidthsOnly known		{pop pop true}		{		dup/FDepVector known			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}			{			dup/FDArray known				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}				{pop}			ifelse			}		ifelse		}	ifelse	}bind def/ct_StyleDicts 4 dict dup begin		 /Adobe-Japan1 4 dict dup begin					 Level2?								{								/Serif								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiMin-W3}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiMin-W3/CIDFont resourcestatus								{pop pop/HeiseiMin-W3}								{/Ryumin-Light}								ifelse							}							{/Ryumin-Light}							ifelse								}								ifelse								def								/SansSerif								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiKakuGo-W5}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiKakuGo-W5/CIDFont resourcestatus								{pop pop/HeiseiKakuGo-W5}								{/GothicBBB-Medium}								ifelse							}							{/GothicBBB-Medium}							ifelse								}								ifelse								def								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiMaruGo-W4}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiMaruGo-W4/CIDFont resourcestatus								{pop pop/HeiseiMaruGo-W4}								{									/Jun101-Light-RKSJ-H/Font resourcestatus									{pop pop/Jun101-Light}									{SansSerif}									ifelse								}								ifelse							}							{								/Jun101-Light-RKSJ-H/Font resourcestatus								{pop pop/Jun101-Light}								{SansSerif}								ifelse							}							ifelse								}								ifelse								/RoundSansSerif exch def								/Default Serif def								}								{								/Serif/Ryumin-Light def								/SansSerif/GothicBBB-Medium def								{								(fonts/Jun101-Light-83pv-RKSJ-H)status								}stopped								{pop}{										 {pop pop pop pop/Jun101-Light}										 {SansSerif}										 ifelse										 /RoundSansSerif exch def								}ifelse								/Default Serif def								}					 ifelse		 end		 def		 /Adobe-Korea1 4 dict dup begin					/Serif/HYSMyeongJo-Medium def					/SansSerif/HYGoThic-Medium def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 def		 /Adobe-GB1 4 dict dup begin					/Serif/STSong-Light def					/SansSerif/STHeiti-Regular def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 def		 /Adobe-CNS1 4 dict dup begin					/Serif/MKai-Medium def					/SansSerif/MHei-Medium def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 defenddefLevel2?{currentglobal true setglobal}if/ct_BoldRomanWidthProc 	{	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth	0 0	}bind def/ct_Type0WidthProc 	{	 dup stringwidth 0 0 moveto 	 2 index true charpath pathbbox	 0 -1 	 7 index 2 div .88 	 setcachedevice2	 pop	0 0	}bind def/ct_Type0WMode1WidthProc 	{	 dup stringwidth 	 pop 2 div neg -0.88	2 copy	moveto 	0 -1	 5 -1 roll true charpath pathbbox	 setcachedevice	}bind def/cHexEncoding[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def/ct_BoldBaseFont 	 11 dict begin		/FontType 3 def		/FontMatrix[1 0 0 1 0 0]def		/FontBBox[0 0 1 1]def		/Encoding cHexEncoding def 		/_setwidthProc/ct_BoldRomanWidthProc load def		/_bcstr1 1 string def		/BuildChar		{			exch begin				_basefont setfont				_bcstr1 dup 0 4 -1 roll put				dup 				_setwidthProc				3 copy 				moveto								show				_basefonto setfont				moveto				show			end		}bind def		 currentdict	 end defsystemdict/composefont known{/ct_DefineIdentity-H{	/Identity-H/CMap resourcestatus	{		pop pop	}	{		/CIDInit/ProcSet findresource begin		 12 dict begin		 begincmap		 /CIDSystemInfo 3 dict dup begin			 /Registry(Adobe)def			 /Ordering(Identity)def			 /Supplement 0 def		 end def		 /CMapName/Identity-H def		 /CMapVersion 1.000 def		 /CMapType 1 def		 1 begincodespacerange		 <0000><FFFF>		 endcodespacerange		 1 begincidrange		 <0000><FFFF>0		 endcidrange		 endcmap		 CMapName currentdict/CMap defineresource pop		 end		 end	 }	 ifelse}def/ct_BoldBaseCIDFont 	 11 dict begin		/CIDFontType 1 def		/CIDFontName/ct_BoldBaseCIDFont def		/FontMatrix[1 0 0 1 0 0]def		/FontBBox[0 0 1 1]def		/_setwidthProc/ct_Type0WidthProc load def		/_bcstr2 2 string def		/BuildGlyph		{			exch begin		 				_basefont setfont				_bcstr2 1 2 index 256 mod put				_bcstr2 0 3 -1 roll 256 idiv put				_bcstr2 dup _setwidthProc		 				3 copy 				moveto				show				_basefonto setfont				moveto				show			end		}bind def		 currentdict	 end def}ifLevel2?{setglobal}if/ct_CopyFont{	{		1 index/FID ne 2 index/UniqueID ne and		{def}{pop pop}ifelse	}forall}bind def/ct_Type0CopyFont {	exch	dup length dict	begin	ct_CopyFont	[	exch	FDepVector 	{		 dup/FontType get 0 eq		{			1 index ct_Type0CopyFont 		/_ctType0 exch definefont		}		{		/_ctBaseFont exch		2 index exec		}		 ifelse 		 exch	}	forall 	pop	]					/FDepVector exch def	currentdict	end}bind def/ct_MakeBoldFont{	 dup/ct_SyntheticBold known	{		dup length 3 add dict begin 		ct_CopyFont 		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 		/ct_SyntheticBold true def		currentdict 		end 		definefont	}	{		dup dup length 3 add dict		begin			ct_CopyFont			/PaintType 2 def			/StrokeWidth .03 0 FontMatrix idtransform pop def			/dummybold currentdict		end		definefont		dup/FontType get dup 9 ge exch 11 le and 		{			ct_BoldBaseCIDFont			dup length 3 add dict copy begin			dup/CIDSystemInfo get/CIDSystemInfo exch def			ct_DefineIdentity-H			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont			/_basefont exch def			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont			/_basefonto exch def			currentdict			end			/CIDFont defineresource		}		{			ct_BoldBaseFont			dup length 3 add dict copy begin			/_basefont exch def			/_basefonto exch def			currentdict			end			definefont		}		ifelse	}	ifelse}bind def/ct_MakeBold{	1 index 	1 index	findfont	currentglobal 5 1 roll	dup gcheck setglobal		dup		 /FontType get 0 eq			{				dup/WMode known{dup/WMode get 1 eq}{false}ifelse				version length 4 ge				and					{version 0 4 getinterval cvi 2015 ge}					{true}				ifelse 					{/ct_Type0WidthProc}					{/ct_Type0WMode1WidthProc}				ifelse				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put						{ct_MakeBoldFont}ct_Type0CopyFont definefont			}			{				dup/_fauxfont known not 1 index/SubstMaster known not and				{					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put					 ct_MakeBoldFont 				}				{				2 index 2 index eq					{exch pop	}					{						dup length dict begin						ct_CopyFont						currentdict						end						definefont 					}				ifelse				}			ifelse			}		 ifelse		 pop pop pop		 setglobal}bind def/?str1 256 string def/?set	{	$SubstituteFont		begin		/$substituteFound false def		/$fontname 1 index def		/$doSmartSub false def		end	dup	 findfont	$SubstituteFont		begin		$substituteFound			{false}			{			dup/FontName known				{				dup/FontName get $fontname eq				1 index/DistillerFauxFont known not and				/currentdistillerparams where					{pop false 2 index isWidthsOnlyFont not and}				if				}				{false}			ifelse			}		ifelse		exch pop		/$doSmartSub true def		end		{		5 1 roll pop pop pop pop		findfont		}		{		1 index		findfont		dup/FontType get 3 eq		{			6 1 roll pop pop pop pop pop false		}		{pop true}		ifelse		{		$SubstituteFont		begin		pop pop		/$styleArray 1 index def		/$regOrdering 2 index def		pop pop		0 1 $styleArray length 1 sub		{			$styleArray exch get			ct_StyleDicts $regOrdering			2 copy known			{				get				exch 2 copy known not				{pop/Default}				if				get				dup type/nametype eq				{				?str1 cvs length dup 1 add exch				?str1 exch(-)putinterval				exch dup length exch ?str1 exch 3 index exch putinterval				add ?str1 exch 0 exch getinterval cvn				}				{				pop pop/Unknown				}				ifelse			}			{				pop pop pop pop/Unknown			}			ifelse		}		for		end		findfont 		}if		}	ifelse	currentglobal false setglobal 3 1 roll	null copyfont definefont pop	setglobal	}bind defsetpackinguserdict/$SubstituteFont 25 dict put1 dict	begin	/SubstituteFont		dup $error exch 2 copy known			{get}			{pop pop{pop/Courier}bind}		ifelse def	/currentdistillerparams where dup		{		pop pop		currentdistillerparams/CannotEmbedFontPolicy 2 copy known			{get/Error eq}			{pop pop false}		ifelse		}	if not		{		countdictstack array dictstack 0 get			begin			userdict				begin				$SubstituteFont					begin					/$str 128 string def					/$fontpat 128 string def					/$slen 0 def					/$sname null def					/$match false def					/$fontname null def					/$substituteFound false def					/$inVMIndex null def					/$doSmartSub true def					/$depth 0 def					/$fontname null def					/$italicangle 26.5 def					/$dstack null def					/$Strategies 10 dict dup						begin						/$Type3Underprint							{							currentglobal exch false setglobal							11 dict								begin								/UseFont exch									$WMode 0 ne										{										dup length dict copy										dup/WMode $WMode put										/UseFont exch definefont										}									if def								/FontName $fontname dup type/stringtype eq{cvn}if def								/FontType 3 def								/FontMatrix[.001 0 0 .001 0 0]def								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def								/FontBBox[0 0 0 0]def								/CCInfo 7 dict dup									begin									/cc null def									/x 0 def									/y 0 def									end def								/BuildChar									{									exch										begin										CCInfo											begin											1 string dup 0 3 index put exch pop											/cc exch def											UseFont 1000 scalefont setfont											cc stringwidth/y exch def/x exch def											x y setcharwidth											$SubstituteFont/$Strategy get/$Underprint get exec											0 0 moveto cc show											x y moveto											end										end									}bind def								currentdict								end							exch setglobal							}bind def						/$GetaTint							2 dict dup								begin								/$BuildFont									{									dup/WMode known										{dup/WMode get}										{0}									ifelse									/$WMode exch def									$fontname exch									dup/FontName known										{										dup/FontName get										dup type/stringtype eq{cvn}if										}										{/unnamedfont}									ifelse									exch									Adobe_CoolType_Data/InVMDeepCopiedFonts get									1 index/FontName get known										{										pop										Adobe_CoolType_Data/InVMDeepCopiedFonts get										1 index get										null copyfont										}										{$deepcopyfont}									ifelse									exch 1 index exch/FontBasedOn exch put									dup/FontName $fontname dup type/stringtype eq{cvn}if put									definefont									Adobe_CoolType_Data/InVMDeepCopiedFonts get										begin										dup/FontBasedOn get 1 index def										end									}bind def								/$Underprint									{									gsave									x abs y abs gt										{/y 1000 def}										{/x -1000 def 500 120 translate}									ifelse									Level2?										{										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]										setcolorspace										}										{0 setgray}									ifelse									10 setlinewidth									x .8 mul									[7 3]										{										y mul 8 div 120 sub x 10 div exch moveto										0 y 4 div neg rlineto										dup 0 rlineto										0 y 4 div rlineto										closepath										gsave										Level2?											{.2 setcolor}											{.8 setgray}										ifelse										fill grestore										stroke										}									forall									pop									grestore									}bind def								end def						/$Oblique							1 dict dup								begin								/$BuildFont									{									currentglobal exch dup gcheck setglobal									null copyfont										begin										/FontBasedOn										currentdict/FontName known											{											FontName											dup type/stringtype eq{cvn}if											}											{/unnamedfont}										ifelse										def										/FontName $fontname dup type/stringtype eq{cvn}if def										/currentdistillerparams where											{pop}											{											/FontInfo currentdict/FontInfo known												{FontInfo null copyfont}												{2 dict}											ifelse											dup												begin												/ItalicAngle $italicangle def												/FontMatrix FontMatrix												[1 0 ItalicAngle dup sin exch cos div 1 0 0]												matrix concatmatrix readonly												end											4 2 roll def											def											}										ifelse										FontName currentdict										end									definefont									exch setglobal									}bind def								end def						/$None							1 dict dup								begin								/$BuildFont{}bind def								end def						end def					/$Oblique SetSubstituteStrategy					/$findfontByEnum						{						dup type/stringtype eq{cvn}if						dup/$fontname exch def						$sname null eq							{$str cvs dup length $slen sub $slen getinterval}							{pop $sname}						ifelse						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval						/$match false def						$SubstituteFont/$dstack countdictstack array dictstack put						mark							{							$fontpat 0 $slen 7 add getinterval								{/$match exch def exit}							$str filenameforall							}						stopped							{							cleardictstack							currentdict							true							$SubstituteFont/$dstack get								{								exch									{									1 index eq										{pop false}										{true}									ifelse									}									{begin false}								ifelse								}							forall							pop							}						if						cleartomark						/$slen 0 def						$match false ne							{$match(fonts/)anchorsearch pop pop cvn}							{/Courier}						ifelse						}bind def					/$ROS 1 dict dup						begin						/Adobe 4 dict dup							begin							/Japan1 [/Ryumin-Light/HeiseiMin-W3										 /GothicBBB-Medium/HeiseiKakuGo-W5										 /HeiseiMaruGo-W4/Jun101-Light]def							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def							/GB1	 [/STSong-Light/STHeiti-Regular]def							/CNS1	[/MKai-Medium/MHei-Medium]def							end def						end def					/$cmapname null def					/$deepcopyfont						{						dup/FontType get 0 eq							{							1 dict dup/FontName/copied put copyfont								begin								/FDepVector FDepVector copyarray								0 1 2 index length 1 sub									{									2 copy get $deepcopyfont									dup/FontName/copied put									/copied exch definefont									3 copy put pop pop									}								for								def								currentdict								end							}							{$Strategies/$Type3Underprint get exec}						ifelse						}bind def					/$buildfontname						{						dup/CIDFont findresource/CIDSystemInfo get							begin							Registry length Ordering length Supplement 8 string cvs							3 copy length 2 add add add string							dup 5 1 roll dup 0 Registry putinterval							dup 4 index(-)putinterval							dup 4 index 1 add Ordering putinterval							4 2 roll add 1 add 2 copy(-)putinterval							end						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch						anchorsearch							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}							{pop pop pop pop pop}						ifelse						length						$str 1 index(-)putinterval 1 add						$str 1 index $cmapname $fontpat cvs putinterval						$cmapname length add						$str exch 0 exch getinterval cvn						}bind def					/$findfontByROS						{						/$fontname exch def						$ROS Registry 2 copy known							{							get Ordering 2 copy known								{get}								{pop pop[]}							ifelse							}							{pop pop[]}						ifelse						false exch							{							dup/CIDFont resourcestatus								{								pop pop								save								1 index/CIDFont findresource								dup/WidthsOnly known									{dup/WidthsOnly get}									{false}								ifelse								exch pop								exch restore									{pop}									{exch pop true exit}								ifelse								}								{pop}							ifelse							}						forall							{$str cvs $buildfontname}							{							false(*)								{								save exch								dup/CIDFont findresource								dup/WidthsOnly known									{dup/WidthsOnly get not}									{true}								ifelse								exch/CIDSystemInfo get								dup/Registry get Registry eq								exch/Ordering get Ordering eq and and									{exch restore exch pop true exit}									{pop restore}								ifelse								}							$str/CIDFont resourceforall								{$buildfontname}								{$fontname $findfontByEnum}							ifelse							}						ifelse						}bind def					end				end				currentdict/$error known currentdict/languagelevel known and dup					{pop $error/SubstituteFont known}				if				dup					{$error}					{Adobe_CoolType_Core}				ifelse				begin					{					/SubstituteFont					/CMap/Category resourcestatus						{						pop pop						{						$SubstituteFont							begin							/$substituteFound true def							dup length $slen gt							$sname null ne or							$slen 0 gt and								{								$sname null eq									{dup $str cvs dup length $slen sub $slen getinterval cvn}									{$sname}								ifelse								Adobe_CoolType_Data/InVMFontsByCMap get								1 index 2 copy known									{									get									false exch										{										pop										currentglobal											{											GlobalFontDirectory 1 index known												{exch pop true exit}												{pop}											ifelse											}											{											FontDirectory 1 index known												{exch pop true exit}												{												GlobalFontDirectory 1 index known													{exch pop true exit}													{pop}												ifelse												}											ifelse											}										ifelse										}									forall									}									{pop pop false}								ifelse									{									exch pop exch pop									}									{									dup/CMap resourcestatus										{										pop pop										dup/$cmapname exch def										/CMap findresource/CIDSystemInfo get{def}forall										$findfontByROS										}										{										128 string cvs										dup(-)search											{											3 1 roll search												{												3 1 roll pop													{dup cvi}												stopped													{pop pop pop pop pop $findfontByEnum}													{													4 2 roll pop pop													exch length													exch													2 index length													2 index													sub													exch 1 sub -1 0														{														$str cvs dup length														4 index														0														4 index														4 3 roll add														getinterval														exch 1 index exch 3 index exch														putinterval														dup/CMap resourcestatus															{															pop pop															4 1 roll pop pop pop															dup/$cmapname exch def															/CMap findresource/CIDSystemInfo get{def}forall															$findfontByROS															true exit															}															{pop}														ifelse														}													for													dup type/booleantype eq														{pop}														{pop pop pop $findfontByEnum}													ifelse													}												ifelse												}												{pop pop pop $findfontByEnum}											ifelse											}											{pop pop $findfontByEnum}										ifelse										}									ifelse									}								ifelse								}								{//SubstituteFont exec}							ifelse							/$slen 0 def							end						}						}						{						{						$SubstituteFont							begin							/$substituteFound true def							dup length $slen gt							$sname null ne or							$slen 0 gt and								{$findfontByEnum}								{//SubstituteFont exec}							ifelse							end						}						}					ifelse					bind readonly def					Adobe_CoolType_Core/scfindfont/systemfindfont load put					}					{					/scfindfont						{						$SubstituteFont							begin							dup systemfindfont							dup/FontName known								{dup/FontName get dup 3 index ne}								{/noname true}							ifelse							dup								{								/$origfontnamefound 2 index def								/$origfontname 4 index def/$substituteFound true def								}							if							exch pop								{								$slen 0 gt								$sname null ne								3 index length $slen gt or and									{									pop dup $findfontByEnum findfont									dup maxlength 1 add dict										begin											{1 index/FID eq{pop pop}{def}ifelse}										forall										currentdict										end									definefont									dup/FontName known{dup/FontName get}{null}ifelse									$origfontnamefound ne										{										$origfontname $str cvs print										( substitution revised, using )print										dup/FontName known											{dup/FontName get}{(unspecified font)}										ifelse										$str cvs print(.\n)print										}									if									}									{exch pop}								ifelse								}								{exch pop}							ifelse							end						}bind def					}				ifelse				end			end		Adobe_CoolType_Core_Defined not			{			Adobe_CoolType_Core/findfont				{				$SubstituteFont					begin					$depth 0 eq						{						/$fontname 1 index dup type/stringtype ne{$str cvs}if def						/$substituteFound false def						}					if					/$depth $depth 1 add def					end				scfindfont				$SubstituteFont					begin					/$depth $depth 1 sub def					$substituteFound $depth 0 eq and						{						$inVMIndex null ne							{dup $inVMIndex $AddInVMFont}						if						$doSmartSub							{							currentdict/$Strategy known								{$Strategy/$BuildFont get exec}							if							}						if						}					if					end				}bind put			}		if		}	if	end/$AddInVMFont	{	exch/FontName 2 copy known		{		get		1 dict dup begin exch 1 index gcheck def end exch		Adobe_CoolType_Data/InVMFontsByCMap get exch		$DictAdd		}		{pop pop pop}	ifelse	}bind def/$DictAdd	{	2 copy known not		{2 copy 4 index length dict put}	if	Level2? not		{		2 copy get dup maxlength exch length 4 index length add lt		2 copy get dup length 4 index length add exch maxlength 1 index lt			{			2 mul dict				begin				2 copy get{forall}def				2 copy currentdict put				end			}			{pop}		ifelse		}	if	get		begin			{def}		forall		end	}bind defendend%%EndResourcecurrentglobal true setglobal%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.%%Version: 1.23 0systemdict/languagelevel known dup	{currentglobal false setglobal}	{false}ifelseexchuserdict/Adobe_CoolType_Utility 2 copy known	{2 copy get dup maxlength 27 add dict copy}	{27 dict}ifelse putAdobe_CoolType_Utility	begin	/@eexecStartData		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def	/@recognizeCIDFont null def	/ct_Level2? exch def	/ct_Clone? 1183615869 internaldict dup			/CCRun known not			exch/eCCRun known not			ct_Level2? and or defct_Level2?	{globaldict begin currentglobal true setglobal}if	/ct_AddStdCIDMap		ct_Level2?			{{				mark				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put					{					((Hex)57 StartData					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec					}				stopped					{					 cleartomark					 Adobe_CoolType_Utility/@recognizeCIDFont get					 countdictstack dup array dictstack					 exch 1 sub -1 0						 {						 2 copy get 3 index eq								{1 index length exch sub 1 sub{end}repeat exit}								{pop}						 ifelse						 }					 for					 pop pop					 Adobe_CoolType_Utility/@eexecStartData get eexec					}					{cleartomark}				ifelse			}}			{{				Adobe_CoolType_Utility/@eexecStartData get eexec			}}		ifelse bind defuserdict/cid_extensions knowndup{cid_extensions/cid_UpdateDB known and}if	{	 cid_extensions	 begin	/cid_GetCIDSystemInfo		{		 1 index type/stringtype eq			{exch cvn exch}		 if		 cid_extensions			 begin			 dup load 2 index known				{				 2 copy				 cid_GetStatusInfo				 dup null ne					{					 1 index load					 3 index get					 dup null eq						 {pop pop cid_UpdateDB}						 {						 exch						 1 index/Created get eq							 {exch pop exch pop}							 {pop cid_UpdateDB}						 ifelse						 }					 ifelse					}					{pop cid_UpdateDB}				 ifelse				}				{cid_UpdateDB}			 ifelse			 end		}bind def	 end	}ifct_Level2?	{end setglobal}if	/ct_UseNativeCapability? systemdict/composefont known def	/ct_MakeOCF 35 dict def	/ct_Vars 25 dict def	/ct_GlyphDirProcs 6 dict def	/ct_BuildCharDict 15 dict dup		begin		/charcode 2 string def		/dst_string 1500 string def		/nullstring()def		/usewidths? true def		end def	ct_Level2?{setglobal}{pop}ifelse	ct_GlyphDirProcs		begin		/GetGlyphDirectory			{			systemdict/languagelevel known				{pop/CIDFont findresource/GlyphDirectory get}				{				1 index/CIDFont findresource/GlyphDirectory				get dup type/dicttype eq					{					dup dup maxlength exch length sub 2 index lt						{						dup length 2 index add dict copy 2 index						/CIDFont findresource/GlyphDirectory 2 index put						}					if					}				if				exch pop exch pop				}			ifelse			+			}def		/+			{			systemdict/languagelevel known				{				currentglobal false setglobal				3 dict begin					/vm exch def				}				{1 dict begin}			ifelse			/$ exch def			systemdict/languagelevel known				{				vm setglobal				/gvm currentglobal def				$ gcheck setglobal				}			if			?{$ begin}if			}def		/?{$ type/dicttype eq}def		/|{			userdict/Adobe_CoolType_Data known				{			Adobe_CoolType_Data/AddWidths? known				{				 currentdict Adobe_CoolType_Data					begin					 begin						AddWidths?								{								Adobe_CoolType_Data/CC 3 index put								?{def}{$ 3 1 roll put}ifelse								CC charcode exch 1 index 0 2 index 256 idiv put								1 index exch 1 exch 256 mod put								stringwidth 2 array astore								currentfont/Widths get exch CC exch put								}								{?{def}{$ 3 1 roll put}ifelse}							ifelse					end				end				}				{?{def}{$ 3 1 roll put}ifelse}	ifelse				}				{?{def}{$ 3 1 roll put}ifelse}			ifelse			}def		/!			{			?{end}if			systemdict/languagelevel known				{gvm setglobal}			if			end			}def		/:{string currentfile exch readstring pop}executeonly def		end	ct_MakeOCF		begin		/ct_cHexEncoding		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def		/ct_CID_STR_SIZE 8000 def		/ct_mkocfStr100 100 string def		/ct_defaultFontMtx[.001 0 0 .001 0 0]def		/ct_1000Mtx[1000 0 0 1000 0 0]def		/ct_raise{exch cvx exch errordict exch get exec stop}bind def		/ct_reraise			{cvx $error/errorname get(Error: )print dup(						 )cvs print					errordict exch get exec stop			}bind def		/ct_cvnsi			{			1 index add 1 sub 1 exch 0 4 1 roll				{				2 index exch get				exch 8 bitshift				add				}			for			exch pop			}bind def		/ct_GetInterval			{			Adobe_CoolType_Utility/ct_BuildCharDict get				begin				/dst_index 0 def				dup dst_string length gt					{dup string/dst_string exch def}				if				1 index ct_CID_STR_SIZE idiv				/arrayIndex exch def				2 index arrayIndex get				2 index				arrayIndex ct_CID_STR_SIZE mul				sub					{					dup 3 index add 2 index length le						{						2 index getinterval						dst_string dst_index 2 index putinterval						length dst_index add/dst_index exch def						exit						}						{						1 index length 1 index sub						dup 4 1 roll						getinterval						dst_string dst_index 2 index putinterval						pop dup dst_index add/dst_index exch def						sub						/arrayIndex arrayIndex 1 add def						2 index dup length arrayIndex gt							 {arrayIndex get}							 {							 pop							 exit							 }						ifelse						0						}					ifelse					}				loop				pop pop pop				dst_string 0 dst_index getinterval				end			}bind def		ct_Level2?			{			/ct_resourcestatus			currentglobal mark true setglobal				{/unknowninstancename/Category resourcestatus}			stopped				{cleartomark setglobal true}				{cleartomark currentglobal not exch setglobal}			ifelse				{					{					mark 3 1 roll/Category findresource						begin						ct_Vars/vm currentglobal put						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec							{cleartomark false}							{{3 2 roll pop true}{cleartomark false}ifelse}						ifelse						ct_Vars/vm get setglobal						end					}				}				{{resourcestatus}}			ifelse bind def			/CIDFont/Category ct_resourcestatus				{pop pop}				{				currentglobal true setglobal				/Generic/Category findresource				dup length dict copy				dup/InstanceType/dicttype put				/CIDFont exch/Category defineresource pop				setglobal				}			ifelse			ct_UseNativeCapability?				{				/CIDInit/ProcSet findresource begin				12 dict begin				begincmap				/CIDSystemInfo 3 dict dup begin				 /Registry(Adobe)def				 /Ordering(Identity)def				 /Supplement 0 def				end def				/CMapName/Identity-H def				/CMapVersion 1.000 def				/CMapType 1 def				1 begincodespacerange				<0000><FFFF>				endcodespacerange				1 begincidrange				<0000><FFFF>0				endcidrange				endcmap				CMapName currentdict/CMap defineresource pop				end				end				}			if			}			{			/ct_Category 2 dict begin			/CIDFont 10 dict def			/ProcSet	2 dict def			currentdict			end			def			/defineresource				{				ct_Category 1 index 2 copy known					{					get					dup dup maxlength exch length eq						{						dup length 10 add dict copy						ct_Category 2 index 2 index put						}					if					3 index 3 index put					pop exch pop					}					{pop pop/defineresource/undefined ct_raise}				ifelse				}bind def			/findresource				{				ct_Category 1 index 2 copy known					{					get					2 index 2 copy known						{get 3 1 roll pop pop}						{pop pop/findresource/undefinedresource ct_raise}					ifelse					}					{pop pop/findresource/undefined ct_raise}				ifelse				}bind def			/resourcestatus				{				ct_Category 1 index 2 copy known					{					get					2 index known					exch pop exch pop						{						0 -1 true						}						{						false						}					ifelse					}					{pop pop/findresource/undefined ct_raise}				ifelse				}bind def			/ct_resourcestatus/resourcestatus load def			}		ifelse		/ct_CIDInit 2 dict			begin			/ct_cidfont_stream_init				{					{					dup(Binary)eq						{						pop						null						currentfile						ct_Level2?							{								{cid_BYTE_COUNT()/SubFileDecode filter}							stopped								{pop pop pop}							if							}						if						/readstring load						exit						}					if					dup(Hex)eq						{						pop						currentfile						ct_Level2?							{								{null exch/ASCIIHexDecode filter/readstring}							stopped								{pop exch pop(>)exch/readhexstring}							if							}							{(>)exch/readhexstring}						ifelse						load						exit						}					if					/StartData/typecheck ct_raise					}				loop				cid_BYTE_COUNT ct_CID_STR_SIZE le					{					2 copy cid_BYTE_COUNT string exch exec					pop					1 array dup					3 -1 roll					0 exch put					}					{					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi					dup array exch 2 sub 0 exch 1 exch						{						2 copy						5 index						ct_CID_STR_SIZE						string						6 index exec						pop						put						pop						}					for					2 index					cid_BYTE_COUNT ct_CID_STR_SIZE mod string					3 index exec					pop					1 index exch					1 index length 1 sub					exch put					}				ifelse				cid_CIDFONT exch/GlyphData exch put				2 index null eq					{					pop pop pop					}					{					pop/readstring load					1 string exch						{						3 copy exec						pop						dup length 0 eq							{							pop pop pop pop pop							true exit							}						if						4 index						eq							{							pop pop pop pop							false exit							}						if						}					loop					pop					}				ifelse				}bind def			/StartData				{				mark					{					currentdict					dup/FDArray get 0 get/FontMatrix get					0 get 0.001 eq						{						dup/CDevProc known not							{							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known								{get}								{								pop pop								{pop pop pop pop pop 0 -1000 7 index 2 div 880}								}							ifelse							def							}						if						}						{						/CDevProc							{							 pop pop pop pop pop							 0							 1 cid_temp/cid_CIDFONT get							/FDArray get 0 get							/FontMatrix get 0 get div							 7 index 2 div							 1 index 0.88 mul							}def						}					ifelse					/cid_temp 15 dict def					cid_temp						begin						/cid_CIDFONT exch def						3 copy pop						dup/cid_BYTE_COUNT exch def 0 gt							{							ct_cidfont_stream_init							FDArray								{								/Private get								dup/SubrMapOffset known									{									begin									/Subrs SubrCount array def									Subrs									SubrMapOffset									SubrCount									SDBytes									ct_Level2?										{										currentdict dup/SubrMapOffset undef										dup/SubrCount undef										/SDBytes undef										}									if									end									/cid_SD_BYTES exch def									/cid_SUBR_COUNT exch def									/cid_SUBR_MAP_OFFSET exch def									/cid_SUBRS exch def									cid_SUBR_COUNT 0 gt										{										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval										0 cid_SD_BYTES ct_cvnsi										0 1 cid_SUBR_COUNT 1 sub											{											exch 1 index											1 add											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add											GlyphData exch cid_SD_BYTES ct_GetInterval											0 cid_SD_BYTES ct_cvnsi											cid_SUBRS 4 2 roll											GlyphData exch											4 index											1 index											sub											ct_GetInterval											dup length string copy put											}										for										pop										}									if									}									{pop}								ifelse								}							forall							}						if						cleartomark pop pop						end					CIDFontName currentdict/CIDFont defineresource pop					end end					}				stopped					{cleartomark/StartData ct_reraise}				if				}bind def			currentdict			end def		/ct_saveCIDInit			{			/CIDInit/ProcSet ct_resourcestatus				{true}				{/CIDInitC/ProcSet ct_resourcestatus}			ifelse				{				pop pop				/CIDInit/ProcSet findresource				ct_UseNativeCapability?					{pop null}					{/CIDInit ct_CIDInit/ProcSet defineresource pop}				ifelse				}				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}			ifelse			ct_Vars exch/ct_oldCIDInit exch put			}bind def		/ct_restoreCIDInit			{			ct_Vars/ct_oldCIDInit get dup null ne				{/CIDInit exch/ProcSet defineresource pop}				{pop}			ifelse			}bind def		/ct_BuildCharSetUp			{			1 index				begin				CIDFont					begin					Adobe_CoolType_Utility/ct_BuildCharDict get						begin						/ct_dfCharCode exch def						/ct_dfDict exch def						CIDFirstByte ct_dfCharCode add						dup CIDCount ge							{pop 0}						if						/cid exch def							{							GlyphDirectory cid 2 copy known								{get}								{pop pop nullstring}							ifelse							dup length FDBytes sub 0 gt								{								dup								FDBytes 0 ne									{0 FDBytes ct_cvnsi}									{pop 0}								ifelse								/fdIndex exch def								dup length FDBytes sub FDBytes exch getinterval								/charstring exch def								exit								}								{								pop								cid 0 eq									{/charstring nullstring def exit}								if								/cid 0 def								}							ifelse							}						loop			}def		/ct_SetCacheDevice			{			0 0 moveto			dup stringwidth			3 -1 roll			true charpath			pathbbox			0 -1000			7 index 2 div 880			setcachedevice2			0 0 moveto			}def		/ct_CloneSetCacheProc			{			1 eq				{				stringwidth				pop -2 div -880				0 -1000 setcharwidth				moveto				}				{				usewidths?					{					currentfont/Widths get cid					2 copy known						{get exch pop aload pop}						{pop pop stringwidth}					ifelse					}					{stringwidth}				ifelse				setcharwidth				0 0 moveto				}			ifelse			}def		/ct_Type3ShowCharString			{			ct_FDDict fdIndex 2 copy known				{get}				{				currentglobal 3 1 roll				1 index gcheck setglobal				ct_Type1FontTemplate dup maxlength dict copy					begin					FDArray fdIndex get					dup/FontMatrix 2 copy known						{get}						{pop pop ct_defaultFontMtx}					ifelse					/FontMatrix exch dup length array copy def					/Private get					/Private exch def					/Widths rootfont/Widths get def					/CharStrings 1 dict dup/.notdef						<d841272cf18f54fc13>dup length string copy put def					currentdict					end				/ct_Type1Font exch definefont				dup 5 1 roll put				setglobal				}			ifelse			dup/CharStrings get 1 index/Encoding get			ct_dfCharCode get charstring put			rootfont/WMode 2 copy known				{get}				{pop pop 0}			ifelse			exch			1000 scalefont setfont			ct_str1 0 ct_dfCharCode put			ct_str1 exch ct_dfSetCacheProc			ct_SyntheticBold				{				currentpoint				ct_str1 show				newpath				moveto				ct_str1 true charpath				ct_StrokeWidth setlinewidth				stroke				}				{ct_str1 show}			ifelse			}def		/ct_Type4ShowCharString			{			ct_dfDict ct_dfCharCode charstring			FDArray fdIndex get			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not				{ct_1000Mtx matrix concatmatrix concat}				{pop}			ifelse			/Private get			Adobe_CoolType_Utility/ct_Level2? get not				{				ct_dfDict/Private				3 -1 roll					{put}				1183615869 internaldict/superexec get exec				}			if			1183615869 internaldict			Adobe_CoolType_Utility/ct_Level2? get				{1 index}				{3 index/Private get mark 6 1 roll}			ifelse			dup/RunInt known				{/RunInt get}				{pop/CCRun}			ifelse			get exec			Adobe_CoolType_Utility/ct_Level2? get not				{cleartomark}			if			}bind def		/ct_BuildCharIncremental			{				{				Adobe_CoolType_Utility/ct_MakeOCF get begin				ct_BuildCharSetUp				ct_ShowCharString				}			stopped				{stop}			if			end			end			end			end			}bind def		/BaseFontNameStr(BF00)def		/ct_Type1FontTemplate 14 dict			begin			/FontType 1 def			/FontMatrix [0.001 0 0 0.001 0 0]def			/FontBBox [-250 -250 1250 1250]def			/Encoding ct_cHexEncoding def			/PaintType 0 def			currentdict			end def		/BaseFontTemplate 11 dict			begin			/FontMatrix [0.001 0 0 0.001 0 0]def			/FontBBox [-250 -250 1250 1250]def			/Encoding ct_cHexEncoding def			/BuildChar/ct_BuildCharIncremental load def			ct_Clone?				{				/FontType 3 def				/ct_ShowCharString/ct_Type3ShowCharString load def				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def				/ct_SyntheticBold false def				/ct_StrokeWidth 1 def				}				{				/FontType 4 def				/Private 1 dict dup/lenIV 4 put def				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def				/PaintType 0 def				/ct_ShowCharString/ct_Type4ShowCharString load def				}			ifelse			/ct_str1 1 string def			currentdict			end def		/BaseFontDictSize BaseFontTemplate length 5 add def		/ct_matrixeq			{			true 0 1 5				{				dup 4 index exch get exch 3 index exch get eq and				dup not					{exit}				if				}			for			exch pop exch pop			}bind def		/ct_makeocf			{			15 dict				begin				exch/WMode exch def				exch/FontName exch def				/FontType 0 def				/FMapType 2 def			dup/FontMatrix known				{dup/FontMatrix get/FontMatrix exch def}				{/FontMatrix matrix def}			ifelse				/bfCount 1 index/CIDCount get 256 idiv 1 add					dup 256 gt{pop 256}if def				/Encoding					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for					bfCount 1 255{2 copy bfCount put pop}for					def				/FDepVector bfCount dup 256 lt{1 add}if array def				BaseFontTemplate BaseFontDictSize dict copy					begin					/CIDFont exch def					CIDFont/FontBBox known						{CIDFont/FontBBox get/FontBBox exch def}					if					CIDFont/CDevProc known						{CIDFont/CDevProc get/CDevProc exch def}					if					currentdict					end				BaseFontNameStr 3(0)putinterval				0 1 bfCount dup 256 eq{1 sub}if					{					FDepVector exch					2 index BaseFontDictSize dict copy						begin						dup/CIDFirstByte exch 256 mul def						FontType 3 eq							{/ct_FDDict 2 dict def}						if						currentdict						end					1 index 16					BaseFontNameStr 2 2 getinterval cvrs pop					BaseFontNameStr exch definefont					put					}				for				ct_Clone?					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}				if				FontName				currentdict				end			definefont			ct_Clone?				{				gsave				dup 1000 scalefont setfont				ct_BuildCharDict					begin					/usewidths? false def					currentfont/Widths get						begin						exch/CIDFont get/GlyphDirectory get							{							pop							dup charcode exch 1 index 0 2 index 256 idiv put							1 index exch 1 exch 256 mod put							stringwidth 2 array astore def							}						forall						end					/usewidths? true def					end				grestore				}				{exch pop}			ifelse			}bind def		currentglobal true setglobal		/ct_ComposeFont			{			ct_UseNativeCapability?				{								2 index/CMap ct_resourcestatus					{pop pop exch pop}					{					/CIDInit/ProcSet findresource						begin						12 dict							begin							begincmap							/CMapName 3 index def							/CMapVersion 1.000 def							/CMapType 1 def							exch/WMode exch def							/CIDSystemInfo 3 dict dup								begin								/Registry(Adobe)def								/Ordering								CMapName ct_mkocfStr100 cvs								(Adobe-)search									{									pop pop									(-)search										{										dup length string copy										exch pop exch pop										}										{pop(Identity)}									ifelse									}									{pop (Identity)}								ifelse								def								/Supplement 0 def								end def							1 begincodespacerange							<0000><FFFF>							endcodespacerange							1 begincidrange							<0000><FFFF>0							endcidrange							endcmap							CMapName currentdict/CMap defineresource pop							end						end					}				ifelse				composefont				}				{				3 2 roll pop				0 get/CIDFont findresource				ct_makeocf				}			ifelse			}bind def			setglobal		/ct_MakeIdentity			{			ct_UseNativeCapability?				{				1 index/CMap ct_resourcestatus					{pop pop}					{					/CIDInit/ProcSet findresource begin					12 dict begin					begincmap					/CMapName 2 index def					/CMapVersion 1.000 def					/CMapType 1 def					/CIDSystemInfo 3 dict dup						begin						/Registry(Adobe)def						/Ordering						CMapName ct_mkocfStr100 cvs						(Adobe-)search							{							pop pop							(-)search								{dup length string copy exch pop exch pop}								{pop(Identity)}							ifelse							}							{pop(Identity)}						ifelse						def						/Supplement 0 def						end def					1 begincodespacerange					<0000><FFFF>					endcodespacerange					1 begincidrange					<0000><FFFF>0					endcidrange					endcmap					CMapName currentdict/CMap defineresource pop					end					end					}				ifelse				composefont				}				{				exch pop				0 get/CIDFont findresource				ct_makeocf				}			ifelse			}bind def		currentdict readonly pop		end	end%%EndResourcesetglobal%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.%%Version: 1.0 0userdict/ct_T42Dict 15 dict putct_T42Dict begin/Is2015?{ version cvi 2015 ge}bind def/AllocGlyphStorage{ Is2015? {		pop } {	{string}forall }ifelse}bind def/Type42DictBegin{25 dict begin /FontName exch def /CharStrings 256 dict begin	 /.notdef 0 def	 currentdict end def /Encoding exch def /PaintType 0 def /FontType 42 def /FontMatrix[1 0 0 1 0 0]def 4 array astore cvx/FontBBox exch def /sfnts}bind def/Type42DictEnd { currentdict dup/FontName get exch definefont endct_T42Dict exchdup/FontName get exch put}bind def/RD{string currentfile exch readstring pop}executeonly def/PrepFor2015{Is2015?{		 	/GlyphDirectory 	 16	 dict def	 sfnts 0 get	 dup	 2 index	(glyx)	 putinterval	 2 index 	(locx)	 putinterval	 pop	 pop}{	 pop	 pop}ifelse			}bind def/AddT42Char{Is2015?{	/GlyphDirectory get 	begin	def	end	pop	pop}{	/sfnts get	4 index	get	3 index 2 index	putinterval	pop	pop	pop	pop}ifelse}bind def/T0AddT42Mtx2{/CIDFont findresource/Metrics2 get begin def end}bind defend%%EndResourcecurrentglobal true setglobal%%BeginFile: MMFauxFont.prc%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. %%All Rights Reserved.userdict /ct_EuroDict 10 dict putct_EuroDict begin/ct_CopyFont {    { 1 index /FID ne {def} {pop pop} ifelse} forall} def/ct_GetGlyphOutline{   gsave   initmatrix newpath   exch findfont dup    length 1 add dict    begin 		ct_CopyFont 		/Encoding Encoding dup length array copy 		dup		4 -1 roll		0 exch put   		def		currentdict   end   /ct_EuroFont exch definefont   1000 scalefont setfont   0 0 moveto   [       <00> stringwidth        <00> false charpath       pathbbox       [       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall   grestore   counttomark 8 add}def/ct_MakeGlyphProc{   ] cvx   /ct_PSBuildGlyph cvx   ] cvx} def/ct_PSBuildGlyph {  	gsave 	8 -1 roll pop 	7 1 roll         6 -2 roll ct_FontMatrix transform 6 2 roll        4 -2 roll ct_FontMatrix transform 4 2 roll        ct_FontMatrix transform 	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  	dup  9 1 roll 	{  		currentdict /StrokeWidth 2 copy known  		{   			get 2 div   			0 ct_FontMatrix dtransform pop			5 1 roll  			4 -1 roll 4 index sub   			4 1 roll   			3 -1 roll 4 index sub  			3 1 roll   			exch 4 index add exch  			4 index add  			5 -1 roll pop  		}  		{	 			pop pop 		}  		ifelse  	}           if  	setcachedevice          ct_FontMatrix concat        ct_PSPathOps begin 		exec 	end 	{  		currentdict /StrokeWidth 2 copy known  			{ get }  			{ pop pop 0 }    	    ifelse  		setlinewidth stroke  	}  	{   	    fill  	}  	ifelse      grestore} def /ct_PSPathOps 4 dict dup begin 	/m {moveto} def 	/l {lineto} def 	/c {curveto} def 	/cp {closepath} def end def /ct_matrix1000 [1000 0 0 1000 0 0] def/ct_AddGlyphProc  {   2 index findfont dup length 4 add dict    begin 	ct_CopyFont 	/CharStrings CharStrings dup length 1 add dict copy      begin         3 1 roll def           currentdict       end       def      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def      /ct_PSBuildGlyph /ct_PSBuildGlyph load def      /ct_PSPathOps /ct_PSPathOps load def      currentdict   end   definefont pop}defsystemdict /languagelevel known{	/ct_AddGlyphToPrinterFont {		2 copy		ct_GetGlyphOutline 3 add -1 roll restore 		ct_MakeGlyphProc 		ct_AddGlyphProc	} def}{	/ct_AddGlyphToPrinterFont {	    pop pop restore		Adobe_CTFauxDict /$$$FONTNAME get		/Euro		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get		ct_EuroDict exch get		ct_AddGlyphProc	} def} ifelse/AdobeSansMM { 556 0 24 -19 541 703 	{ 	541 628 m 	510 669 442 703 354 703 c 	201 703 117 607 101 444 c 	50 444 l 	25 372 l 	97 372 l 	97 301 l 	49 301 l 	24 229 l 	103 229 l 	124 67 209 -19 350 -19 c 	435 -19 501 25 509 32 c 	509 131 l 	492 105 417 60 343 60 c 	267 60 204 127 197 229 c 	406 229 l 	430 301 l 	191 301 l 	191 372 l 	455 372 l 	479 444 l 	194 444 l 	201 531 245 624 348 624 c 	433 624 484 583 509 534 c 	cp 	556 0 m 	}ct_PSBuildGlyph} def/AdobeSerifMM { 500 0 10 -12 484 692 	{ 	347 298 m 	171 298 l 	170 310 170 322 170 335 c 	170 362 l 	362 362 l 	374 403 l 	172 403 l 	184 580 244 642 308 642 c 	380 642 434 574 457 457 c 	481 462 l 	474 691 l 	449 691 l 	433 670 429 657 410 657 c 	394 657 360 692 299 692 c 	204 692 94 604 73 403 c 	22 403 l 	10 362 l 	70 362 l 	69 352 69 341 69 330 c 	69 319 69 308 70 298 c 	22 298 l 	10 257 l 	73 257 l 	97 57 216 -12 295 -12 c 	364 -12 427 25 484 123 c 	458 142 l 	425 101 384 37 316 37 c 	256 37 189 84 173 257 c 	335 257 l 	cp 	500 0 m 	} ct_PSBuildGlyph } def end		%%EndFilesetglobalAdobe_CoolType_Core begin /$Oblique SetSubstituteStrategy end%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get execAdobe_AGM_Image/ds gx
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: (Page 1) 1
%%EndPageComments
%%BeginPageSetup
%ADOBeginClientInjection: PageSetup Start "AI11EPS"
%AI12_RMC_Transparency: Balance=75 RasterRes=300 GradRes=150 Text=0 Stroke=1 Clip=1 OP=0
%ADOEndClientInjection: PageSetup Start "AI11EPS"
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get execAdobe_AGM_Image/ps gx
%ADOBeginClientInjection: PageSetup End "AI11EPS"
/currentdistillerparams where{pop currentdistillerparams /CoreDistVersion get 5000 lt} {true} ifelse{ userdict /AI11_PDFMark5 /cleartomark load putuserdict /AI11_ReadMetadata_PDFMark5 {flushfile cleartomark } bind put}{ userdict /AI11_PDFMark5 /pdfmark load putuserdict /AI11_ReadMetadata_PDFMark5 {/PUT pdfmark} bind put } ifelse[/NamespacePush AI11_PDFMark5[/_objdef {ai_metadata_stream_123} /type /stream /OBJ AI11_PDFMark5[{ai_metadata_stream_123}currentfile 0 (%  &&end XMP packet marker&&)/SubFileDecode filter AI11_ReadMetadata_PDFMark5<?xpacket begin="﻿" id="W5M0MpCehiHzreSzNTczkc9d"?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 4.1-c036 46.277092, Fri Feb 23 2007 14:16:18        ">
   <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
      <rdf:Description rdf:about=""
            xmlns:dc="http://purl.org/dc/elements/1.1/">
         <dc:format>application/postscript</dc:format>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xap="http://ns.adobe.com/xap/1.0/"
            xmlns:xapGImg="http://ns.adobe.com/xap/1.0/g/img/">
         <xap:CreatorTool>Adobe Illustrator CS3</xap:CreatorTool>
         <xap:CreateDate>2015-03-04T12:14:29+01:00</xap:CreateDate>
         <xap:ModifyDate>2015-03-04T12:15:46+01:00</xap:ModifyDate>
         <xap:MetadataDate>2015-03-04T12:15:46+01:00</xap:MetadataDate>
         <xap:Thumbnails>
            <rdf:Alt>
               <rdf:li rdf:parseType="Resource">
                  <xapGImg:width>256</xapGImg:width>
                  <xapGImg:height>20</xapGImg:height>
                  <xapGImg:format>JPEG</xapGImg:format>
                  <xapGImg:image>/9j/4AAQSkZJRgABAgEASABIAAD/7QAsUGhvdG9zaG9wIDMuMAA4QklNA+0AAAAAABAASAAAAAEA&#xA;AQBIAAAAAQAB/+4ADkFkb2JlAGTAAAAAAf/bAIQABgQEBAUEBgUFBgkGBQYJCwgGBggLDAoKCwoK&#xA;DBAMDAwMDAwQDA4PEA8ODBMTFBQTExwbGxscHx8fHx8fHx8fHwEHBwcNDA0YEBAYGhURFRofHx8f&#xA;Hx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8f/8AAEQgAFAEAAwER&#xA;AAIRAQMRAf/EAaIAAAAHAQEBAQEAAAAAAAAAAAQFAwIGAQAHCAkKCwEAAgIDAQEBAQEAAAAAAAAA&#xA;AQACAwQFBgcICQoLEAACAQMDAgQCBgcDBAIGAnMBAgMRBAAFIRIxQVEGE2EicYEUMpGhBxWxQiPB&#xA;UtHhMxZi8CRygvElQzRTkqKyY3PCNUQnk6OzNhdUZHTD0uIIJoMJChgZhJRFRqS0VtNVKBry4/PE&#xA;1OT0ZXWFlaW1xdXl9WZ2hpamtsbW5vY3R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo+Ck5SVlpeYmZ&#xA;qbnJ2en5KjpKWmp6ipqqusra6voRAAICAQIDBQUEBQYECAMDbQEAAhEDBCESMUEFURNhIgZxgZEy&#xA;obHwFMHR4SNCFVJicvEzJDRDghaSUyWiY7LCB3PSNeJEgxdUkwgJChgZJjZFGidkdFU38qOzwygp&#xA;0+PzhJSktMTU5PRldYWVpbXF1eX1RlZmdoaWprbG1ub2R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo&#xA;+DlJWWl5iZmpucnZ6fkqOkpaanqKmqq6ytrq+v/aAAwDAQACEQMRAD8A6v5I8p6XrdndS3jSq8Th&#xA;EMbBdite4bFUy0d7/wAtebI9CkuGn067AMIc/Z5V4EDseS8TTriq7zoJdc8y2fl+3eghVpJm7B2X&#xA;lv8AJAKfPFUf+W2pPLpU2mzVE9hIV4nqEckgfQwYYqv/ADH1JrfRksYt579xGFHXgpBanzPEfTiq&#xA;VeTlm0HzTc6FcNVbiNWjbsXVeYp/sSw+jFW/PNnDe+b9ItJq+lOiRvxNDRpGBocVWeYfJ/8Ah+zO&#xA;r6JdzRPblTKjMDVSwFQQB3O4OKs00DUzqejWl8QA8yVkA6c1JVqf7IHFUfirCvzC0Z7/AFPy9cSa&#xA;G2v2FlNctd2SLbuf3lsyRGlzJFH9sjflt1xVithpv50Wl7o1grSW+nW1giuIWtriEPS55RXEszpN&#xA;zjBt0V0DAla9OWKphbL+Y2oX+l6jf2eoWkFlqNq8tgJbQO0LaZLBOzenIyPH9cdWILV41IWoFFUH&#xA;aS/nGbGCS8g1Fx9dm5CJtLiuihhhNu7oecKwCX1ldA7t0IPGgxVu40f80tK0zVE0R7hhe3eozpaD&#xA;6pWBZ9daUPbMwUl5bKaSQCRzv4GgxVkvkWy8+C7SfzLfXDwxadbRrayR2qB7p5JTNJL6HqfvEjWJ&#xA;aI/CpJ37KsX1Pyz+YEutazrwsI3j1231DS5bRbjlOlp6BSwZo2CxDjJDy+GQn9+1emyqI9P834rb&#xA;Qoo1uBc29266zIj2Zt3i+sQ8fTjZVf0fqvML8XJd6hn4tiqV3Vl+cDfWb2G2vo9TaKC3upudg5C/&#xA;X2a4+oAMo4tAEIEtKA7HkMVTuz0v815VsPr2qXkTs8VvqAiSxQeiNLaSSYALNxla/RIzwcgVPHbf&#xA;FUCkf5txadDPFZSw6zf3tjNqT2yWCB1XS7COcTyOSQBcrOvII5ovHZeJCqLTSPzB1a7WHU31CyeD&#xA;VfVF6G094Y4gt6iy2QVXfgYpIVYTKSD0+LkxVQRX877m9tmke4tVXRIjMsSWJhe/bT5PW5Vbmky3&#xA;pTjxUpQDbiWOKsr8z6P5ouvJdn5ft2Op32oNFb6ve3bJCv1Ygy3XqeivwiVVMC+mhpzHgTirHbVf&#xA;zT0nR7PRodPmka0iWxiu7aW3kiVYLyMxys1w0crBrIlCeJbkp274qr21v+ZV5JdSaol+tvbaxaz2&#xA;aI9lFI9r6kglQRxMw9OMFD8UhLgVADVXFVPT7r837e4ea9tLq5t1vw31VXsGkNtJbXsZCyVgVlS4&#xA;+rP0U07faqqtuZPzkaeZbaK5omjJTkbCONr8RQl/SY+qzSs5lALhUU9Qy0xVZaaL+YJ8yxa9AdQt&#xA;aQaTayQ3hsJJbi2XV7r6zHc+kGUNDY3AkUxsD0qWauKoHRNB/MmTXoNZ1PT5JdSFrZRXL3xs5Ivr&#xA;VqNRZzAYalIfVniKN9sBqVpiq/RNO/O640QjUdSvrW89C7mHKPTvWNytrD6MNU9aP0muvUKnippU&#xA;GgocVTLU7f8AM2/vNcidL1NNQWstiIns4XZoJ4WljgoWZ/UjWQ1kdd/hK98VVPIHmTRtJsruO/uP&#xA;ReSQMi8HaoC0/ZVhiqIguzr/AJtGuLG0WkaXHyM7ilViDOPpLNWnhiqD8tw+aNR1G+17TPQWSaR4&#xA;2a4qaciH4rsfsigxVW0xtT0DzvH+lPTU6oD6pir6ZMrGhFab+ou+KrtabUtd87mLTPTZtKA9Myk+&#xA;mGiYFiev+7DT6MVQ/mi381WN3Za7qZgaSCRI43gqPskuA2w264qjfNWp2Y806DqTPxtDFFOZKE0Q&#xA;uWrQVPTFVfzZ5w0/VNNbSdH53lzdlVJWNxRQwYgBgCSaU6Yqyry3pj6ZodnZSU9SJKyU6B3Jdh9B&#xA;bFUyxVi/nTW9XsbvRrDTpY7U6nNPHJdyIsrAw27zJDCjvEpmlKfDyNKBvbFWMWv5yrDPY6bc2Mt9&#xA;emDnqV1FH9WSKTncRKDEXuAKvaMG/emlRx5b0VR9n+aGp3X1Tj5clU3sdlJEpuoar+kfWNsH22+G&#xA;DlJSvHltyIOKoK+/PLTbPismlzGb9H3F7LErg+nNbWlxeNA7qrRiqWbgHly3BC8akKsr0HzjHf6b&#xA;q17qNqdJ/QspS+SWRZQifVIb0PzTb+5uF5eBqN+pVYd5c/N6+k0+6Or2gXVJbu2/R9rKGsFW21FS&#xA;0CzSXC05QvHJE7ryDMFp9rFUdqH506TYX8trPYyMsNgb53iljlCutoL0wtInK3r6bdRMezU4EMVU&#xA;tX86Luwvr201LTfrV1+k5be2t7OQOsdpBa2Mkj+tx4yfvL6orx260xVOk/M+7NwUfQpBAJVX6yLm&#xA;IqYjfnTmYLQPzEtG40oV/artiqp5W/MOTUtSttJktxLNxVbu8aWGFhJIszxlbdirSIVgIrGWNe1A&#xA;xCqjL5p8zt5+1bS7dHk03TvRMYX6nHCWe19bhPLLMtwvJ9uUcL074qh9M/Oe01NbCSz0tjFfmZoz&#xA;NdW8JEdqbdLgguwiLq90OCc/jRS4NCvJVdD+adzZ6ZfTarp7etbvJ9TkV143KnUpLGNFSMSyhwQv&#xA;wqjM37IJ2xVfa/m7HcRwXi6Lc/oqSOCSW75pzRrmGSZEEH22I9Kh+YpXeiqBvPzztbbThcLpDXV1&#xA;I0Qt7e1uEmWRJLM3xf1VWg4xADcfaPZatiqbfmB5n8y2NnpNxoBVFuUmur6IRRXF2LeKEPyit5Jr&#xA;cSBHdfVCMWp9kYqlR/PCy+sPBaaZPqkUFrHM19B+5SWZ7aG5CRxy9OcdwvGrVB2O3xYqjdW/M28g&#xA;S/006c1lr9hDLdXcPNZ1hto4I5VnDcVVw8kwhA2+IP147qrL7847W1s7m4GmNKwvTYadClxE8k8q&#xA;3E1uwkiQPNCQbZmFYyCKCvKqhVnGh6rHq+i2OqRxPAl9bx3CwyU5oJUDcW4krUVpsaYqjcVdiqT/&#xA;APOof9q//khiqYt9R+pnl6X1PieVePpce9f2aYq1Y/o/0P8AQPS9Cp/uOPDl3+xtXFVO9/RHqx/X&#xA;vq/q/wC6fX4cuv7PLfr4Yq6z/RHry/U/q/r/AO7vR4c+v7XHfr44qq3v1D0D9e9L0Kivr8eFe32t&#xA;sVQk/wDhrhF6/wBT4cP3HP0qcK/sV7V8MVVbD9Dcm/R/1bl+19X9Ov08MVRuKuxVKvM3+Fv0TJ/i&#xA;j6j+iKj1f0n6P1bl+zy9f4K+FcVSy2/5Vj9Y0/6r+hPrP1R/0V6X1Tn9Tqef1fjv6NeXLh8PXFU3&#xA;i/w9WL0vqlaQejx9LpRvq/GnanL06e9MVQFx/gD6yv1n9FfWfq78fU+rep9W4y+pTlv6XH1eXanO&#xA;vfFUxk/QP1W+9T6r9U/6WXL0/T/uk/v6/D/c8Ptfs07UxVDeYP8AB/oT/wCIf0f6Hof6V+kPQ4fV&#xA;uY/vPW29PnTrtXFVJv8AA311eX6M+vfVBxr9X9X6nwfjT9r0fT50/ZpXtXFUvt/+VTfVNO+r/oH6&#xA;p9ZH6J9P6n6f1r01p9Wp8Pq+nw+x8XGnbFU7/wCdb4/8efH/AJ5U/v8A/so/4f3xVDxf4L/TNp6P&#xA;6N/TXoyfUOHofWvQr+99Gn7zhy+1x28cVUNU/wCVffpWT9K/on9LcD6v1r6t9Y9Pga8vU+Pj6f8A&#xA;wvtird7/AIA+sQ/Xf0T9Y+sw+h631bn9b9NfQ4ct/V9Pjwp8XGlNsVRF5/hD6jcfXf0f9R9N/rXr&#xA;eh6XpeqfU9Tl8PH1a8q7cvfFXL/hX6m31f6p6Hw0+rcK8uLen6fpfFzpXhx38MVYd5V/5VF+gXr6&#xA;P1L6zb+p+nuPL6zw/wBGp9a+D1OPTj8XKvL4+WKsw80f4N/Ryf4q/R36O9RfT/Snoeh6n7HH1/g5&#xA;eHfFVI/4D/S89f0V+mPq8f1mv1f6z9VqPS5/7s9KtONdvDFUfdfoD6xc/W/qv1j6uv1z1fT5/VuT&#xA;cfU5b+ny5U5bVriqT33/ACrHhq3179C+n60X6c9f6pT6xX919b5f7sr9n1N/DFWR231f6vF9W4fV&#xA;+C+j6dOHCnw8eO3GnSmKqmKuxV//2Q==</xapGImg:image>
               </rdf:li>
            </rdf:Alt>
         </xap:Thumbnails>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xapMM="http://ns.adobe.com/xap/1.0/mm/"
            xmlns:stRef="http://ns.adobe.com/xap/1.0/sType/ResourceRef#">
         <xapMM:DocumentID>uuid:9BAA542AF9C3E411BD8F85A83BDF3F44</xapMM:DocumentID>
         <xapMM:InstanceID>uuid:7EF4CC84FAC3E411BD8F85A83BDF3F44</xapMM:InstanceID>
         <xapMM:DerivedFrom rdf:parseType="Resource">
            <stRef:instanceID>uuid:4505fe76-0871-974f-9120-4f16bed3809e</stRef:instanceID>
            <stRef:documentID>uuid:CB7C88E4F4C3E411BD8F85A83BDF3F44</stRef:documentID>
         </xapMM:DerivedFrom>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:illustrator="http://ns.adobe.com/illustrator/1.0/">
         <illustrator:StartupProfile>Print</illustrator:StartupProfile>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xapTPg="http://ns.adobe.com/xap/1.0/t/pg/"
            xmlns:stDim="http://ns.adobe.com/xap/1.0/sType/Dimensions#"
            xmlns:xapG="http://ns.adobe.com/xap/1.0/g/">
         <xapTPg:MaxPageSize rdf:parseType="Resource">
            <stDim:w>297.000002</stDim:w>
            <stDim:h>209.999994</stDim:h>
            <stDim:unit>Millimeters</stDim:unit>
         </xapTPg:MaxPageSize>
         <xapTPg:NPages>1</xapTPg:NPages>
         <xapTPg:HasVisibleTransparency>False</xapTPg:HasVisibleTransparency>
         <xapTPg:HasVisibleOverprint>True</xapTPg:HasVisibleOverprint>
         <xapTPg:PlateNames>
            <rdf:Seq>
               <rdf:li>Black</rdf:li>
            </rdf:Seq>
         </xapTPg:PlateNames>
         <xapTPg:SwatchGroups>
            <rdf:Seq>
               <rdf:li rdf:parseType="Resource">
                  <xapG:groupName>Standard-Farbfeldgruppe</xapG:groupName>
                  <xapG:groupType>0</xapG:groupType>
               </rdf:li>
            </rdf:Seq>
         </xapTPg:SwatchGroups>
      </rdf:Description>
   </rdf:RDF>
</x:xmpmeta>
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                           
<?xpacket end="w"?>%  &&end XMP packet marker&&[{ai_metadata_stream_123}<</Type /Metadata /Subtype /XML>>/PUT AI11_PDFMark5[/Document1 dict begin /Metadata {ai_metadata_stream_123} defcurrentdict end /BDC AI11_PDFMark5
%ADOEndClientInjection: PageSetup End "AI11EPS"
%%EndPageSetup
1 -1 scale 0 -44.4097 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
0 0 mo
0 44.4097 li
617.487 44.4097 li
617.487 0 li
cp
clp
[1 0 0 1 0 0 ]ct
213.993 29.2983 mo
213.769 27.9351 212.671 26.9995 210.678 26.9995 cv
209.294 26.9995 208.135 27.3647 207.362 28.2397 cv
206.081 29.6636 205.796 31.5757 205.796 32.9585 cv
205.796 34.2007 206.061 36.2944 207.139 37.5757 cv
208.094 38.6753 209.579 39.021 211.044 39.021 cv
212.711 39.021 213.769 38.6948 214.237 38.5522 cv
214.237 34.2007 li
210.881 34.2007 li
210.881 32.5112 li
216.271 32.5112 li
216.271 39.7534 li
215.417 40.0366 213.545 40.6479 211.044 40.6479 cv
208.338 40.6479 206.752 39.8745 205.715 38.8179 cv
204.271 37.353 203.66 35.2983 203.66 33.2241 cv
203.66 31.7593 204.026 28.3022 206.813 26.4292 cv
208.257 25.4546 210.169 25.3921 210.901 25.3921 cv
212.061 25.3921 213.83 25.5347 215.234 26.9585 cv
216.108 27.8745 216.169 28.728 216.21 29.2983 cv
213.993 29.2983 li
cp
true sop
/0 
[/DeviceCMYK] /CSA add_res
0 0 0 1 nzopmsc
f
226.097 34.2202 mo
226.118 33.2437 225.935 31.2104 223.575 31.2104 cv
222.334 31.2104 220.829 31.9624 220.789 34.2202 cv
226.097 34.2202 li
cp
220.707 35.562 mo
220.667 37.6772 221.541 39.2437 223.636 39.2437 cv
224.877 39.2437 225.874 38.5933 226.036 37.1284 cv
227.948 37.1284 li
227.887 37.6382 227.806 38.4722 227.074 39.2651 cv
226.626 39.7729 225.609 40.6265 223.555 40.6265 cv
220.341 40.6265 218.815 38.6343 218.815 35.3999 cv
218.815 33.3862 219.222 31.7183 220.829 30.5991 cv
221.806 29.9077 223.026 29.8472 223.616 29.8472 cv
228.192 29.8472 228.09 33.894 228.05 35.562 cv
220.707 35.562 li
cp
f
230.864 32.187 mo
230.864 31.4956 230.824 30.7827 230.763 30.1108 cv
232.695 30.1108 li
232.735 32.0854 li
233.102 30.6616 234.322 30.1929 235.176 30.0718 cv
235.746 29.9897 236.173 30.0093 236.499 30.0308 cv
236.499 31.9019 li
236.397 31.8608 236.275 31.8413 236.132 31.8198 cv
235.99 31.8003 235.807 31.8003 235.583 31.8003 cv
233.325 31.8003 232.796 33.1421 232.796 34.8921 cv
232.796 40.3218 li
230.864 40.3218 li
230.864 32.187 li
cp
f
238.38 31.4741 mo
238.339 30.1108 li
240.271 30.1108 li
240.271 31.5972 li
241.248 29.9897 242.631 29.8472 243.505 29.8472 cv
245.763 29.8472 246.475 31.0073 246.841 31.7593 cv
247.187 31.189 248.021 29.8472 250.279 29.8472 cv
251.743 29.8472 254.021 30.4565 254.021 33.4683 cv
254.021 40.3218 li
252.089 40.3218 li
252.089 33.7729 li
252.089 32.8784 251.926 32.4917 251.743 32.2261 cv
251.418 31.7593 250.767 31.3315 249.791 31.3315 cv
248.55 31.3315 247.879 32.0444 247.614 32.4097 cv
247.167 33.0405 247.167 34.1597 247.167 34.6069 cv
247.167 40.3218 li
245.234 40.3218 li
245.234 33.5698 li
245.234 32.3081 244.502 31.3315 242.997 31.3315 cv
241.695 31.3315 240.983 32.146 240.76 32.4507 cv
240.333 33.0405 240.312 33.8745 240.312 34.5249 cv
240.312 40.3218 li
238.38 40.3218 li
238.38 31.4741 li
cp
f
262.051 35.2983 mo
261.278 35.2983 258.37 35.2983 258.37 37.3726 cv
258.37 38.0229 258.776 39.1421 260.485 39.1421 cv
261.461 39.1421 262.194 38.7554 262.662 38.0444 cv
263.088 37.353 263.109 36.7827 263.149 35.3589 cv
262.804 35.3179 262.519 35.2983 262.051 35.2983 cv
cp
263.374 40.3218 mo
263.231 39.814 263.19 39.3257 263.19 38.7964 cv
262.275 40.4858 260.892 40.6479 260.038 40.6479 cv
257.698 40.6479 256.438 39.3257 256.438 37.6382 cv
256.438 36.8237 256.722 35.5229 258.228 34.6479 cv
259.326 34.0366 260.953 33.9761 261.767 33.9761 cv
262.254 33.9761 262.56 33.9956 263.149 34.0366 cv
263.149 32.7769 263.149 32.2261 262.784 31.7788 cv
262.397 31.271 261.563 31.1089 261.014 31.1089 cv
259.082 31.1089 258.98 32.4312 258.959 32.8374 cv
257.047 32.8374 li
257.108 32.3081 257.169 31.5972 257.759 30.9058 cv
258.532 30.0503 259.977 29.8062 261.055 29.8062 cv
262.54 29.8062 264.126 30.2749 264.675 31.312 cv
265 31.9214 265.021 32.4097 265.021 32.8784 cv
264.939 37.7593 li
264.939 37.9214 264.96 39.2847 265.102 40.3218 cv
263.374 40.3218 li
cp
f
268.303 31.2905 mo
268.282 30.1108 li
270.194 30.1108 li
270.214 31.7593 li
270.438 31.3315 271.17 29.9077 273.489 29.9077 cv
274.405 29.9077 277.191 30.2534 277.191 33.3862 cv
277.191 40.3218 li
275.238 40.3218 li
275.238 33.8335 li
275.238 33.1616 275.157 32.5522 274.689 32.0854 cv
274.201 31.6167 273.53 31.3921 272.879 31.3921 cv
271.496 31.3921 270.214 32.3901 270.214 34.4448 cv
270.214 40.3218 li
268.303 40.3218 li
268.303 31.2905 li
cp
f
290.794 34.8511 mo
296.347 34.8511 li
293.642 27.6499 li
290.794 34.8511 li
cp
292.645 25.6362 mo
294.822 25.6362 li
300.761 40.3218 li
298.544 40.3218 li
296.958 36.4976 li
290.144 36.4976 li
288.557 40.3218 li
286.462 40.3218 li
292.645 25.6362 li
cp
f
309.085 33.3862 mo
309.045 32.9194 308.902 31.2515 307.051 31.2515 cv
304.407 31.2515 304.407 34.3218 304.407 35.0952 cv
304.407 37.189 304.915 39.1421 306.949 39.1421 cv
308.576 39.1421 309.126 37.9214 309.167 36.9253 cv
311.1 36.9253 li
310.978 38.9194 309.493 40.5874 306.969 40.5874 cv
306.278 40.5874 304.691 40.4448 303.613 39.2651 cv
303.003 38.5522 302.393 37.4741 302.393 35.3589 cv
302.393 31.1089 304.997 29.8472 307.03 29.8472 cv
307.702 29.8472 309.228 29.9897 310.165 31.1089 cv
310.917 31.9819 310.978 32.8159 311.019 33.3862 cv
309.085 33.3862 li
cp
f
319.164 35.2983 mo
318.391 35.2983 315.483 35.2983 315.483 37.3726 cv
315.483 38.0229 315.889 39.1421 317.598 39.1421 cv
318.574 39.1421 319.306 38.7554 319.774 38.0444 cv
320.202 37.353 320.222 36.7827 320.262 35.3589 cv
319.917 35.3179 319.631 35.2983 319.164 35.2983 cv
cp
320.486 40.3218 mo
320.343 39.814 320.303 39.3257 320.303 38.7964 cv
319.388 40.4858 318.004 40.6479 317.15 40.6479 cv
314.811 40.6479 313.55 39.3257 313.55 37.6382 cv
313.55 36.8237 313.834 35.5229 315.34 34.6479 cv
316.438 34.0366 318.066 33.9761 318.879 33.9761 cv
319.368 33.9761 319.672 33.9956 320.262 34.0366 cv
320.262 32.7769 320.262 32.2261 319.896 31.7788 cv
319.51 31.271 318.676 31.1089 318.126 31.1089 cv
316.195 31.1089 316.092 32.4312 316.073 32.8374 cv
314.161 32.8374 li
314.221 32.3081 314.283 31.5972 314.873 30.9058 cv
315.645 30.0503 317.089 29.8062 318.167 29.8062 cv
319.652 29.8062 321.239 30.2749 321.788 31.312 cv
322.114 31.9214 322.133 32.4097 322.133 32.8784 cv
322.052 37.7593 li
322.052 37.9214 322.073 39.2847 322.215 40.3218 cv
320.486 40.3218 li
cp
f
332.136 32.2261 mo
331.73 31.6987 330.977 31.189 329.899 31.189 cv
327.092 31.189 327.092 34.5854 327.092 35.2788 cv
327.092 37.0874 327.56 39.1831 329.899 39.1831 cv
332.91 39.1831 332.91 35.8687 332.91 35.0737 cv
332.91 33.5894 332.563 32.7769 332.136 32.2261 cv
cp
332.848 25.6577 mo
334.76 25.6577 li
334.76 38.6948 li
334.76 38.9194 334.801 39.7925 334.841 40.3218 cv
332.929 40.3218 li
332.889 38.6948 li
332.726 38.98 332.502 39.4077 331.973 39.7729 cv
331.139 40.3433 330.143 40.5249 329.452 40.5249 cv
328.088 40.5249 325.058 39.814 325.058 35.3394 cv
325.058 31.4546 327.275 29.7651 329.675 29.7651 cv
331.872 29.7651 332.604 31.0679 332.848 31.4956 cv
332.848 25.6577 li
cp
f
344.745 34.2202 mo
344.764 33.2437 344.582 31.2104 342.222 31.2104 cv
340.981 31.2104 339.476 31.9624 339.435 34.2202 cv
344.745 34.2202 li
cp
339.354 35.562 mo
339.313 37.6772 340.188 39.2437 342.283 39.2437 cv
343.524 39.2437 344.52 38.5933 344.683 37.1284 cv
346.595 37.1284 li
346.534 37.6382 346.453 38.4722 345.72 39.2651 cv
345.273 39.7729 344.256 40.6265 342.202 40.6265 cv
338.988 40.6265 337.462 38.6343 337.462 35.3999 cv
337.462 33.3862 337.87 31.7183 339.476 30.5991 cv
340.453 29.9077 341.672 29.8472 342.262 29.8472 cv
346.839 29.8472 346.738 33.894 346.697 35.562 cv
339.354 35.562 li
cp
f
349.173 31.4741 mo
349.132 30.1108 li
351.065 30.1108 li
351.065 31.5972 li
352.042 29.9897 353.424 29.8472 354.299 29.8472 cv
356.557 29.8472 357.269 31.0073 357.635 31.7593 cv
357.981 31.189 358.815 29.8472 361.073 29.8472 cv
362.537 29.8472 364.815 30.4565 364.815 33.4683 cv
364.815 40.3218 li
362.882 40.3218 li
362.882 33.7729 li
362.882 32.8784 362.72 32.4917 362.537 32.2261 cv
362.211 31.7593 361.56 31.3315 360.584 31.3315 cv
359.343 31.3315 358.672 32.0444 358.408 32.4097 cv
357.96 33.0405 357.96 34.1597 357.96 34.6069 cv
357.96 40.3218 li
356.028 40.3218 li
356.028 33.5698 li
356.028 32.3081 355.295 31.3315 353.791 31.3315 cv
352.489 31.3315 351.777 32.146 351.553 32.4507 cv
351.126 33.0405 351.106 33.8745 351.106 34.5249 cv
351.106 40.3218 li
349.173 40.3218 li
349.173 31.4741 li
cp
f
367.881 30.1108 mo
369.793 30.1108 li
369.793 40.3218 li
367.881 40.3218 li
367.881 30.1108 li
cp
367.677 25.6772 mo
369.976 25.6772 li
369.976 27.7729 li
367.677 27.7729 li
367.677 25.6772 li
cp
f
379.218 33.3862 mo
379.177 32.9194 379.035 31.2515 377.184 31.2515 cv
374.54 31.2515 374.54 34.3218 374.54 35.0952 cv
374.54 37.189 375.048 39.1421 377.083 39.1421 cv
378.709 39.1421 379.258 37.9214 379.299 36.9253 cv
381.232 36.9253 li
381.11 38.9194 379.625 40.5874 377.103 40.5874 cv
376.411 40.5874 374.825 40.4448 373.747 39.2651 cv
373.136 38.5522 372.526 37.4741 372.526 35.3589 cv
372.526 31.1089 375.129 29.8472 377.164 29.8472 cv
377.834 29.8472 379.361 29.9897 380.296 31.1089 cv
381.048 31.9819 381.11 32.8159 381.15 33.3862 cv
379.218 33.3862 li
cp
f
391.857 25.6362 mo
401.071 25.6362 li
401.071 27.3647 li
393.891 27.3647 li
393.891 31.9429 li
400.725 31.9429 li
400.725 33.6499 li
393.891 33.6499 li
393.891 38.5327 li
401.234 38.5327 li
401.234 40.3218 li
391.857 40.3218 li
391.857 25.6362 li
cp
f
413.492 40.3218 mo
410.969 40.3218 li
408.061 36.2339 li
405.172 40.3218 li
402.935 40.3218 li
406.983 34.9722 li
403.159 30.1108 li
405.661 30.1108 li
408.386 33.9565 li
411.234 30.1108 li
413.492 30.1108 li
409.504 35.0952 li
413.492 40.3218 li
cp
f
421.496 33.3862 mo
421.455 32.9194 421.312 31.2515 419.461 31.2515 cv
416.817 31.2515 416.817 34.3218 416.817 35.0952 cv
416.817 37.189 417.326 39.1421 419.36 39.1421 cv
420.987 39.1421 421.536 37.9214 421.577 36.9253 cv
423.509 36.9253 li
423.387 38.9194 421.902 40.5874 419.38 40.5874 cv
418.688 40.5874 417.102 40.4448 416.024 39.2651 cv
415.414 38.5522 414.803 37.4741 414.803 35.3589 cv
414.803 31.1089 417.407 29.8472 419.441 29.8472 cv
420.112 29.8472 421.638 29.9897 422.574 31.1089 cv
423.326 31.9819 423.387 32.8159 423.427 33.3862 cv
421.496 33.3862 li
cp
f
426.52 25.6577 mo
428.453 25.6577 li
428.453 31.6167 li
429.083 30.5386 430.344 29.9292 431.768 29.9292 cv
432.845 29.9292 434.391 30.3159 434.981 31.5562 cv
435.185 31.9624 435.327 32.4507 435.327 33.9351 cv
435.327 40.3218 li
433.375 40.3218 li
433.375 34.2808 li
433.375 33.3667 433.375 31.3921 431.178 31.3921 cv
429.754 31.3921 429.042 32.2671 428.778 32.7554 cv
428.453 33.3257 428.453 34.2808 428.453 34.9116 cv
428.453 40.3218 li
426.52 40.3218 li
426.52 25.6577 li
cp
f
443.914 35.2983 mo
443.141 35.2983 440.233 35.2983 440.233 37.3726 cv
440.233 38.0229 440.639 39.1421 442.348 39.1421 cv
443.324 39.1421 444.056 38.7554 444.524 38.0444 cv
444.952 37.353 444.972 36.7827 445.012 35.3589 cv
444.667 35.3179 444.381 35.2983 443.914 35.2983 cv
cp
445.236 40.3218 mo
445.093 39.814 445.053 39.3257 445.053 38.7964 cv
444.138 40.4858 442.754 40.6479 441.9 40.6479 cv
439.561 40.6479 438.3 39.3257 438.3 37.6382 cv
438.3 36.8237 438.584 35.5229 440.09 34.6479 cv
441.188 34.0366 442.816 33.9761 443.629 33.9761 cv
444.118 33.9761 444.422 33.9956 445.012 34.0366 cv
445.012 32.7769 445.012 32.2261 444.646 31.7788 cv
444.26 31.271 443.426 31.1089 442.876 31.1089 cv
440.945 31.1089 440.842 32.4312 440.823 32.8374 cv
438.911 32.8374 li
438.971 32.3081 439.033 31.5972 439.623 30.9058 cv
440.395 30.0503 441.839 29.8062 442.917 29.8062 cv
444.402 29.8062 445.989 30.2749 446.538 31.312 cv
446.864 31.9214 446.883 32.4097 446.883 32.8784 cv
446.802 37.7593 li
446.802 37.9214 446.823 39.2847 446.965 40.3218 cv
445.236 40.3218 li
cp
f
450.165 31.2905 mo
450.145 30.1108 li
452.056 30.1108 li
452.077 31.7593 li
452.3 31.3315 453.033 29.9077 455.352 29.9077 cv
456.267 29.9077 459.053 30.2534 459.053 33.3862 cv
459.053 40.3218 li
457.101 40.3218 li
457.101 33.8335 li
457.101 33.1616 457.019 32.5522 456.551 32.0854 cv
456.064 31.6167 455.392 31.3921 454.742 31.3921 cv
453.358 31.3921 452.077 32.3901 452.077 34.4448 cv
452.077 40.3218 li
450.165 40.3218 li
450.165 31.2905 li
cp
f
468.75 37.6987 mo
469.157 37.1694 469.442 36.6206 469.442 34.769 cv
469.442 33.4878 469.157 32.7554 468.649 32.2261 cv
468.14 31.6772 467.327 31.3315 466.452 31.3315 cv
464.032 31.3315 463.706 33.7729 463.706 35.0737 cv
463.706 36.6401 464.173 38.7163 466.513 38.7163 cv
467.631 38.7163 468.283 38.3081 468.75 37.6987 cv
cp
464.295 41.1147 mo
464.377 42.2554 464.866 43.1089 466.675 43.1089 cv
469.34 43.1089 469.38 41.1772 469.38 38.4097 cv
468.567 40.0991 466.635 40.1401 466.025 40.1401 cv
465.089 40.1401 463.747 39.9351 462.892 38.8784 cv
462.018 37.8413 461.733 36.478 461.733 35.1147 cv
461.733 31.6577 463.767 29.9683 466.269 29.9683 cv
468.323 29.9683 469.076 30.9858 469.483 31.5151 cv
469.502 30.1108 li
471.354 30.1108 li
471.313 31.9624 li
471.292 38.3491 li
471.292 40.8101 471.211 41.8062 470.804 42.5796 cv
469.951 44.2065 467.957 44.4097 466.553 44.4097 cv
462.465 44.4097 462.343 42.4995 462.262 41.1147 cv
464.295 41.1147 li
cp
f
481.377 34.2202 mo
481.397 33.2437 481.214 31.2104 478.855 31.2104 cv
477.614 31.2104 476.109 31.9624 476.068 34.2202 cv
481.377 34.2202 li
cp
475.987 35.562 mo
475.946 37.6772 476.821 39.2437 478.916 39.2437 cv
480.157 39.2437 481.153 38.5933 481.316 37.1284 cv
483.228 37.1284 li
483.167 37.6382 483.085 38.4722 482.353 39.2651 cv
481.906 39.7729 480.889 40.6265 478.834 40.6265 cv
475.621 40.6265 474.095 38.6343 474.095 35.3999 cv
474.095 33.3862 474.502 31.7183 476.109 30.5991 cv
477.085 29.9077 478.305 29.8472 478.895 29.8472 cv
483.472 29.8472 483.371 33.894 483.33 35.562 cv
475.987 35.562 li
cp
f
494.715 36.0308 mo
494.755 37.0483 494.877 38.939 498.254 38.939 cv
501.305 38.939 501.692 37.0483 501.692 36.3159 cv
501.692 34.6675 500.37 34.3433 498.315 33.8335 cv
496.078 33.2847 495.081 33.0405 494.329 32.5327 cv
493.128 31.7183 492.803 30.6206 492.803 29.644 cv
492.803 26.6538 495.63 25.3511 498.396 25.3511 cv
499.373 25.3511 501.345 25.5151 502.526 26.7964 cv
503.339 27.6909 503.379 28.687 503.42 29.2983 cv
501.305 29.2983 li
501.204 27.4683 499.658 27.0601 498.213 27.0601 cv
496.179 27.0601 494.958 27.9761 494.958 29.4409 cv
494.958 30.7417 495.813 31.189 497.603 31.6167 cv
501.102 32.5112 501.488 32.5933 502.342 33.1616 cv
503.706 34.0581 503.807 35.4819 503.807 36.0913 cv
503.807 38.6948 501.773 40.6675 498.01 40.6675 cv
496.891 40.6675 494.613 40.4858 493.454 38.9995 cv
492.62 37.9214 492.599 36.7417 492.599 36.0308 cv
494.715 36.0308 li
cp
f
513.344 34.2202 mo
513.364 33.2437 513.181 31.2104 510.822 31.2104 cv
509.581 31.2104 508.076 31.9624 508.035 34.2202 cv
513.344 34.2202 li
cp
507.954 35.562 mo
507.913 37.6772 508.788 39.2437 510.882 39.2437 cv
512.124 39.2437 513.12 38.5933 513.283 37.1284 cv
515.195 37.1284 li
515.133 37.6382 515.052 38.4722 514.32 39.2651 cv
513.873 39.7729 512.856 40.6265 510.801 40.6265 cv
507.587 40.6265 506.062 38.6343 506.062 35.3999 cv
506.062 33.3862 506.469 31.7183 508.076 30.5991 cv
509.052 29.9077 510.272 29.8472 510.862 29.8472 cv
515.439 29.8472 515.337 33.894 515.296 35.562 cv
507.954 35.562 li
cp
f
517.828 32.187 mo
517.828 31.4956 517.787 30.7827 517.726 30.1108 cv
519.659 30.1108 li
519.699 32.0854 li
520.065 30.6616 521.286 30.1929 522.14 30.0718 cv
522.709 29.9897 523.136 30.0093 523.461 30.0308 cv
523.461 31.9019 li
523.36 31.8608 523.238 31.8413 523.096 31.8198 cv
522.954 31.8003 522.77 31.8003 522.546 31.8003 cv
520.289 31.8003 519.76 33.1421 519.76 34.8921 cv
519.76 40.3218 li
517.828 40.3218 li
517.828 32.187 li
cp
f
524.572 30.1108 mo
526.708 30.1108 li
529.961 38.2065 li
533.135 30.1108 li
535.25 30.1108 li
530.776 40.3218 li
528.843 40.3218 li
524.572 30.1108 li
cp
f
537.424 30.1108 mo
539.336 30.1108 li
539.336 40.3218 li
537.424 40.3218 li
537.424 30.1108 li
cp
537.22 25.6772 mo
539.519 25.6772 li
539.519 27.7729 li
537.22 27.7729 li
537.22 25.6772 li
cp
f
548.761 33.3862 mo
548.72 32.9194 548.578 31.2515 546.727 31.2515 cv
544.083 31.2515 544.083 34.3218 544.083 35.0952 cv
544.083 37.189 544.591 39.1421 546.625 39.1421 cv
548.252 39.1421 548.801 37.9214 548.842 36.9253 cv
550.775 36.9253 li
550.653 38.9194 549.167 40.5874 546.646 40.5874 cv
545.954 40.5874 544.368 40.4448 543.29 39.2651 cv
542.679 38.5522 542.069 37.4741 542.069 35.3589 cv
542.069 31.1089 544.672 29.8472 546.707 29.8472 cv
547.377 29.8472 548.904 29.9897 549.839 31.1089 cv
550.591 31.9819 550.653 32.8159 550.693 33.3862 cv
548.761 33.3862 li
cp
f
560.182 34.2202 mo
560.202 33.2437 560.019 31.2104 557.66 31.2104 cv
556.418 31.2104 554.914 31.9624 554.873 34.2202 cv
560.182 34.2202 li
cp
554.792 35.562 mo
554.75 37.6772 555.625 39.2437 557.72 39.2437 cv
558.961 39.2437 559.958 38.5933 560.121 37.1284 cv
562.033 37.1284 li
561.971 37.6382 561.89 38.4722 561.158 39.2651 cv
560.71 39.7729 559.694 40.6265 557.639 40.6265 cv
554.425 40.6265 552.9 38.6343 552.9 35.3999 cv
552.9 33.3862 553.307 31.7183 554.914 30.5991 cv
555.89 29.9077 557.11 29.8472 557.7 29.8472 cv
562.277 29.8472 562.175 33.894 562.134 35.562 cv
554.792 35.562 li
cp
f
206.36 13.019 mo
208.354 13.019 li
209.757 13.019 211.221 12.938 212.198 12.2056 cv
214.069 10.8022 214.13 8.40186 214.13 7.54785 cv
214.13 6.99854 214.089 4.49658 212.706 2.97119 cv
211.771 1.93408 210.591 1.68994 208.801 1.68994 cv
206.36 1.68994 li
206.36 13.019 li
cp
204.326 0.00146484 mo
208.577 0.00146484 li
210.55 0.00146484 212.869 0.00146484 214.496 1.91357 cv
215.798 3.43896 216.306 5.45264 216.306 7.46631 cv
216.306 10.6392 214.984 12.5918 213.866 13.4868 cv
212.421 14.687 210.611 14.687 208.455 14.687 cv
204.326 14.687 li
204.326 0.00146484 li
cp
f
225.978 8.58496 mo
225.998 7.60889 225.815 5.57471 223.456 5.57471 cv
222.215 5.57471 220.709 6.32715 220.669 8.58496 cv
225.978 8.58496 li
cp
220.587 9.92725 mo
220.547 12.043 221.421 13.6089 223.517 13.6089 cv
224.757 13.6089 225.754 12.958 225.917 11.4937 cv
227.829 11.4937 li
227.768 12.002 227.686 12.8359 226.954 13.6294 cv
226.506 14.1377 225.489 14.9922 223.435 14.9922 cv
220.221 14.9922 218.696 12.999 218.696 9.76465 cv
218.696 7.75098 219.103 6.08301 220.709 4.96436 cv
221.686 4.27295 222.906 4.21191 223.496 4.21191 cv
228.073 4.21191 227.971 8.25977 227.93 9.92725 cv
220.587 9.92725 li
cp
f
232.494 4.47656 mo
232.494 11.0464 li
232.494 12.043 232.717 13.3037 234.67 13.3037 cv
235.626 13.3037 236.521 12.9785 237.07 12.165 cv
237.498 11.5547 237.498 10.7612 237.498 10.2529 cv
237.498 4.47656 li
239.47 4.47656 li
239.47 12.7749 li
239.47 12.9785 239.511 14.1177 239.531 14.687 cv
237.538 14.687 li
237.498 12.938 li
237.131 13.6499 236.44 14.7886 234.243 14.7886 cv
231.721 14.7886 230.541 13.3447 230.541 11.3311 cv
230.541 4.47656 li
232.494 4.47656 li
cp
f
241.896 4.43555 mo
243.707 4.43555 li
243.707 2.2998 li
245.599 1.68994 li
245.599 4.43555 li
247.876 4.43555 li
247.876 5.83936 li
245.599 5.83936 li
245.599 11.9614 li
245.599 12.4697 245.599 13.3242 246.961 13.3242 cv
247.348 13.3242 247.714 13.2632 247.876 13.2227 cv
247.876 14.7075 li
247.531 14.7686 246.981 14.8296 246.29 14.8296 cv
244.541 14.8296 243.707 14.3208 243.707 12.6528 cv
243.707 5.83936 li
241.896 5.83936 li
241.896 4.43555 li
cp
f
252.157 11.6563 mo
252.137 12.4292 252.543 13.5073 254.394 13.5073 cv
255.188 13.5073 255.777 13.3647 256.184 12.8564 cv
256.388 12.5918 256.51 12.2461 256.51 11.9004 cv
256.51 10.9038 255.798 10.7207 254.272 10.375 cv
252.137 9.88672 250.347 9.45947 250.347 7.32373 cv
250.347 5.45264 251.974 4.23242 254.333 4.23242 cv
255.615 4.23242 257.404 4.59863 258.015 5.81885 cv
258.279 6.38818 258.279 6.87646 258.279 7.30371 cv
256.327 7.30371 li
256.388 5.75781 255.045 5.63574 254.354 5.63574 cv
254.069 5.63574 252.279 5.63574 252.279 7.1001 cv
252.279 8.03564 253.194 8.25977 253.723 8.40186 cv
256.55 9.07324 257.161 9.23584 257.771 9.80566 cv
258.34 10.3345 258.543 11.0464 258.543 11.6973 cv
258.543 12.8359 257.913 13.8125 257.161 14.2803 cv
256.266 14.8296 255.188 14.9717 254.13 14.9717 cv
252.055 14.9717 250.123 14.1177 250.143 11.6563 cv
252.157 11.6563 li
cp
f
267.738 7.75098 mo
267.698 7.2832 267.556 5.61523 265.705 5.61523 cv
263.06 5.61523 263.06 8.68652 263.06 9.45947 cv
263.06 11.5547 263.569 13.5073 265.603 13.5073 cv
267.23 13.5073 267.779 12.2871 267.82 11.29 cv
269.752 11.29 li
269.63 13.2837 268.146 14.9517 265.623 14.9517 cv
264.932 14.9517 263.345 14.8091 262.267 13.6294 cv
261.657 12.9175 261.047 11.8394 261.047 9.72412 cv
261.047 5.47314 263.65 4.21191 265.684 4.21191 cv
266.355 4.21191 267.881 4.35449 268.816 5.47314 cv
269.569 6.34766 269.63 7.18164 269.671 7.75098 cv
267.738 7.75098 li
cp
f
272.763 0.0219727 mo
274.695 0.0219727 li
274.695 5.98145 li
275.326 4.90332 276.587 4.29346 278.011 4.29346 cv
279.089 4.29346 280.635 4.67969 281.225 5.92041 cv
281.428 6.32715 281.57 6.81543 281.57 8.30029 cv
281.57 14.687 li
279.618 14.687 li
279.618 8.646 li
279.618 7.73096 279.618 5.75781 277.421 5.75781 cv
275.997 5.75781 275.285 6.63232 275.021 7.12061 cv
274.695 7.68994 274.695 8.646 274.695 9.27637 cv
274.695 14.687 li
272.763 14.687 li
272.763 0.0219727 li
cp
f
291.35 8.58496 mo
291.371 7.60889 291.188 5.57471 288.828 5.57471 cv
287.587 5.57471 286.082 6.32715 286.042 8.58496 cv
291.35 8.58496 li
cp
285.96 9.92725 mo
285.919 12.043 286.794 13.6089 288.889 13.6089 cv
290.13 13.6089 291.126 12.958 291.289 11.4937 cv
293.201 11.4937 li
293.14 12.002 293.059 12.8359 292.327 13.6294 cv
291.879 14.1377 290.862 14.9922 288.808 14.9922 cv
285.594 14.9922 284.068 12.999 284.068 9.76465 cv
284.068 7.75098 284.475 6.08301 286.082 4.96436 cv
287.059 4.27295 288.279 4.21191 288.869 4.21191 cv
293.445 4.21191 293.343 8.25977 293.303 9.92725 cv
285.96 9.92725 li
cp
f
296.4 6.55078 mo
296.4 5.85938 296.36 5.14746 296.299 4.47656 cv
298.231 4.47656 li
298.271 6.44922 li
298.638 5.02539 299.858 4.55762 300.712 4.43555 cv
301.282 4.35449 301.709 4.37451 302.035 4.39502 cv
302.035 6.26611 li
301.933 6.22559 301.811 6.20508 301.668 6.18506 cv
301.526 6.16455 301.343 6.16455 301.119 6.16455 cv
298.861 6.16455 298.333 7.50684 298.333 9.25635 cv
298.333 14.687 li
296.4 14.687 li
296.4 6.55078 li
cp
f
314.334 9.21533 mo
319.887 9.21533 li
317.182 2.01514 li
314.334 9.21533 li
cp
316.184 0.00146484 mo
318.362 0.00146484 li
324.301 14.687 li
322.083 14.687 li
320.497 10.8633 li
313.682 10.8633 li
312.096 14.687 li
310.003 14.687 li
316.184 0.00146484 li
cp
f
326.639 0.00195313 mo
328.53 0.00195313 li
328.53 8.646 li
332.354 4.47656 li
334.856 4.47656 li
330.543 8.80859 li
335.12 14.687 li
332.62 14.687 li
328.53 9.1748 li
328.53 14.687 li
326.639 14.687 li
326.639 0.00195313 li
cp
f
342.45 9.66309 mo
341.676 9.66309 338.768 9.66309 338.768 11.7378 cv
338.768 12.3887 339.174 13.5073 340.883 13.5073 cv
341.86 13.5073 342.592 13.1206 343.059 12.4092 cv
343.487 11.7173 343.508 11.1479 343.547 9.72412 cv
343.202 9.68359 342.918 9.66309 342.45 9.66309 cv
cp
343.772 14.687 mo
343.629 14.1787 343.588 13.6904 343.588 13.1616 cv
342.674 14.8496 341.29 15.0127 340.436 15.0127 cv
338.096 15.0127 336.836 13.6904 336.836 12.002 cv
336.836 11.1885 337.12 9.88672 338.625 9.01221 cv
339.723 8.40186 341.352 8.34082 342.165 8.34082 cv
342.653 8.34082 342.958 8.36133 343.547 8.40186 cv
343.547 7.14111 343.547 6.5918 343.182 6.14404 cv
342.795 5.63574 341.961 5.47314 341.413 5.47314 cv
339.481 5.47314 339.377 6.79492 339.358 7.20215 cv
337.446 7.20215 li
337.506 6.67285 337.569 5.96094 338.159 5.26953 cv
338.93 4.41553 340.375 4.17139 341.454 4.17139 cv
342.938 4.17139 344.524 4.63916 345.073 5.67627 cv
345.399 6.28662 345.418 6.7749 345.418 7.24268 cv
345.338 12.124 li
345.338 12.2871 345.358 13.6499 345.5 14.687 cv
343.772 14.687 li
cp
f
355.139 6.5918 mo
354.733 6.06299 353.981 5.5542 352.903 5.5542 cv
350.096 5.5542 350.096 8.95117 350.096 9.64258 cv
350.096 11.4531 350.563 13.5479 352.903 13.5479 cv
355.913 13.5479 355.913 10.2324 355.913 9.43945 cv
355.913 7.95459 355.567 7.14111 355.139 6.5918 cv
cp
355.852 0.0219727 mo
357.764 0.0219727 li
357.764 13.0596 li
357.764 13.2837 357.805 14.1582 357.844 14.687 cv
355.932 14.687 li
355.893 13.0596 li
355.729 13.3447 355.506 13.7715 354.977 14.1377 cv
354.143 14.7075 353.147 14.8906 352.456 14.8906 cv
351.092 14.8906 348.061 14.1787 348.061 9.70361 cv
348.061 5.81885 350.278 4.13037 352.678 4.13037 cv
354.875 4.13037 355.608 5.43213 355.852 5.85938 cv
355.852 0.0219727 li
cp
f
367.749 8.58496 mo
367.768 7.60889 367.584 5.57471 365.225 5.57471 cv
363.985 5.57471 362.479 6.32715 362.438 8.58496 cv
367.749 8.58496 li
cp
362.358 9.92725 mo
362.317 12.043 363.192 13.6089 365.286 13.6089 cv
366.528 13.6089 367.524 12.958 367.686 11.4937 cv
369.598 11.4937 li
369.538 12.002 369.456 12.8359 368.723 13.6294 cv
368.276 14.1377 367.26 14.9922 365.206 14.9922 cv
361.991 14.9922 360.465 12.999 360.465 9.76465 cv
360.465 7.75098 360.874 6.08301 362.479 4.96436 cv
363.456 4.27295 364.676 4.21191 365.266 4.21191 cv
369.842 4.21191 369.741 8.25977 369.7 9.92725 cv
362.358 9.92725 li
cp
f
372.176 5.83936 mo
372.135 4.47656 li
374.069 4.47656 li
374.069 5.96094 li
375.045 4.35449 376.428 4.21191 377.303 4.21191 cv
379.561 4.21191 380.272 5.37109 380.639 6.12402 cv
380.985 5.5542 381.819 4.21191 384.077 4.21191 cv
385.54 4.21191 387.819 4.82227 387.819 7.83252 cv
387.819 14.687 li
385.885 14.687 li
385.885 8.1377 li
385.885 7.24268 385.723 6.85596 385.54 6.5918 cv
385.215 6.12402 384.563 5.69678 383.588 5.69678 cv
382.346 5.69678 381.676 6.40869 381.411 6.7749 cv
380.963 7.40527 380.963 8.52393 380.963 8.97168 cv
380.963 14.687 li
379.032 14.687 li
379.032 7.93408 li
379.032 6.67285 378.299 5.69678 376.793 5.69678 cv
375.493 5.69678 374.78 6.51025 374.557 6.81543 cv
374.129 7.40527 374.11 8.23926 374.11 8.89014 cv
374.11 14.687 li
372.176 14.687 li
372.176 5.83936 li
cp
f
391.168 4.47656 mo
393.081 4.47656 li
393.081 14.687 li
391.168 14.687 li
391.168 4.47656 li
cp
390.963 0.0419922 mo
393.262 0.0419922 li
393.262 2.13721 li
390.963 2.13721 li
390.963 0.0419922 li
cp
f
398.061 11.6563 mo
398.042 12.4292 398.448 13.5073 400.299 13.5073 cv
401.092 13.5073 401.682 13.3647 402.088 12.8564 cv
402.292 12.5918 402.415 12.2461 402.415 11.9004 cv
402.415 10.9038 401.702 10.7207 400.176 10.375 cv
398.042 9.88672 396.25 9.45947 396.25 7.32373 cv
396.25 5.45264 397.877 4.23242 400.237 4.23242 cv
401.518 4.23242 403.309 4.59863 403.918 5.81885 cv
404.184 6.38818 404.184 6.87646 404.184 7.30371 cv
402.231 7.30371 li
402.292 5.75781 400.95 5.63574 400.258 5.63574 cv
399.973 5.63574 398.184 5.63574 398.184 7.1001 cv
398.184 8.03564 399.098 8.25977 399.627 8.40186 cv
402.454 9.07324 403.065 9.23584 403.674 9.80566 cv
404.245 10.3345 404.448 11.0464 404.448 11.6973 cv
404.448 12.8359 403.817 13.8125 403.065 14.2803 cv
402.17 14.8296 401.092 14.9717 400.034 14.9717 cv
397.959 14.9717 396.028 14.1177 396.047 11.6563 cv
398.061 11.6563 li
cp
f
413.358 7.75098 mo
413.317 7.2832 413.174 5.61523 411.325 5.61523 cv
408.68 5.61523 408.68 8.68652 408.68 9.45947 cv
408.68 11.5547 409.188 13.5073 411.223 13.5073 cv
412.85 13.5073 413.399 12.2871 413.44 11.29 cv
415.372 11.29 li
415.25 13.2837 413.764 14.9517 411.243 14.9517 cv
410.551 14.9517 408.965 14.8091 407.887 13.6294 cv
407.276 12.9175 406.667 11.8394 406.667 9.72412 cv
406.667 5.47314 409.27 4.21191 411.303 4.21191 cv
411.975 4.21191 413.5 4.35449 414.436 5.47314 cv
415.188 6.34766 415.25 7.18164 415.29 7.75098 cv
413.358 7.75098 li
cp
f
418.1 0.0219727 mo
420.032 0.0219727 li
420.032 5.98145 li
420.663 4.90332 421.924 4.29346 423.348 4.29346 cv
424.424 4.29346 425.971 4.67969 426.561 5.92041 cv
426.764 6.32715 426.907 6.81543 426.907 8.30029 cv
426.907 14.687 li
424.954 14.687 li
424.954 8.646 li
424.954 7.73096 424.954 5.75781 422.758 5.75781 cv
421.334 5.75781 420.622 6.63232 420.358 7.12061 cv
420.032 7.68994 420.032 8.646 420.032 9.27637 cv
420.032 14.687 li
418.1 14.687 li
418.1 0.0219727 li
cp
f
437.254 8.58496 mo
437.274 7.60889 437.09 5.57471 434.731 5.57471 cv
433.491 5.57471 431.985 6.32715 431.944 8.58496 cv
437.254 8.58496 li
cp
431.864 9.92725 mo
431.823 12.043 432.698 13.6089 434.792 13.6089 cv
436.034 13.6089 437.03 12.958 437.192 11.4937 cv
439.104 11.4937 li
439.043 12.002 438.961 12.8359 438.229 13.6294 cv
437.782 14.1377 436.766 14.9922 434.711 14.9922 cv
431.497 14.9922 429.971 12.999 429.971 9.76465 cv
429.971 7.75098 430.379 6.08301 431.985 4.96436 cv
432.961 4.27295 434.182 4.21191 434.772 4.21191 cv
439.348 4.21191 439.247 8.25977 439.206 9.92725 cv
431.864 9.92725 li
cp
f
442.02 6.55078 mo
442.02 5.85938 441.979 5.14746 441.918 4.47656 cv
443.852 4.47656 li
443.891 6.44922 li
444.258 5.02539 445.479 4.55762 446.333 4.43555 cv
446.903 4.35449 447.329 4.37451 447.655 4.39502 cv
447.655 6.26611 li
447.553 6.22559 447.43 6.20508 447.29 6.18506 cv
447.147 6.16455 446.963 6.16455 446.739 6.16455 cv
444.481 6.16455 443.954 7.50684 443.954 9.25635 cv
443.954 14.687 li
442.02 14.687 li
442.02 6.55078 li
cp
f
459.852 9.21533 mo
465.405 9.21533 li
462.7 2.01514 li
459.852 9.21533 li
cp
461.704 0.00146484 mo
463.879 0.00146484 li
469.819 14.687 li
467.602 14.687 li
466.016 10.8633 li
459.202 10.8633 li
457.616 14.687 li
455.52 14.687 li
461.704 0.00146484 li
cp
f
473.637 4.47656 mo
473.637 11.0464 li
473.637 12.043 473.86 13.3037 475.813 13.3037 cv
476.77 13.3037 477.665 12.9785 478.213 12.165 cv
478.641 11.5547 478.641 10.7612 478.641 10.2529 cv
478.641 4.47656 li
480.614 4.47656 li
480.614 12.7749 li
480.614 12.9785 480.655 14.1177 480.674 14.687 cv
478.68 14.687 li
478.641 12.938 li
478.274 13.6499 477.583 14.7886 475.385 14.7886 cv
472.864 14.7886 471.684 13.3447 471.684 11.3311 cv
471.684 4.47656 li
473.637 4.47656 li
cp
f
485.336 11.6563 mo
485.315 12.4292 485.721 13.5073 487.573 13.5073 cv
488.366 13.5073 488.956 13.3647 489.364 12.8564 cv
489.567 12.5918 489.688 12.2461 489.688 11.9004 cv
489.688 10.9038 488.977 10.7207 487.452 10.375 cv
485.315 9.88672 483.526 9.45947 483.526 7.32373 cv
483.526 5.45264 485.153 4.23242 487.512 4.23242 cv
488.793 4.23242 490.583 4.59863 491.194 5.81885 cv
491.458 6.38818 491.458 6.87646 491.458 7.30371 cv
489.504 7.30371 li
489.567 5.75781 488.223 5.63574 487.532 5.63574 cv
487.247 5.63574 485.458 5.63574 485.458 7.1001 cv
485.458 8.03564 486.374 8.25977 486.901 8.40186 cv
489.729 9.07324 490.338 9.23584 490.95 9.80566 cv
491.518 10.3345 491.723 11.0464 491.723 11.6973 cv
491.723 12.8359 491.092 13.8125 490.338 14.2803 cv
489.444 14.8296 488.366 14.9717 487.309 14.9717 cv
485.233 14.9717 483.301 14.1177 483.323 11.6563 cv
485.336 11.6563 li
cp
f
494.02 4.43555 mo
495.831 4.43555 li
495.831 2.2998 li
497.721 1.68994 li
497.721 4.43555 li
500 4.43555 li
500 5.83936 li
497.721 5.83936 li
497.721 11.9614 li
497.721 12.4697 497.721 13.3242 499.084 13.3242 cv
499.471 13.3242 499.836 13.2632 500 13.2227 cv
500 14.7075 li
499.655 14.7686 499.104 14.8296 498.413 14.8296 cv
496.665 14.8296 495.831 14.3208 495.831 12.6528 cv
495.831 5.83936 li
494.02 5.83936 li
494.02 4.43555 li
cp
f
507.729 9.66309 mo
506.956 9.66309 504.047 9.66309 504.047 11.7378 cv
504.047 12.3887 504.454 13.5073 506.163 13.5073 cv
507.139 13.5073 507.872 13.1206 508.338 12.4092 cv
508.766 11.7173 508.788 11.1479 508.827 9.72412 cv
508.481 9.68359 508.198 9.66309 507.729 9.66309 cv
cp
509.051 14.687 mo
508.909 14.1787 508.868 13.6904 508.868 13.1616 cv
507.954 14.8496 506.569 15.0127 505.715 15.0127 cv
503.375 15.0127 502.116 13.6904 502.116 12.002 cv
502.116 11.1885 502.399 9.88672 503.905 9.01221 cv
505.002 8.40186 506.631 8.34082 507.444 8.34082 cv
507.932 8.34082 508.237 8.36133 508.827 8.40186 cv
508.827 7.14111 508.827 6.5918 508.461 6.14404 cv
508.075 5.63574 507.241 5.47314 506.692 5.47314 cv
504.76 5.47314 504.657 6.79492 504.637 7.20215 cv
502.725 7.20215 li
502.786 6.67285 502.848 5.96094 503.438 5.26953 cv
504.209 4.41553 505.655 4.17139 506.733 4.17139 cv
508.217 4.17139 509.803 4.63916 510.352 5.67627 cv
510.678 6.28662 510.698 6.7749 510.698 7.24268 cv
510.618 12.124 li
510.618 12.2871 510.637 13.6499 510.78 14.687 cv
509.051 14.687 li
cp
f
515.729 4.47656 mo
515.729 11.0464 li
515.729 12.043 515.952 13.3037 517.905 13.3037 cv
518.862 13.3037 519.756 12.9785 520.305 12.165 cv
520.733 11.5547 520.733 10.7612 520.733 10.2529 cv
520.733 4.47656 li
522.706 4.47656 li
522.706 12.7749 li
522.706 12.9785 522.747 14.1177 522.766 14.687 cv
520.772 14.687 li
520.733 12.938 li
520.366 13.6499 519.674 14.7886 517.477 14.7886 cv
514.956 14.7886 513.776 13.3447 513.776 11.3311 cv
513.776 4.47656 li
515.729 4.47656 li
cp
f
527.711 11.6563 mo
527.69 12.4292 528.096 13.5073 529.948 13.5073 cv
530.741 13.5073 531.331 13.3647 531.739 12.8564 cv
531.942 12.5918 532.063 12.2461 532.063 11.9004 cv
532.063 10.9038 531.352 10.7207 529.827 10.375 cv
527.69 9.88672 525.901 9.45947 525.901 7.32373 cv
525.901 5.45264 527.528 4.23242 529.887 4.23242 cv
531.168 4.23242 532.958 4.59863 533.569 5.81885 cv
533.833 6.38818 533.833 6.87646 533.833 7.30371 cv
531.879 7.30371 li
531.942 5.75781 530.598 5.63574 529.907 5.63574 cv
529.622 5.63574 527.833 5.63574 527.833 7.1001 cv
527.833 8.03564 528.749 8.25977 529.276 8.40186 cv
532.104 9.07324 532.713 9.23584 533.325 9.80566 cv
533.893 10.3345 534.098 11.0464 534.098 11.6973 cv
534.098 12.8359 533.467 13.8125 532.713 14.2803 cv
531.819 14.8296 530.741 14.9717 529.684 14.9717 cv
527.608 14.9717 525.676 14.1177 525.698 11.6563 cv
527.711 11.6563 li
cp
f
543.292 7.75098 mo
543.25 7.2832 543.108 5.61523 541.256 5.61523 cv
538.612 5.61523 538.612 8.68652 538.612 9.45947 cv
538.612 11.5547 539.122 13.5073 541.155 13.5073 cv
542.782 13.5073 543.331 12.2871 543.372 11.29 cv
545.305 11.29 li
545.182 13.2837 543.698 14.9517 541.176 14.9517 cv
540.483 14.9517 538.897 14.8091 537.819 13.6294 cv
537.209 12.9175 536.598 11.8394 536.598 9.72412 cv
536.598 5.47314 539.202 4.21191 541.237 4.21191 cv
541.907 4.21191 543.434 4.35449 544.37 5.47314 cv
545.122 6.34766 545.182 7.18164 545.223 7.75098 cv
543.292 7.75098 li
cp
f
548.032 0.0219727 mo
549.965 0.0219727 li
549.965 5.98145 li
550.594 4.90332 551.856 4.29346 553.28 4.29346 cv
554.358 4.29346 555.903 4.67969 556.493 5.92041 cv
556.698 6.32715 556.838 6.81543 556.838 8.30029 cv
556.838 14.687 li
554.887 14.687 li
554.887 8.646 li
554.887 7.73096 554.887 5.75781 552.69 5.75781 cv
551.266 5.75781 550.555 6.63232 550.29 7.12061 cv
549.965 7.68994 549.965 8.646 549.965 9.27637 cv
549.965 14.687 li
548.032 14.687 li
548.032 0.0219727 li
cp
f
566.68 6.5918 mo
566.274 6.06299 565.52 5.5542 564.442 5.5542 cv
561.635 5.5542 561.635 8.95117 561.635 9.64258 cv
561.635 11.4531 562.104 13.5479 564.442 13.5479 cv
567.454 13.5479 567.454 10.2324 567.454 9.43945 cv
567.454 7.95459 567.106 7.14111 566.68 6.5918 cv
cp
567.391 0.0219727 mo
569.303 0.0219727 li
569.303 13.0596 li
569.303 13.2837 569.344 14.1582 569.385 14.687 cv
567.473 14.687 li
567.432 13.0596 li
567.27 13.3447 567.045 13.7715 566.516 14.1377 cv
565.684 14.7075 564.686 14.8906 563.995 14.8906 cv
562.631 14.8906 559.602 14.1787 559.602 9.70361 cv
559.602 5.81885 561.819 4.13037 564.219 4.13037 cv
566.415 4.13037 567.147 5.43213 567.391 5.85938 cv
567.391 0.0219727 li
cp
f
572.614 4.47656 mo
574.526 4.47656 li
574.526 14.687 li
572.614 14.687 li
572.614 4.47656 li
cp
572.411 0.0419922 mo
574.709 0.0419922 li
574.709 2.13721 li
572.411 2.13721 li
572.411 0.0419922 li
cp
f
584.893 8.58496 mo
584.913 7.60889 584.731 5.57471 582.372 5.57471 cv
581.129 5.57471 579.625 6.32715 579.584 8.58496 cv
584.893 8.58496 li
cp
579.502 9.92725 mo
579.461 12.043 580.336 13.6089 582.432 13.6089 cv
583.672 13.6089 584.668 12.958 584.833 11.4937 cv
586.745 11.4937 li
586.682 12.002 586.602 12.8359 585.87 13.6294 cv
585.422 14.1377 584.405 14.9922 582.35 14.9922 cv
579.137 14.9922 577.612 12.999 577.612 9.76465 cv
577.612 7.75098 578.018 6.08301 579.625 4.96436 cv
580.602 4.27295 581.821 4.21191 582.413 4.21191 cv
586.989 4.21191 586.887 8.25977 586.846 9.92725 cv
579.502 9.92725 li
cp
f
589.635 5.65625 mo
589.616 4.47656 li
591.528 4.47656 li
591.547 6.12402 li
591.772 5.69678 592.504 4.27295 594.823 4.27295 cv
595.739 4.27295 598.524 4.61865 598.524 7.75098 cv
598.524 14.687 li
596.573 14.687 li
596.573 8.19873 li
596.573 7.52734 596.491 6.91699 596.022 6.44922 cv
595.536 5.98145 594.864 5.75781 594.213 5.75781 cv
592.829 5.75781 591.547 6.75439 591.547 8.80859 cv
591.547 14.687 li
589.635 14.687 li
589.635 5.65625 li
cp
f
603.389 11.6563 mo
603.368 12.4292 603.774 13.5073 605.625 13.5073 cv
606.418 13.5073 607.008 13.3647 607.417 12.8564 cv
607.62 12.5918 607.741 12.2461 607.741 11.9004 cv
607.741 10.9038 607.03 10.7207 605.504 10.375 cv
603.368 9.88672 601.579 9.45947 601.579 7.32373 cv
601.579 5.45264 603.206 4.23242 605.565 4.23242 cv
606.846 4.23242 608.635 4.59863 609.247 5.81885 cv
609.51 6.38818 609.51 6.87646 609.51 7.30371 cv
607.557 7.30371 li
607.62 5.75781 606.276 5.63574 605.584 5.63574 cv
605.299 5.63574 603.51 5.63574 603.51 7.1001 cv
603.51 8.03564 604.426 8.25977 604.954 8.40186 cv
607.782 9.07324 608.391 9.23584 609.002 9.80566 cv
609.571 10.3345 609.776 11.0464 609.776 11.6973 cv
609.776 12.8359 609.145 13.8125 608.391 14.2803 cv
607.497 14.8296 606.418 14.9717 605.362 14.9717 cv
603.286 14.9717 601.354 14.1177 601.375 11.6563 cv
603.389 11.6563 li
cp
f
611.506 4.43555 mo
613.317 4.43555 li
613.317 2.2998 li
615.208 1.68994 li
615.208 4.43555 li
617.487 4.43555 li
617.487 5.83936 li
615.208 5.83936 li
615.208 11.9614 li
615.208 12.4697 615.208 13.3242 616.571 13.3242 cv
616.958 13.3242 617.323 13.2632 617.487 13.2227 cv
617.487 14.7075 li
617.141 14.7686 616.59 14.8296 615.899 14.8296 cv
614.151 14.8296 613.317 14.3208 613.317 12.6528 cv
613.317 5.83936 li
611.506 5.83936 li
611.506 4.43555 li
cp
f
8.29883 34.0845 mo
14.0508 34.0845 li
22.5977 34.0845 26.8711 29.4478 26.8711 20.1758 cv
26.8711 15.8262 25.8027 12.4492 23.666 10.0449 cv
21.4141 7.50781 18.1426 6.23926 13.8506 6.23926 cv
8.29883 6.23926 li
8.29883 34.0845 li
cp
0 40.3228 mo
0 0 li
15.9971 0 li
22.1396 0 26.8906 1.85059 30.248 5.55176 cv
33.4727 9.10059 35.085 13.9756 35.085 20.1758 cv
35.085 27.063 33.0146 32.2153 28.875 35.6294 cv
25.0781 38.7583 19.6689 40.3228 12.6484 40.3228 cv
0 40.3228 li
cp
0 0 0 0.5 nzopmsc
f
55.7158 6.41113 mo
49.3047 25.4985 li
62.1826 25.4985 li
55.7158 6.41113 li
cp
35.5117 40.3228 mo
50.5068 0 li
61.124 0 li
76.0908 40.3228 li
67.1621 40.3228 li
64.2715 31.7368 li
47.2158 31.7368 li
44.3545 40.3228 li
35.5117 40.3228 li
cp
f
98.9561 6.41113 mo
92.5449 25.4985 li
105.423 25.4985 li
98.9561 6.41113 li
cp
78.752 40.3228 mo
93.7471 0 li
104.364 0 li
119.331 40.3228 li
110.402 40.3228 li
107.512 31.7368 li
90.4561 31.7368 li
87.5947 40.3228 li
78.752 40.3228 li
cp
f
131.952 34.0845 mo
137.704 34.0845 li
146.251 34.0845 150.524 29.4478 150.524 20.1758 cv
150.524 15.8262 149.456 12.4492 147.319 10.0449 cv
145.067 7.50781 141.796 6.23926 137.504 6.23926 cv
131.952 6.23926 li
131.952 34.0845 li
cp
123.653 40.3228 mo
123.653 0 li
139.65 0 li
145.793 0 150.544 1.85059 153.901 5.55176 cv
157.126 9.10059 158.738 13.9756 158.738 20.1758 cv
158.738 27.063 156.668 32.2153 152.528 35.6294 cv
148.731 38.7583 143.322 40.3228 136.302 40.3228 cv
123.653 40.3228 li
cp
f
%ADOBeginClientInjection: EndPageContent "AI11EPS"
userdict /annotatepage 2 copy known {get exec}{pop pop} ifelse
%ADOEndClientInjection: EndPageContent "AI11EPS"
grestore
grestore
pgrs
%%PageTrailer
%ADOBeginClientInjection: PageTrailer Start "AI11EPS"
[/EMC AI11_PDFMark5[/NamespacePop AI11_PDFMark5
%ADOEndClientInjection: PageTrailer Start "AI11EPS"
[
[/CSA [/0 ]]
] del_res
Adobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get execAdobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get execAdobe_AGM_Core/dt get exec
%%EOF
%AI9_PrintingDataEnduserdict /AI9_read_buffer 256 string putuserdict begin/ai9_skip_data{	mark	{		currentfile AI9_read_buffer { readline } stopped		{		}		{			not			{				exit			} if			(%AI9_PrivateDataEnd) eq			{				exit			} if		} ifelse	} loop	cleartomark} defenduserdict /ai9_skip_data get exec%AI9_PrivateDataBegin%!PS-Adobe-3.0 EPSF-3.0%%Creator: Adobe Illustrator(R) 13.0%%AI8_CreatorVersion: 13.0.2%%For: (sl) ()%%Title: (DAAD_Logo-Supplement_eng_black_cmyk.eps)%%CreationDate: 3/4/15 12:15 PM%AI9_DataStream%Gb"-6=`uj:dQ#ku?k7Ltb`Dp;P$i*<Ye`4USgV`mN#Bl:FfQRteasdZ:]:!(X@#n2jFlK`]!kK8l4aFoW<e2%64kA0b2^T<=-N&[%da(YfQ#tJ3isrC(jlT^g*G5)VbN#Q1DL)\=WsD'i4>`mgLd2?"RqIB[Qf-p!Th(]N=Eq,*mB"=@ag++&G']'8IQEqC(J/ggeERHJ%T'TUm=W36FV<NB_>.TCnL!")+R9L+ih94?Yh4#eJ0fFcDfd;1EDUIbDP&C2g'VA)\UK+d)LH^(@ZS>E4:^,aph]'8j'!MS51uOS4%GcIc`JPu#&hb1Yj=S)TUq62f'o96n,HfNeX[Huj<`u$jhL*n8)O8=Xa(.No1L$:Q5M9"XA8=lP"*6[qk!SYM%ERmi_nHd;m/9s^Y%:[a?1n'@g,U=C,TQIEeh)/XfK+_8a@Q]8i=0^qJhN[,6(_AsHP&YLsNl>K^uhY_7H=H\5IcNM\4`O+A=-/FO8952mB`1ZUL[.6d,%gpZADh@aFI3a+*?dg<gb`%%.7>3iBK>QJe$lV28ppDE@</-`cf;m:.o&n%)C>]A-ugija*.5!r]E=#@N6lhr@V1*]WTfUENeU5^c%9TiA.ij]iE\Z#jB_'`nOXl]AOX3<'>\.dp*%jR66r@^_A'7=6Pb@PT9iX]jk^JOcXM7R@3!4Q=NH'?eZkXIAT06@\[ja)GUTs\\_%h(6Sngm-a2gpt1cLtO3Oa0Oomj3X\HT[/!l.V2cTQXs#GbG&1+-+0Q^HC?t8EMsVmTjJdp>&bNs`Gq`;e>FF^2M-J5#k/?f/I8;?%+J;d!)u;t)np/_7T1;]>o;F".7r:jE<*Lhl*.#1q6M7/fH%o^#n0Ri@LnkeL.Fkc?_<;Q?6=W?SW"g571f@5,7YEs&)`/c2M8h,E%Jint2KKdd:1a;RKH6RGT4eiU_:Gct](R:^L+ddqO"?pRS`e?TRRo0QX8b7Qg-T!/L,ZI+&j@M+IJj$r@i's@abb[=_>*+64'cJ1j%6p6YM,bl]/AB)u'e-_12RUJMtngk\$qF&*FkfE[s:P(SV6(b(j)B\f$ZUhTZd$;C:&1&A_QqR?%bo+?Y:`ZqfFHboT7S^0XQkR+<%>gfr8?_iDJ&%+]uP;j58%R!NU9kr)NcmNQsp`#3Rd"FN>5#E7U3gW@rCe8dUjTl"+h%C5k]HV>7_OPQPi<;e*UcB`C-eK$2'=`^5%#]j]LUp1Ne;(Dr6l('q4lH)8B3K["Pc",*+D+G0`r/^?N,44G/QUd3>7C"1".D/Hd>N1!`s3T4%%nVqebd'WJAKDCP&gbrS$8j)6%-%%#KUgN[<9iLg/qFe1>/cK5s;PX.9s'd_R>PUqk\NKCA.8g)-IlpMU.t>[U7"Y>3,UD"KnR"1IC6ZKo?S4it.t>Z*Q`!Y&--BTc%Y?3'bQ+uB%-3#4d*6fN#,kFWW9>APT(`sF7a5YbT?U4W;@bF/K5fH>A<._jeAP!nfK%-R,/?D>14cAUc$ndU9HDLlA<g(U&$`+=r%O.XGZUgE/\H.$$JUHkD;3$<$FM+ku-Q)%<258fBj'Q=k8,/5gJZ'JcD4s<69j`-%),#$A`kSG,9bCfd,RRli*%)SFZL=D>]"XYZi%+J*&hGOhhm/j+]?E$]J!-V7):6^ZK81`+Rg-/9c'ahQmtko6Lg9M5KlqT^U1aB6N%L*p)dq'@jF[#i;Jn7L],,:#('W=kPh<a$hZ%;CdkN\1]N^)%"$'-IIba.[-!VR?b9RJkKhbA8/d*GgY!9'qpCNFm1oC#K.LAH%>fG;D#%j$Z96LSkqXCIS40>gnMlKKW2h2$8uW-%'kp%J-M8mL>a?Lp#+A\\kRtqne5AUm:?b9COYT`'hiacU#X"D"'$:n&Ss0"IGYcRsADE@)cseABTZjYe[G4D98"uG?;-?s7-tVhc%p,")\$Q2!kD_+a&W;+Vn1XM>BR!K2)Bk<m3-R?f13!eKB4JQQk11OM5;Z<"r+\BDD4!\\d1rnY#krD()8*RXs,gHrM;<o5o6PE1K%r_n&=P%7,tO`;&iLn(L"/!M0)C#qp\RNfEPSOl&'-:!_g`^bKYGtl^o7Um0;92CG6LTEm7o;f9\U(tcI&fmas/+Q2PM^"!m>qaG7%H'2!S4@LA+),kW6q?5%5,,\'!APV2hH*n<2(\G6\Q^1UCb1]oplBQPR03Q=$FD["dFd1g),&VLb4:N?CERI;T,l*auN_pp,+aKOL%3OnO+;C?t72;kgDB#K8?^RLQgBK__*8(Mg>CD+ngBE_Dtq/eJURs[t:^2/#Im^_Ycjd/%fl:nht^KW84:AUaBT_#R[oQueko4lZV%r]Qir=!MBU)uS(kCDoTEK:1U0`pFbb0`(4<p33^H6t"`TenWU%W4n!*X22)ShcHS*>kY]i2d\/Ngpbbs84L3Glhrt[NFmgbU,UMo%XfZs6c%gfC<rN%XE2?EI%Wd4PTc<nCro3b<9g2(\cHlTOnu^;Qd%@dZ?\=@Nk#J7lB8F:Oi)?e&5(ksDf]6d63,9Q2`G,D_N8^od%MrfEh`9_kc%P9UVFoP*C2?"N'Vk_(;X>%2bKRC8i5D84_!-iYS`pt\TK<R`.XP[7SQ@CQ=e#.9:Vt,@:"]4E2_P<!IOOD9%_t'SM%R_"[*h5a-!I1MR0UCr6;"3)7e-EXftQV3FirO^B&^fRYsEq"j2g_sULL@c^0,Ud$1s*,26[TY&6_q)tVis,]bK0mGu^IGnj.pAK;%s.&!hm\J&#dTEq)h:B79k''<K>N;;:jGGi"j4U@Y[@uAW/kQNR&)l9&9*tr+>uFdlE^0O,5L/622\c5TNk$gu05m)e$`/nC/elHV%m(/p9q!OBi*JMUe^DK<TP(K=n+R;9fOD9_B^$RS5aWm#cY-gfK^#Q-UA0=cWRujj4==c=O>8m]_nXIXp.8iUQ$$GihM8di(Y0`tc%&QrhOJCk:TW:V%+'E&hk:r'e&rsSl#]j(u3b>Af$QgF!YoY:E=!NS0=LV([$1[P5gbg@?r"&*C;g_2RtggZcnUq/`[!piB=j9I"5%0TR$X96f5'B$0N<f6B-'l7d<6+1,+mhElTB4.iuQX+,=046U&%Wq-BTGE-2S[:.if:]a6@qH3_S'8ba2ROjnW[-!8\crhQs]'1<=%d7S/3aqlDl-8N8'9GX((s/"4Z&+KQAm=7/]6srI#G4lVJ\)%^\rcX6al,4!Ap%V!TYjAqr`[8+KdI_?;HJ3E3NokK2C6*[9(uKK`%s-j-Sq1iHW7ns"l/k3bEJ/(3fs0J0\hoCLDYYW(T6;&c+%]A[gDjLjIjZa$9s"?q-iq(Lri77TE(5'S>d.qV3`UZTrkY86<ZC#&j%ZhmP!?KF/3c#EZ&17Z,Yl/?S<+,M;RK\^>@*-@NS:.?Ker+AM7Ma_*>@*<Os]g;\AM*@81rj0KDD3CA`/I'^r0#8g3ofe`'J<lCm%XZuD!Yl&"Ef9i`'SK9uFplDWYYY+lC.#`Mr<YruRD=J1G`8dL@"s]XWQ`;biTd1+;nJ1er*6+AKQD;9lk?]_&e"O]nlGg28lGu+j%9[SDeG8g_E!P1hX3$jE.p.TF4oG1g%Rhgl;&,pGi$$@b2-7uhO:;EP*I,',_Ajf?r9%3UdC,pnNf%iunN#l*H>Ed%-"]NeD$i1lc%h2B,,Op6refsn&!CVFU\>P##0K2.35Bc-$UC"*'o-dAr6gUZCP`gI[-0Q5(3&?p#O6GU%3Mu]uJ#TV6\s3YoFpAVIA(V><2X$%:/%Q@I#_-?cp@(9=hirDfoUF4[<GC$P%ED@'--]r&9+1jZ=P)c^'7!*G_6=sFa(=Q"KMSLCtdn`[<2\u!"7(7F[uW\FQ+-SaGYea;XV%1N"e!3q=k7;n\R+7KZMTG_mNSZU%!L+gD.sA1f*n4`b7;bGi_@]eqPPmTF<0'O2'dX&2MuGhR8Ff*+JL?m=EH]kX7oFk:qhoL@DQ%eenp/cm/)hrrqc<#LMJoi[VB55;C3R#li<</:m!<X\il^=W`dgOdX.;dm&0M)%,uXh?;%lB0,MT]'Ii,Na>JIRVE;N-<$a&pL&RX%0jW]H)6?cEZ/A]<AYa"D.LaP2@<*nc^M5dGD=`QiH')DlC3oE-C*66mF@Yd+TlOm7Bf%>S?(SO:"!i)m8QSm!3piimR,jqZ'"@4t%4G8Dms,]#ld-bAViKOhJYrNuYgKo_oTqPeMeFXs0*#"8fhiqU2.=75WKheNTB<@"9:c>CI97WdpXV[OPkDP-A(5mlIqlVf0<?H<c%=,W<Se\>^Yc?'+CYU""sH%/FZ75r\8PErH2(m*.Dj]p]kW828%!FA*f[N7636QuqE/hHnsS1Go@d;8eBQ.6.Q7-n'+4H,s#ZGlJ-%1I=cUa3Ee)DrRG_E]S9sFp)-&4?/PE0^ZQV*bu#*<EM=r/S"1@XTn+aWC(OmZIEd:XelrC6]2BBCWhHJ:t$:!*eVSt<,<=Yihi)d%H_3jJW*EokqS(k@;r?'tEWFh@q%G#?r&GTs8/lHFO^:B^GNR]e>/<\1=l^*KmCor>L;"O3!%mGm=okI3?dni.U(+r.[@>I(H>TVt%'D3]a"f["g7Qmgo2+u"/Pf7ZrB!/N[/b(mYRld&FoU+9;nViu#1[C'pH8KW#e?%uGF2Agc'6M*Q=(h-G!+kAn,g*9d/>ie$B&-?2%s"r!,er=Nh9*_m'';U-*ZVi9_fpAkp)GrfKJ>eAlIpsYtW$.be[MYgED)eqh7_)f?d2jjZXdO<1d`0DGeeu`oobZBd$WKtrfiDsb%1f+SA!RrBrABpmINQ@e;B>bXna]<+DRMH=V&j1`FBUl91RWlL$\+AIL%E9MU)GC>h8fRF/]dSJD_,1P+(Au\2/7n,]7?)6l^la#=%M:LNr3(6@sf]h@?5@TJ^fLFBR1hGBU!A8:dlH?Wl*u:7(7^GtT06;jkD*!l7'hP+DE\NZO5Gfsc!Z_`UBnHj"4+gro.5iE8M4(90%'#QVc<Eg@VCM["21g[C`MtR.=nWllr]fmjI5HMkalrVP''C.P$)HjU&$"`.R7lKs?Ws`7'i_p`'d[J_!O^.s1]#I<#o-D+"Y]M"b%Zd.'t_8=n0REiAo6a,#3TU)__CCqoMeS<NPU_7Y4emouDG8,OOXd,G<mYk/G_j@"(QJ_n3Y0&\+L3LE/c5Kc%Rc._'Qq9%I'moW.%(f+XDY>gDu@gj!<56E>?Ck@reGj11eZ<2-H%B%CQSiUhEK81kjP*MKJQ/J*QKX=P_hh0?m[<oufT$EWI(8-YnS57o-.oN3->%d.i%Y@3?N!g$,*W-L9>Xft#ESYO7Q5g6]L,ec:#`Q-?WQ$U=9$n+gLS<3=SCJe`a8?>K+`iiaj[\o:ci9VN0.m@lo0X:-@c(5Q#ID6RL%WFI6)8A[U6/=C0#a)QH+oLAknK1uMbqNpBI^F[KF"ID5sKl,DhHofQuQ[_cn_jYD*Dt_tgV>kK1=AEFY>Ko,GU=k4?/=sJ@:8XR8%JCcSfZC%IbTSLeVC)dji#Ac"m2X21E$qrM%?hrr^M]LQY/pO1Ec[hmf2C&!Vb!30O]U#P*665Gpi)d`;Kl68egH8T1NWrNRT(KOk%+HU)b-J[iq+sd(q)2HOPoPbT4\TVa[?>F$GR-cN&KBLJQ/I[U]kBe%H6T*k=7@q`_;ps.(o>13r2'5$SCr1;B"$'m[kNpuG9l#^m%F/i&96a-`5UNR;ZI<@4$@<ZpGK)6fM"@`\/(D^SH39P2R#%Nle2X#["0l]Q,OC,D+LC7KA%G\)5!o"<@kn(ni,:JW7:Ri$ZDF!@b%@*s$3eQmsc:bUG38O&-ds8Ln(QYeER"*%,KU^Ver]7ED%mD-a,cWfG7qbMJ5mta%AEM#r43(*dL\)r3$0T1;U^]15'KtcJ/d/SVr%s*t'@d;mV&8QZ$\Mnf;YFb[C,6"MofpP*'`U>>KR`0naJn=BA_[_<PddMT&+]On0TeY./t+^s$<S>dcJEm9S7SJ?.Fg7Gd$aEdsA%&eYK?6a)L+V'HrdEEd2d]rn@Yn%`*Z\d0OJ8GTqif"+EU6"DH,GCY.5">Gs-\5eP6=g"e7n9&/*"#'6M9tNPT=&RCZ,M#[GQ7[<Z%<6nr-gh(90VjO8F(Zt/"H7!#"7].5"GpCqH=gnf5"%@?91EUp8bBm:RJ8D7*BurbNQCTHd,Sh#?\*.7\]2aQ0Cu#N;A^1>_8H!@:%\`oer);/p$]r79N/N+K^BnbE#s,r`77Dg5[P?;GA,?<kPRN"fSBXX$f4%mL"4bNj9N1F8q]`aB<db[sh0m(\^?%m?fH$T=Qlqd?#%97%hS2a:tE(5L[NV8sZ&1O%rEMqDaLp?K?4bZ>h!<+ITo*]b&uTVt<<]?h'cLRHY=,`k"rbnc^9Q&3(7R8e$A/i>[sk5(A/>37fq%CZG`bP>386nb1R"e[eNVO"Z_[8cH95/:>4o@aF"0G!)lYZ=f0Y=7Cl)=Hs5u_h[%AaSXod'L&Mf[UEg(]^X&#?ba6cDtB*<F.hfA%ag]LaYk45Q/gB=`+lldkI-'dobCbXOq>aYOI(hc5\PZu2R/G0V/b<?I1T_h@a&/Ntf7#KqVqq[,&"pSV^\?W`nEoG;E7R2,bCpVe%LY5/l?p\gWCirf3O7;NEG)Djc[4hOpCSm,u*qh"L]*s)j1O8Fp.Gn>5:@?F=^/CLsCP]\6K#Q'i(P,7Yd2"qg*.B.<n)rN^aE-VU%c\&F%Coq^LKCJVJ;WhEN-"O"P[nLtnnW&7dMc>o_^SV5u+'j9"fm2b>%M"]0ggd7$^:4ERn_P>e^f'"L+<PI:r6cBq?T?QYNVN@;%N8U\talLd.%j$TO+hiJP3IB]p:AFbZ4a;A3I7Z3]K/_TQai"8`3oL,FBM)U@#OZnik]Dt,qRNiORePVV7DBjJ'V__iUXEK<H&eP:%W8\ilJt'84<."WrL;*sh9#or#j+h*/1s^r7+/C^TM)b[hIADHB-cHWq3:3W_INHqXWUBNB4.]"]@Hd/0(Dic1UYND=^mfoUm7Z?0%7_KWkMsoa79h];(H;7u*1\]_IhA3hXL!OH*Vq>a0%s)"QmTQQ9*q-C9q-:W&fbjWtIbp69QR<Sr\nr'h5',QC@Zq;Yk@0M*X&@pR%Tp[!MF4&M#f[DM856E_RnDo5bDn8jN?D?sGY%FkPJSM1BmoBa3,XN1$LY6%[,1jZ[qpl8qcj?%PAQ$"\rTrqIEj\(f*G&5mO=&t,%^*e'R!6Mdo03t1/F4\lR5)rDH<9Z9X@MUs&3%bqr3s)*`DCW<bk=SBMou'H95re'"CU(`UK!D9=FC$J1S*)WjR,d*Uohk:.<[1c4%q"C-G+2/g17'u%5<]<@Kj?&h+o3^:tYSaH18d_JJ!'Eu<L1q@6LdNs@<9#2?g4;KGs!fYr<9NZrb<IcnqDkKU7e`@cpWLNpW%Ai\%M(n9ro.Ei4p7`K/%<E^-Ej_g=&[o3GWa5FWrrf#E1)*ZI?*&+mZ<m+R8#]B0rlbL@arb&Y7i<,%Wq0@C(?0_%$X__"KbL.1pE9sP%&H.t"Eo5(.3&d;]:U@N;O,)(N2(3Z&.u'pf9^*tL^LV7H^V''gj\`HJoaO/m8/JDO:s$J2G-MBUkt$'qVsGkI$%uEi[Jj7ep;hSX%Ie=F"RWe'A;PVk!&,#]!(k*GSCC8.s>[Q]T?=#DYK?'g_Zgj91/tK@Ko5]2l&rN7=c]Lc"RfH<RVR<(\8#>IJ@K$,8EgaUPDB_@(%LO`2cb!"iNL4p&8>um<V;KEOTAfIeg6*YiBoYDXlh?qf>]nTc2PrO%l/(L:i'e_/?=pl[eB^kX;ps.cEH963r4?d>6a-@99(fNHW%@kX@K6b^3`^QFE%D<cj)F9>tUqM$M**rHEqoq0N)R?%?;@g\LkM=M)Nfc5>pi_K\GknZW0O.hG//m9VE+0:RE9`Rd?E*Nt?Tg6QU%H?#tQX;\iS+jtb0SZ$9208CFBaQAAU$tH't$H`noAZScS>YfQM\:PbX"`H.Q1e@PNoTj?UB-Zd+"X1'S.oHe.&n,9ZiGN5L,NXM!%UcY!^XK!AtG=h:2M:@)2.qHHrkfE;XdcD)<GmWY5"9'\aMlPp^CabO`[$-nD2r+gnL_LN%__!V_9rNM%,CtoEaDtGmam;+.9Z0Cf%D`tK_Eel[Lq"8E.B`dlM:U`*FX_&Z!Kn%6u[Xb(g$UOuQVs3Wir)/4=E*XgH&k"D`LtN)16\Qd=$>,Z$'EQ$Lerd7<%:*E!+n43l%<a,0[O9"63a@jOI-jU7-82O>PY8(+RK?0)s%/F]=:I>^q"N@=9L9)l!)O>(t*oY9!S:?$Edn-?5)2:bYfo(oOV_LUO.92At=HLa!%S8<_N*S8G1'ImQDTP.M3!D$#mPpJ>b,O):[<efA]:LoQ@jYSdtl[RmR:@;SX=WoguW7IYRmHc;Y?i")eS^g"-fsaK$H(!g679!qa%Jo,f38f\\mcF=tcIVqcSVLS%BXcS*#5O:T\p7H#Z&mK"M>tHp@qOO(;CPLI>n=a<FBp[,<ardF#c!L*Uim6f"o97d(0l^,h#/mF2%CSbhUTHl2T_>kRgqm6h?Fca0.qT?e8jg85P\4NST%O-%W)i\$(mc!7Z=ZB4G*U5aNd;F:?<A[IEMC_'[^YJhP`i?IAEp\=L(F\-R%r(hGOKsT'!4VrHQ;NfSNJU9M<"B4^K(QSu*=HPE2q:An'H1>j2:#n]i0^#l'O\o2Z@!^ob'h1%L(j-lqk("hXJRk^gV`V0ZAcC`l%0G_cO:*E,Q8;uX@hKOKdZq5POhi9"pj5C62"3'V1F'(,e86:,8&6XFiDW0/A+n>;Dgqo&A_D!s"n[@G$\3.([nQ]m/a+6Qq4qCN(%H9*@uQ'P11f0V@8H%A9ZD9V\fF'A90Cp,%Pb#<;*%"&d).`eTFX/0$jNOm3oGFkKV!0=go6@%eZJN\F0N6P>e1\i^>/Q`a^aSSQ"%/Z,09_.(32n!b9W^L$J[_"$Do^"YD'7;UE0s$AuOL$3%.'Ip7Q/e<;Nq/@q::QHoQ\8'Wp>.$Kq`>)u!ajS:2ME4I[+AX=[I1#d+%EV<I0T'XuY=38E^3Jn=&/VkL,29]8-k2k\f/#91R\OpIXjEf\fH8&(2R*(n'F00BV9WIrr&%qqM-\iY(-oM1n9=@^cI[?(QkrFs<%gCoC(*'0%mUjXbjQ`Jm_I?Frjj%YIVo*SeX0X]r!a\C&!ZHH_\HY^\86ZP3NjY\7YPm@@sH@H;BP_t[T#NHE9$)R(nhl310Y3VK:%j*qtSWoi79Z>kq.:98^8B#t`CiT)hF<Z!t$Dd9'HC#.q?mY\--IP=m:J#l2"?XB%jUE@sJY?E!?M*Io`Ma)K?%BF/T==2MC\Op?W%qXt>a4Y!gK]nVPSOR*(l6MTUtUQo2/B:?>]\b)n&5cs[i4R;QB#oCnMJIhWKK*i3=80CuLIS$5c$;aFaZ()bQr>.oLPX&RGS-f(7%h5[;1r,O%21Boo"Al/s@\5-[eEd>O.B'qg'J%/_rp.JJ*IgXR9)^PLgBQOW8M*s5k^Pe]1=[i'>S]F,>h*2Bbc&R%J&E8:53jAor%;T\r<?`I2/LMg(foVogY6h]Y#pfdURAkVd`>MU1EfH_`h-gUHQMt[Xil#X#/ggp+ub@%Srm8'Jo?43?=-Rgt(3%C/QU6iA@2bJ>n%.e%Pfh(9?LIMS;-F'CV2>_c4LQ$,BUI#'ssD[ZM/Q@J5tZ(Zd+$]!l7/1B;Y0/F+H.kikN&#`@=fY7"_%$6O%;,W$q?8!4Nnl+\W%:p&U&\T"i5PDpNAfFbS_LYu="RKl@O0TFbqb!$GhT!&K`Rr13L]_ihNQ8^X%gjWt#(W47%=Y9R#8/6^'Y#g=)jhRWj_!FjXla/e'%2._3T1C1>Pn)sTHIQP_*pZb"h=:!K5VJ[1`N[MCbA49NXMO0r"%/LQVUZc"u=WI/a`"Y^mQT,D_\=\\uP<T]CL`/b'6g44CGWR/&%)'GV50".P$1UUL9631R/)#$!\EV8ZuZ<5AIE\iu'-uq^>jNjXYmcr/!GcJ#V`AnKW^aJgLbV?U$Ot%j3>M08tV_KpI[>H'brWj:-%C8CX]C=KRKT->(cH"[_p>Tu@-4lBTcQ\RZa*m=B&r&q/ahBHQ[cOe_qfE[re3sCB#T*h3_f8K_ng!"G\DcS8n%I]F.'st(5.VjL]%r:EZP*fs!8XMQ?***C6(+><Je_p%YmX8j_$Ppeh?g<V6R)=@K*0p&,95Jo.RLN<+S,$*Fh%psF<8<^tnl7l)lN>KG'q6OP%]a2Ml%nM\Pu2gneeb2:n;6geCm$8BZ>$_$jKh"^.[XrFF`84>=1km-nP!Ib9;T]5KO=<d(QTeoJ7-YMkJNs!`PrE!B*G)RWKH$'oN5@Y83%ra+aM[+!J(orbTWp8kH\2'f@&r5+dKH\qi)+[5Bt]#o>tZ^:6ffMW4.j6`4,C=G@+C8C%5Tr6q4nF_)].oahZLR%LIN7%5)F6soW%lRsWhfuE<#,oUOR2$F][FAD&Tkdrp@-T$s&N&&fIQ-`=f0-W'R0_q0BFbY;S+jg^,?&H4Ql,AE\/\RS4o^EVIfKo?j_&_r64i6qh%lNXJk+3:kSiQuI^H$$JBFo*=mYO3m:m*.BCbf7t,D7n8mFT;^SN[ofqmb!$Ql%!25*J(jC*jjTu55Wnaj\JgF8er^/Lf9^DW!cFd%24-V"l3lKjn"UI/e7:mhK@6U<*R)^<N-VaWj64/FR4X":n_$U>'C0%nNE=u^ZLu,\<T.faFKc8:_O#,XRUt7TX=n?p*%eLVKD^"<%;@38cN_>ps'1oTBHaW2j0n$>0d<R^b:GO$"j$NG+Q7_p0f<i,oO<(*hq4VJZM#3H]?sR$@_NW?Km'EMjG\:P!/tAIq*[4Zp<9P@;%mq8g+d<i7hE.Elm3^*j>$dqSr+UIA>OGT5XrUcl1J_)L-`4#RH:aNl"P#7:l/?VNp`H!X.Md5?dRg@JLNMX!097aai&1F<+684k,%K0:!\\I09+-t*Yfh`b5PSe6ufWH`ETYd+9,j[/F*=W-`;p0V@"il@+g+R]dJk>s+K@,2CK!GB)348'&ZA4fuj0'=b^KnC();/C3"%BAGnp<:5R@*/3u;GX7HTO;bRgd=@OGJ&2^mI-e"YU1-]e4I[F?k9;&.[>tH?R]h6_g"e$]?[qKKTG@#THi%b!.@^VRp/O]qfoa41%X?P$;S[Q2t(:n!!Ug\Hh..cZG@;[&IlCsJ;;4[!KK0u5.Srf^##gN3%J,<*"Q3s[/&b#Y5lrVNjIVeiSH69]2=HYaj)kUS#bs3WK%H<u:#l`Wq&m*38128*Qs.<#`BbR6UT/t>N[[Hs.[9CWk1ICdUp1BoMR//dP=r,n*169cK8qKW@8mrOf.)9![+*kUFPDlqd2=nd5F%3;<6qARp#rqtg(/=\>r"2NepNeOm>PWK`jp[r<eVmG1+<di\7_+pj(d$m9":<thC(dY3.?gHQ1M?=EQ<PFk*;YHqb^-*r<$UdY0g%&7)sF;)"R"pC$ae![<)bDfhntjk8U>=:#5D4NVKMF.6]DJU22JVJjY=c]=:,kOgU."=6X'bP1_1o^TBd6AIP53!LS,X+rOPrQmk5%Cm[\kPbFBp:_/\:crf63OR5+OBUDB'YF$W)*oEB*.K=\9WfCt1]"QEJipSDE$r7qPNYH9F]t!*@1$sM3&G:]bk.:gB+$XEYA^$;J%?k1J\7@$!KS>ei\QrlB;nSKF'Lj$Q`W91CBcl&:3UHs)"FVR`"HtJV0-:]mNMI;>(3n^QKV1f>L-U\81K@9FAZ1HIl8[TV:hh>b6%gJ]R/dm<O&nI*o?&=`0Q61YWTmcro'#h!RloP3*(ahLMDM]L(bcX$>E"+G96*AiXW.oLKa>RWhCqRP5\)ck5_i'#Qposb9H5Ln>!%qR+]AJ^Qc[[I=l59W-Ud@9Qg6>om99r;EPunh_DWFhqDI^G9(spI=t6lnnV(;pX"elN&E[>QXP'BW@"tCL$paTYQ5ifNISP'PAiE%9-0'Yp2BjIaNk0soIF56X%7foB-Hkc*B_1dJ$_E16TPOFo62TE3Sg`gL%iS0@<aAomsS(`oYeJ5n#<Xoapj\b]PGDeH6lZNh`f1(%?o>#t9"oAHO,P>K!-et5O\07$\E(JqUD$:?Tc#Cf"9jn!?jL<,G#@Ur<1pS0UY2>[=+!"Bq@@Y_WtIcHrd4A4X0Y22rm-Fk-)Nh!%=28`R'9<-^]F*e%Gn5c22)&+CQNXG(K?*J(16bqB>N<1iXXBSUB)pr`nQ*C`Db^'D7q#9$`GdMHO'33T<'/TGhF!\K4Tp"Ih%H8t%Cb:pINN.@gTJnq+WQN5UeRoiKpt+E2U`Zj^D1VC<qZm[WrB;Es<9M,R2q94/LEqL"nIH[W_02'#"tp&9">!^JNJSZ_-X"">>5j7,%;XEZ810=5bb!Qm%CDB%4V\?V,$)VXNY<>*S8ahA.hA_eo06f67hXgC'l<`]?]7GEs,&Bu(0BnlP[U9WL1$%!Oe].trq)CT-GU:E;%S)-9:.L%P@&,8tX<*L2/U5O7B5&(m`$I>Pn"UIt^-U!14i7CWij-"-Ge]__5IWiTTr-Sn`f(0_NHnXr\6!8JT,#f&eEG)(**tI)E%(/0]D)`U_ZBQ+7Q_t?L,`I+7\gs09!6YB@Tf'oY/ea2B6M:1sdH(PS-W9t6\6&8bp'Uuj7Mdts2YsS%[hE(d<()PD$'BN?U-hWJh%L8UXN>+i(j[u8jRA"[E44e=c_O6D+OA!t(R?Igf4,G<hb>4rd84l5eT(URgm%(&dE`qGfG\2Hfd?$J^Q@2#=(042p"<&=dtH[;J[%<8^(J'VJj<qkYoh#[78V#Ui]aI41H_jUOEG7Q,#doReV84MtWF37e%K39*/;7ii+Pp%>r9M*UB5YE$83C,tQgTQD=2/n1IZME%Y4%o/Gh0&cq[/cYDMeQG1EF!GH;\`_,^?,u^K,dFJ6EjjAXEJ[X_08"P&@TVW,WnT(]ScpdYfeH*Wc#hVacqXQI##(!rN>Bot=\Im3a%l@\g*IA\`:7R3r9:k[L\)(ToMfXRQON.K!?hPek,ji288qkZa(1Q:0L'VI(>$>_`0\hjTUmI`8:-6q?)c53h`+T`Qa,O]a]jQ2WP%ls0TnI\n3&NR'bE5bGnW*Din9)r;7$`ReNi1XbFp<I617'qk>H]KFcfc[m5[>]YWb0*:`r.F?;CREq<%IIRCe2j1k.iE5iTiR_hR%(Kq^YD)>$eVEceA/*Anr..ET.CnA644sl5>edb`?I_2('"F=FMVku^bT"B$M4>IjkQ+ETm)&&[@rqlGFO/sMOLXUE3!=JFm"l!j*%QObE.?XqU?eZI^GkiGhEqlt)[0EMUQo!XK^RuVVr%j!m&!A.0nl^qZsTN<$2r$AtrA"YH8I]UNW0P:GD;;$<+UhU$GCO]L<$I.g_%p$`S]5_D+j0$b_]Fcc1/YJs9:S"AqsIKXNu7A*!kTNc,jW/JhY#0M0dHke6[aF)B"5<qKOLr],pU))F/4lAp41p^:_Ks+F+!'Tui%6TXf+AP6*2!q^>t4BI'E4@!<S>qf8MT-LSfF]EZVL\]ZO2ZPG3oK_Sl;niSpGob:mZuVN)*$&O^/e<;T=0$&THLS4r[pSD+.(,q;%/qp)!a5ut3!+j`go/td!g]]k-Z*%,4Olu=@_Y\FVHTa<8HI^_2VTrM#99WQJ$/Je7%ub73#"i:>mWii."]W7^NKs3jj%G.aWn"Eb%e:,Z<V9Gl]1?Yjt.WJ^/0`.-s1-qNpo>XRu*URF@*fAPr[EDPBm/17bX-IOh.eQgM#3.5oVlO(o139blRabA&lUh(>Cfm1:I&:3?%>0;NL2&16^cXh@7Q92Zn]bF79C6*f;q;[5=Xu2kS/JiXkS.BWe:KKm-4Ep[;>^MSbIAd%F?WSaVm.0<)HdOAKNM!q4r#W2&-t?.:%rgALr]nCCmdp(YiiGMh-PGd:>0/@aTf/A-H-%0H'gNmDYq]W[a7^:h1ASJ])eMD[NPC!,sI\6!Hep8C?]D'%Qb>Vo.c0+?R24M/M%q+uKM9r?B5md04"2b(2j8naf5NYd%\hL]2'l6?V9=MT!jpL-slp'3>`JX02\1@lU6*4fa>Z[/aTq\m4*:ef>aTu,'l?KhC%Ynq.u%DteW4rY>918$6KR03i@G/bD$`a^Z^_kn((5A2$+LEqCP1nKMa2rOB`4%OfrT@i=JrFHCD;_8=q[K"D]HlHT,gj%\.CU9eo#<A209%#HSa=Ur:r#+5RFVlTPM'!fd"_c%5;LhSZ3UWD\bgdK.><3!KbFnUsUo9n5F@>6$8D`Q`t"bO[+3]$G-2R]%5(E3!%HBR-BXHG'!L%"r_7sWl]UY\PWCp*Z]epVLT,Q7X(1G5iZ4-gLeGj@o#n_5kdp"8gBT,XI?r_4.$!OD\@GQ[MdGX%]IRG+Y]0<"c=lE;kV2Q\MGIK%#^].?@m)p%bpj_8>6BMuho(A]>]m1'\NF?EX+R"-*qukdHOecS=3[F/d2!oRCB?t?d=nJc^0kii\0Ti?ht"kf42Z`6-n@r<q<A/t%Hk?uU:+6gi&SE35q`;0AKl5E2<'LHWk^CR234*RDJ7rtL1@oX,onj'kkFu=sJd6]Da8dJm9EZK[,2i&jTEDan&o,@J/sKbma[smT%q>ed-Q]:oY0pngpXrmW#-9)J[%Tl#b3feVMp]E7'`mG>&IO1&J&3O[5'bpaLF>)P%iTH=.Y:lr,4]2ZeM(qWM_*Ki056sDD]LIbl%b2+WlH>R4hFSp-Rp;mc`G=kqPb4s=cejh-;ZlTUt$l[A4H[:0g@5i\0MlFlENY$P*\k"4e?RfGX/-kbOS4mP!gmDnI/9>DOhs6\9%MNCrG]+M<H:[cW)2.n@cKfRhVZ_hj1cs(KTH#(!$4dLtC9mMRtm=c/.ah67=9;d*-65.&t.DFqWC&mhg;>2]h#.*i+Ul0/LZJ5V!%9Yb]A82SHtV6]lB[5>i-,D(#a#^s@aK<B!s.j>M8Wf]o]i\m#n^Zj+t_c4&+?t_0RDK)&<]cL8c%28SoaH.8`<3Oib'4\94bE4P0%rt-<;0sa)uB%gh5E'Q%ng!U;-&CL!X/;>',8#Mi;['mP\RP9uXTBusVRIiY3XjYhrW!m)RAXs<7FI&!#R!*)qQ+S=,jK?a$olA[<%Y;mH+U"$&YI__j]OrKh5AZ-Fi+6$Of]nU[<BX@TYFD?%o2kfG&e:KZ9D87*mr<q>D2kj[.?lGg$nn9^Mrg7*5r%PZoiS8[>Tq'HE%$4CStVON`W@]#V-Gku;q\]3=$*n;`@7YE4Y/54&AUBrSsb?D$jW4^_VkBE:q3OPGhlU#)GBo(<rZR-G+?dou?2#BXKh\7LC+&e@u%K@8A&q-'1`Ut1"b.-jR<28c0!nljcFRMiIgl($)WgncQ&gNNi'cmfrVjmm6ER@W6?hNb/o%6Du/r,rd\Zg0O59WMm:UmP2XD+lZ=%Z6_7EPC%ZaCE;"6&s]1ilWCEO?(NoiQR=\[6Y4U_90p=eRg&sXVARt*[R*FOM/OQ&r<i/)b#LB>Pf[h2qFiM;4YG(3e8aF?\SS6D%Y)f-.&PU2bZ9WT=M-=j^:$XF'%M>$@<:$uB/KtD-jf`?,.e`GGk^:9+lSi(CEf\JtAtC1!dZeUlRHD.\&oWoiW"0U<$HpZoBS.3Q%)s.R>\E+1LLP^P3)l@!$eK1=bUspf0TE*K>DUq8EqeS1u!,39WnRrl9X2]@P]Y6'<+4t'B'"tNVZP7LD$^SG@rCe6kg:,$;]qb+g%Pb2QND<WV&C$(V/T2D6Qrf\ce\3(]Bb?DiDLkU3'm_4OrMJkd3Xam=9=MQe0jXGVlEo;)p8!hMD!cAo"Z&0iXSU>+1NR!!>cR>qP%)LIi>JH@p2fKi(%*)TCF_>e7`53noQ*!A7Hf9YMm_])_Oa6-E?0mqVo5j'ZH(nF=%nLW]am%Nn^F23>rA5TH^LbR*L-8?(<GR`"h%)m;!VA<eXk6lNG01chF+BhdilhNX<N,^.3"g)MBA%lU/Qb(@<)j(#eNAS_[Bcu)n'b90q<Xb*&9Q7r_a#P(dCYCRYa3MKXHH;D0N%3K?S0q#'d0_jV(Vjg!ri%IZEIa4RL/JAPg&Wd_YYK`V7[(^1<;a^MNPcGZ#;eDW>iLQEl9=gREeS_k75T&5&q4Z88[c<BMWU'dQH%J%7e;)HEuk%-r(*mFFAJeIH^;FXAd8nQ+-W[Co>\"%>#H/S"<qf%--L_`^3\I^G-2/N-(FijbUf9;&-ud?g*bZ/>98B\c$'<GY]"%gmN>@E2,iY(:qn`[RJr`HC#80D8!h0CDbQh`p`csEeAA^DYc?Gj"i"CX[?!DZ&9QlIr:q,!X9S1cDa9Sfq-Ojg"9K'!QDjUZr'39%2;2MQ\ESX@ef4$"U!B%m/YtS>#`\e"AcGNQBNrUXSPtLpnX)a0gM=1.h<_gaCmq5*B,SWtbIa^o7I-)<oa+8gVB3+MFf;WDe?KC$%JJ1oNJcgB5clMDW55;A0RB+ATIAH3G>OjJ=MNT9$jmP-K;.oSpf&]`Q50]UhIP=YUP3d[EJ*f(-AuuVdVI=<<$#bi`B!%<og%ksW%mR<t(X`iQ<q_=EWSOkHqnX57XFLGW-cX8>h,J>2uOMP],Ydo1#[Z:iCCjZ%#4=p)&$SKb;X!)RsmQR)BKuPiLeCb>MVmYDDgjTub%E#R01=iDF?\*o<&_6^oTCA;2M(95Zsg%T!])Hs=ulPcY.J&,s8)Odg_kX]rSS;:"DL21F/2E6_m*W;b=(.tlNG'HV>L1.*8!3^TF%GEe3;[4[Of&I[YNfN=B8ZFq%:8"DXQ8-bG5F;;9C.Tkt>/]B%Xl^;iT%'-,5F<p%(];LP,f:6'!Xt>[_R@p>k;H;N#M0KmtBb>u/%kt/?83J]&P3bdu8`Nl:"\`UifJ'sschcRD<d2jY/34/C=S=[/X?2Yb3cc\ei2lO'Z%21g`O?>O\-_'K3BK<W:^rL@6G%P2mj<INs%_m_B82,?V7O]%l`&Je[d/i#*V(m#pWkSlMrD?*J'/a'`+jQ2`6eFpb9E)XlOF*Vqm6YDrU-YEj)R6tVX6)WF`h("14BUM.6B+&UF%6RMsnbb.m0%W@\$B:V>dA.*:A6Y?`?B@*&Y$Z;>!B:V>dc5,1^LX%r5:7&lqlPqtO$p)%Ym3%0:BUM/AU$NnWc9Ogt1?e3V[EWaU%Zj2c=o71F6:YaUi<SMZY)-@dBZY'CeqabZ(BPr$545KU5)s?u1_+VW4S;Yi-;uOf,7-JP5]g/Ll->1HFp\=#[o<[LQksY*bf!9,C%:RVG,,_MdmB$_GBK0;DVc9f8cT.Xcp5',$Fp`anPigAr@$m%3hS7Fh;KY]39P&u[o-Z>M3k?QV$L$#t1_nSd9Ec;]qY@7tOK=i#0%fpgH^k^Em-Da-&\e(rs3NGYuUk!q_gr;BtlN7[2a'<!\\P&-?<2E2%QVCd?Q(AkZ^\KT<7n<gNj/`Y-`8$KdA/I/[16j`bOQC3dD%F]N;XdJA[:JLXmNg?gKVP"b8PTDbWJ\Q,q1@GE,I<`8Xs%3rQT0SrBZ9H,r"Y(oT[AL18?d[%YoXYEW<=(e?ib6*)o>+61pjRHBf%]"mhr]5CbaGo>`6>tgNVQ$I,uan#)Z"JmtSgA24?+D$!+?Cj4Tq'104LN[I9j#k&4i<aL(cF_Q0<7sG_7c+sS?VEPfGmf46]^VMH%9p3^IK@FdgCe6@NN1%p=B"f#N$]5h:%)H@bg;#@+?T[J)Z_)F"5kHSXWCnkOYa]fEQaUSZJLW]qf#9485&@Uto$gpQ2<SB7S\;GX%Y(a2pnr<u&pU#FWGo%A=RLqXM<LIP7R[bqq''2f!8?lS"(&cF6\Jo.PCM,<tp>dpb@^IJ:*4<6"P1)"$AsQ*/8BUU<7h;-DOj)RS%*RWT'B;Sh:EfQF1N\oeW\&DmAY_D9jX_66(,fj,'*V54<r<]3*gLGbsPE]+7,DgnSqOEGDiAi0?`rIRWDWmnR`Bc&Jod_&hJ6ccW%%OKSOA<bBJ;+/D*-$HUpbUUNU.O$+NZca4a2G%nc.':7rj-2`7kTVeKTeNhCl)Z*b169i5Xhtq;V@a]2L2lE8N6aGDaI)c"0Jr7l%6^&`M7]/><VkH,1aB6)N$)O>4G!O])Y1>@+Ih@f/)/-Gj)4)#RfU]CY:!O>f(doB^ZSYO;;\GL`c<(j'XR&^23&-_3eQq5]T&.lG%PA'A'kg*L6[gD?`L8LK22*9:QA8#\l;uSUZ?Y3;.7i-!ja7.I[qeSR1]K.E1Vd/q@F^(JDT:sJ!Mm/\G"!Xc+3jTBrQBRj[eH<kt%?JRdpPkiO!AB?42*,Ih:4s*Pkp'*N%DV+]'gV&*\Bg/$rO6n>;%`^319*0=!&*N_@l;m_"MOgioLtcrLC\_p-DZnln5+MF_W*SQ'%WGXIH9OcaN4ri^i[>_V$kJJ1_bKf_</:B7:D&j<^fkc;d1gd=pbs7<87,h8V40^B.S;CK4-1O(M^Y:*K?9&=;5Mb1d+MFkK%,Q5a%(\OPET'`d;GfpumBA4DQdYfB(9)a``P@gR'cZb[`Dqu:U7jjl;[dm6%Rronba[gOsL+j3DAOMZjAU\hV!_-JOlQsSPO-tl6nb("D%3iT)9%eSWO/JiX@hoXW'EBgo#QEg*hEBbD#U!Y?EqUo0`;(j83U$:==9TN>OcEsbX[X/rso#Ka,NG*]*>mq++fp^@T%^f_7lGG50%;I=osR#q`Hm4KXVok,WiWUtXeg\;B+cO(Q_Z=ucXo^`I(Bp^PcPKrV.)p4R%B%rB1f0F,topOr\JUgk81tC8&,PA#TU``!>@[Qf@%9SCmD[d%D5D,9d@VS]<50de>p["EIj$>9)ckhW&Oa\jQ6_u23*Bp/nu>JG3b<&i?N&FD:hcK=L'4%b2On*@;7%36=@q1r$g[72%d%^C_OKeS,La3-ca]\NTYnZPTWMMX;mDN3_&/?=ULU%F\Ws?S^tYF29CH4WfMAg;:*S\q%*a`#,%bhQ):iAfXLp*$Lr+[QZbq7Y%Y`%X`9*^XLUrns*XY'$dY[H7OG^jeQe^*r&rk0h\Lrg4r6A3-lhm))hlaKj#0(!#]fF:>_eX%I-L1/e7H9?qZX8BiGbtMSp\;E!1(,W%Q/6R.U7tA*41Kd?X2A#-'X3d3roM6Qg$R02_[bMI8#s\696R'3(FDDX"*CO9S(Vq(2ApZoef6*L<ne<:\l?;FbJdB8a60p&G,rY$%'i8c()89ih#-,Ej%UG,U1<Zn[q(4Agp.MND.8[$D4g++$Wpf!>`%DE>B$"pbX(8\,c5^NnqV^&d5!I<Ci1aceoYuKqQdpF':j%L5%<@m!l['P(7?W\G#'/T/ZJTTC=4#TlKcLdR5Ucnk%XFhRHam$+0/=eKWVjLqLb,5N@/KBBH2/dX"hY,$mhLYp:`r4USU4V3:s.-:D%=SC3u8'B,O-Kb&)RCl/Im*(`?C/<^K4K6`jQU.]kbF@QL.#I]>XktY?BllprPFU%M3Jt\U^%?-iCe-S7><eQS2X_70T'N_mb&$J7%Zu$LpP=st1a(KbfS)%X#NlL8CXoYFLW)ErqN&W,ph2uElnhRV"?bXp-=/u_m7#u8AflYuh@@UlW)>O;&;7Q#!kqka@F6W&J&$pO>%SP`'W]OT$Ab.l#pdq^=q9=L,/8)%lsf?U_ebbE\#c)*9X8@$&N66'Ud=o+CFbGI)LV_QtRh("o>.$r5$BB7[tF@L6cmJAJZO\KJW%1U>JG3_/YLg,b]uDQM!W1YNT"/t:."0lhP_SP<aMP-S<*X)'hl>e7<^F10Ak1R^O*??V]1B@I[LiSA''SWPqBQ8>gh2Vg#8[UD(b%28sa(:$3qJB'X7ok;cStACDE!T"<_B*G!V:.3.`g$+n9U1YOEH4LX!\3ct[*/tKQIqV,gIUNncP)>S\=SMERTer';"o%RtA,@[%q%QF0.>SP_#1BdVH8Zg!DQUfcYh7O^Z=>6b`.N"kFNMg+%oI2`j;3^HG7&)5QY8\\#JEhG#6f#;OpX0]5eG'./_d;="1eqGn@g"pPG%Al9UG1qa^NcEM9-!ehqP@WN3b7WL&`W\[)ckbPlq;N=g#/P>lg*G5j5!2h4o*i:_&@mR#a'BrfGjO/?B#(+\VF7#,uE;F6"#\N:%%l7]aG<R.'0RQKR$0MY>_Vq9_7*(5b3\%_!bgluGmEL4""3f=(Q:<t;+GKl\A`G'>>h:C35D&-"Hm59)W&]M/9mP`6gb-,/nVgfAi%iC.s[D]Z0]G<sbbm([qoeZ??g4H%\L[A2eaqog7N#6pOeD4Pl_I29`^LdOu,4Q].K*1sXAmc$,%k^#:RZbP4X.eXa7k(bpdAu-Zf%Cm4ds9eoZed,pj7I`%It!sE`,H9Mq*BbrhBG=.ecpRlW9LuXm[57Q/qh.`h-/l+hl*1hnj3S7RY4$!XYTD@^.H7K-mU3doj_<a8M%B9OXfjCB(pkB@Q;lU@(IpY/qr<G1I_(3FKt]0<LNi!%(rQF:+rS\GmNFdBL3?84YVY]c`[3b'/#$s0Q:VPO.X"Y_Aa]'n1dLd9O[%?[mYGb(=g6Q-M^G./V-;FE`h7E^/C$Ota0de@BKZ]><ucW_6mtSa8"aN\26Uc[8Ci[e0anb$0b4g9&Bn36C?jbM^sbUA1)-i7LIj%RolrS76EU30hQ!OoaWX\]`Mu+%,N)\bS5hApkp*ZN:JKkXL?3"Fi3#fm]Eq4iQdQC^@_qZ9'2o=*I"!0O4jDfIrSED:@aRTGMI$i%.XbXOB%PK0ieBO]_jBH^mY3g$D`(%?<44.s^4Z;A#;utsf\16^k/+.T4m5#5[^G!VfZ4@VaaDl0@dWKBP26-7pKWi0S40b8cWm/m%[S<jB]qBT*CnFgfYVCV\gsrgT:3M`=o\^k,h'e+OA]*`M0PhkdO2$Wh);b7&raM9iPF.e[lt`#k@O>e_Au'g]G2(.9qOBV7O2#ek%%AiXC;4-'/&lWk3IJ7%BPpk&/g4@lPQ"F`(hXnLl@Wl,rC8)%@.>Nasc4%U<,`E1"/X1Y$p<ISHL>e?A0\"pC[qUk<md\Km*@E=:%TR@?`77NZ(>@bEWUSjKSA8qjXVLks1SIP2f**<*NOA1=j%dt22rH41l3EUZ#hQCm(T8YO1c*EqCCc"S,WG&7K2M*<QRJ$.Bq'ccY%:Qk?f:\gp*F6Vqtn6DJrZ5)g$4J.ORo(cOtMN2[7B%"QV)/1NH7[J5kYhdPn0BtZ>m6tG:k*Nh/Y*3uc.r"S5JuR%\=V>'=bN0%T%Nq]D_Bm>BCIo:#b2ei\a.c'6i2?&O%*]A/,QlbIHeMVPZ5m:5WRca1b(WkT%#-1NoM`lO>;C;.BmJBRUe)m\A>*XaghNar^n8W2j%@fhlV^piWtjhnd!!d/d=^glth6`MuV]eot><9nsTc%,L%TOb1SVVtfFRKG-J^6D@6X1>l>%2@q.^g=4h.Ysr-*e+k!4R'(U9%Qhf%r+dloY;Jg5`r'u-:0],]S:T(5.;'$S<[3#l`@=WQ0j<s<O%nWDAT7VHEqQ3,e+7'MC\(1bs/o,o,=CTB8O(cS\XXnPd8:bJ7[Ha=%(UcM2V4aVG=Ci8#FV%-EHhX%**LR^b3c/uGauV%iUSCg)=_X`\1pq6\Fi7))bt_u@T'[tCEb*W/-(Q]t7B3-=.4t*C!_95?jtFC#%:gP]uBk7Q.l[FlF[>mr4PSLq.CDX.lHdR0:dSUErlaOm5-s#-V^@chm#J3)P[+F^*A+.AW]XJL8>`mlM^Xme,a>/X5RV)Y=r=W:u%"6_RKbgpPqSXH+uEY9JC*?&WJ;uI/iXo4^]R%7uZ2RD,&O),^EhDc?WdV2PVWLM.=G(j6hB)](d,sW\df\&bpaI=>0#7/KGDd=LZ%LrpAicYg'k*1\C=aZG?s`,[g*3EUY.fQK8UG/g"$)GApPAVO11oK<EhXE!Y+@QJqPE@RV:Ip.8=R(r)L(!uY,QhC/1a\;6%n&%4s%LAQf*/Mk[61Z)>ZGrG*7p@@*8-t[h@O)qt$>uHX;-,j>jSZS^rCNk#QRg&$*3`P"%[WrX]di?0r[q_:QZ-A8S>,uSj/3p*nJ40#/%2@ImgLGHC^H(uoU@o^"0"))feeng(!^JRdV<ai<c5c6Vm(-,EmjOjB"4[U=EE>G4r*'c;%=i=ri<''?eiMCq:]TI'K9DQeLbM)?[%I+D/K?!YV9Eiq7-\<Kc6Q2e9cq/CHJ[l<5*^6F]&Mq&8]]==(9CjpIXhi?o2G5,P<q^[/;.A'I:!?kI$]pdX"G>@!(V7kDT\]&Bs%Hi<$l4i:M&2U:C;ft3r,F0D4hd(J,*[QWNe]:h-nf?Z5<:2_N[1*(?>mtPk)YFgIFarT:'-WA&>Z"]2]IsJ5iorWZqNrtSOU5m4+%IN)j=rVBhb/P##Cp!]I2q=VFMejHdT^N,NbrCdgV`=3s\]meN7E]HZ\h!+krSgKr9RW":JBQXoQbN&BARH;,2f$Z'Pj'1F,B>)Z+%]qjQCl_g1%K3S;'r<=b-]mf*[5qH--_c%'6os6^`]pjBIG*DN8GH[W]0=q&UIXSDlVAH9h='OMHB6p'Vmt"SQUi(.TTCmqrFAq%"%*q"dWqH9Ym1a^<+hbf],`N=U#][pNJlY!n,K<kc*E3GmfkO]J^R:W13HEWrLG(G%AT<'WRaEs"Uq.sPFDL\j^A(fc)?9]_Vd:db!%=826%r"]gLqtRVGHViVb[nSc9qHcAg03>PMm,YOUPC*80&%64_YeRs)ch`&2o"@.ihWlPc>T'0[:h:&PFg%F>*o"fMIV*XnDY;c+%I=/JY1n<CB\&HO4PS;k7\CWBIH)oglDf8amf?aFG5#Vp^RsY)bOtGnr+S%%,ENbu8H`:oUgFb#$WL9O"@CEf"ce?T?1@)E]f2&9P%@A:apmc-+IT&)<molp0,)>)qXDY-Zkos=)*r61GB]md^kL*o!<gY_=0IB+HAZAX).:+U>V_g6,(p\J#7F@*=KMgPE(h0),imI0_3%nT#tA^V&1e[smFNp\L<A5k.mih4,P)-s>?jVg[=tn*fqU2@Nl_h;%=/SIfSD,6-e35;Q3#>Q$,?Ymp-oZT\mN7hiGFf5G^Lju<&2%RE["fe^%ZIXmNfN%aJ;Hi*JY6`BfO"/'C:3(0RukC,$*\ah"^*i^4%=&f\j6*X]f`0!oE)LM:i!?CSC%dpoZ0NAcN6U_.t2=FGo@%.q\TD&=b'iV*H?V_/B2X,*W\JkBla&p;0\q7>.cLLJm`t@QnE?ftBY#IN8lEP"4lV76DOPJr?h=k]GAG<dG&qE;FVM]YA[!o^??a%2pqT%G:n0nGW5[Eo*d"+R^`#K$Zh<]:QllDC]2KHj798)CC%f=CZX`n6-lR'NN_ZakcPo==PYpZIUBFL&,O&5inmhtH8,"P$U/3h%F&0^:S^6!,^&;Y`)YHp^?Rc"rX`G!e'7q%7PFoa4NTtg:L&(X'=l0V"PqViugsmg?lGPGWM)men9",<WWdHM6Urlc*?h=*O1d#,n%STkt-ct+.*Hr%tn4S^E1dtu6a1aRK.km]%A]]YdU7K<:9MI,ra'p:O035>)rYq/#(ZF*RkS*h\+5a$Hs]t'aS*O.;t>TRg%7)p3Q%GDAESb_3U`Hap-]Q*KUE])%4&#*(g,ots14Pk3BDj`Bl\j")2aN\7i7S/_mboND[p[A.YJMdQkS,bB_ak(C,k9&R@5V<)Hp27E'j%nbM[5e;T.,#r1;*;hh0N54Z9\12V;Tnn?1aM@[7iqb2)L-tFi5k:.muDbBN$=Nl0L;)t.iS*aI1e>.8u)BL>kHO:OF=Q<\PPOa>:%IIdUM+j\<m.JYH+B6<Z,H(5t`U,8=/8[1)L&ZFpR0[)@(h%1<<rIiQ:Iu$ifK[J8Q@&Bhhp@N5eK"I:)qgfQq6<#c_oAcH.Z-3p(%90=*1"X))L5O^HB-9pB']b(1_*ZcDQPa_T<.eWV/l"<o%]fG"V-&<0j6e(0aXpCsVnt*;5,?KTK<HiOdY)'#,qWUedJl5U%&'qtc%MG$/T.:'+D[r<3k.kcOTk2l>.7rBAK=3QgA.Z90W6N!!5#tnd>_UT3E>r&5Ep:I4KF`8A>9jAaN4epDO3j-B+ni6hbnY,hgXs9a7%%[UhT:C=inT'fR\n5$=DcLVF'h%V@8<!l)J)FG9TDaV%#nT2gT6F#8NJO9/C',36;G`!Z\s.2eZpP3M2P`mi,LT0lOF^?G;)O7\k%DS)`E\C/cW`GtB""nTU%gr1nPr*.cC,g65CfFp:@l%R6>VmSt%qXF!J0H/tYFb^S9*`PhN'Img-'0ZskB*ust1_p(XLFI>Ji^=Uj%UH:sC[X*5>@a>beXle=ULfQE6\pJbc;(2KJ4r"6ogg+]p!+N.j9JotP@:?>n5?AAg14,(9KC5aA&e5gE_=cl901M<=A.r9cNue!A%k,_@8Nr`]3,brLF^+ZGKE'FsUm+7;+Po_S-aqn3:7#a^Ld,ZX7,8OD@nQhVdij$/F0V/q/09oA<GlLl3jF;krmZCUNn-R,D3j944%&K)ib-tlV;RY3%='K-cg.-$Fh;=u(\bEF$]K"uC,\mZq[I$2=W`[<70P>Xe\M`5bAEgRg5:J,_BQDY)Qa&<>6>g[SUGNm$d0fR8>%!$3<2#Da\VhN-L2UNNaUf*A`aQBKN>_)EeJdu@g<>c#miNAZ>kjg[pQ*Sd%(hmR%;lAEb])ZBp.!+hq'5<Scp<pf_o/EM^'Z"oAk%R<-p4L!02<:ZrP,2bR]:ghDqoOhh]XW[f+"4F9TgBh@1cHhO1UdEq$Fa2tCdZMXjY%pm7?cLGRNnc=C8.E%j-Z)mU3^h&=2_u1^H%_77^&>n,nn6YXY<d`T]Ra?0T/GYpu>5T!.FE`KBe,"D#g"WeoW3@HEsEjGU)Z?u:6]4Z50M%JK5'i3P"H_3,JjML(Ql/`M*8n4#R%n61YT'75%+Cb"fma&9nr),Q&f%7p@3$^-7PNqKHrUI?g]ZcuS0A^7`DDmfR8/gTNUY:>/8^%jt"p$b,t_LX]DQmQT](_,uS5fJSQ%,Gl-*?cfGi&:Ug7j,*8g$\:kc9`J:;rNt?GkNYCcJa*XM129Pc>;1\rgc&ns".g;:/<hd:;nKk"e/AO,mqmeFS@S;&hXhNRWJRcd%7%KR0;>*`9:)Q3RV3L#CN8Go_/Ziu6,e28S!*BX[Kgo8N2:8iX#-[US(V/@kXPi[5rPDEOrK&\P-JI^?$'IGk=Io&*9!lT2c).k>%eYf5fF-47r3Z,&K[.)lNL__%8V9uX?.NQJmd5ICgr:\r6`t0_LZrSB,TACZs+^,205Ee:,!%VLJB.YHRnTgI+8k].$V(A"lq(Dm`%bnJs;<+,W0*iUV0<)p=9o4b0J+',MX\`^S'WT#J/<3V.WITEIF0?2Y?6(AALYYqKu>ra!)<N%%,cQYoT#=&8qYufq?V;ln+'fRr^%bqM+8HgnA5+[*G"W/INdkgW8XL^4!ap2X7cU$tPR#7@[c#YhIrLuUi&i9(Z#hU2*)1-*bY$S,HA5l?8p"&t3Q`Ju.H/j@f"_L+mN%5%*B\kAVTu3^-10-f2J`EA@0h>@14blrkE@1Hn7Ce-&$YP2B]W\5UM;rCA%Pj8A(sCEZP-A\>_2_HAh2-Sk\M,;!p+/Yb)4rM/M+%A?`OP1'q-!7Vc@>^G1E/"#ToB];R+Zm73%Of?X<`%3-I!bI6;r'B'ANb%SE+ic!K5<i/W6MMVXe4r,4Bmsmr<C]E0cm,Xhh#Xf/I%-\D7/7%Mp5Wf8M%XdJ2dVhrj>GJqBp5!]&)ep\hjb#Qma,KWq49\p<?7rei(E9MaG7b+R2U?2G1HnjD1"E4*9oUOtQ<'c;P?Vt>=%q\:$Eb^*]S`4d.S;$O#T5FZ)4,hB5$(9)PjH:iSG'E5_/rto@[m-4I"-V77bO6hK,_u`'J-:(:NXF02(J;WZ"M:%p]s.$TDSu:@k%6=AWsS(4Gr^R>]0K8D\N9"C\L1Rc%IFJks\YBSauf<R*tXN%rqd[bJMZ]4n9=X%29Ff*ud)i$oC+2#gr!KjiZ9:FC"m,X$<;WkU-%VbeF8%W9^s_C,"uU6"I4fh*/Oo5;?k%A!uhpH1UM\ek5>DP3UJ@egRN?5JYK>N8ha!XFG94LZdE05;#OlIfK2ff7$LG^S!nrd_m%%YCLqu`06e0C%1F7pMn;3phJqJ"@"tV_N^=HH<q?\e2df0<jJ;#Z[jpl'"/U$/$70#*qr"qn&;ue`FEI4S-V"H!k2<M0>s+GHQdm9%YSV%tX/^@%/6bCB<u1HRN!Rs<AeGqTQ)]4576t+4j&b5WHdbc1ag5em*?#\r<gFq,`[\8b<d`sK;n^-]Y?o/F,?plci`VH+.NaKY%Vc%h;-'E"\4c/u693Bg/91fr@J81WA!AS-lbCihFQ1qY/,#r:saOPW,Wi2m48tE3E"\4-&Q`s.[[8NuUETN@h'YFMKmm+4DCJdr'%Q*2U3@tN^O;SHZ118EEe^`%GD_?YFL7o_b]9CCY/&t4+u6C'-?q@P:Vq@/-`.2kC]kiX2T(*mNZN"!^U)"C7mV)(5t61(EHF;;Vg%fNa#&UjDM/chnS\]#p!F#76[&afc4"S`r(,Q-fNZ9iUB'jk3(`GEgN#GF)(eZZep=O8Kf$SRl`GP6Z*$A9'>SG;3:NGoXm+1KJ+k%&,#k/CE_6F7Fq)(9n]TN`Rf^6Hu&-,PB@;KKVX1N#-\l7fa8')496rQTBWgHXMd;:.e]#EDCYA:g$KKfKr[b_H[ES+XG1iS4]6F1%]tht1*4ak;``.p=OV"fHCDRX5\Iskb!+?Ib<-V#Si#(u$,mKAOMCfJ,"TpV+b'Er!N9!*sa>n^G2cC!s"C[9`LTo;o!_Qn6,6Xk=%#hhLlPh/+`NgFu>C4,LeCfnfN5mE9Y`F-r@4JE)s9h"c>GSoA,]Q[^:b&jQt7#JMn(?8'VHr#b_79++KGTJ(B:sqdsV-$S)Up=7[%O,,"`/Kc[Ad]-b8nK]6gFtcSBi5/o&`=X=6;AjV-`umFLT?lrKd@'m>!"ZF*X#gRrMRWcQ!'KtRnqX,3<@#^74L)IgeGfHhBitdS%9`qsde7-0lngGMT^&<1TI@qCC5!IQ(EYehMC-N7_9S>d\$l*,J@J2,BJrKRn#fR\'DC@,)n]1tbHWr=0]GS1AP(D=lC+(b3GFQ5"%8k;a7G@6u#_^mb]E\W\$*loO`Q$%$#PiCct_4ddR"Hs#(SCHX,atL[q]GWNoWa/A"(rF-?%lst+@3ZZ)h1C<8hUUR.+I5%mKJ0k6%<A71<I5@MPC#C1M1*CQT>TVXV&5VrA0t.[mM_q3QUp#2ko4liBd,hOP_B+Jo!utPe9.[s7%YL:A&LmFc@8J:m82H]X+`iP*U6Hh-%BVrMaLf$taDsuu.Z6@r77n81?0a]>QkG%;rp<2"!VI_TW6>FB7l;FE[Hj_R`<.H8SZQPiU+T%T:rr:`bs'aZoBY+3O[s(8n_/LLI%?tU;M#ID1'*Xt&NPq?9^D"unoWN0k"U?u7P9jOX9lQ'BmMl!%:S/!:nM^:&"Ysi.L2?>ObT20NU+]llX7@1^o2DHIe"1c+gP91L=%`K=:fZ&)J3g8AXQ'XQ$?Rj_!VCsCHsfP--O*gbMN4$itE:bmk""acUdSf=4j"kVkA.RffE%odNrY3*=*0(pD`dQn2uC.Ja[,;G,o%875EN7]fO.(l;;:;!s)`&L*='J36"[;/=;lU$;TI\A5^E!MX1GdT$O->TOE?1j[?q$oNi"F1qQ\;JZ6]S%E>mq2^.-cmLKVBdVeN%ic4`*8#<W%b?)bs$dID457KPPZe;:4HM+mc?jAN`g%hp-kUZtf8Se<l4,Jh905>]D"aABh*rK*P[/P$em/pUm-9McTr?u"&"T4`A%b+47d+9/]6Q&]?"kr=S/A5kKUE&3_ZY.tD6\8kFj(./la@Kc@R_2i[4ndS$;\mt.9pWFN;m\33i>V*c]BRrmf_^lO\,cCk/*^a?u%,&dUE$J@s$#(p>%W9%_''eth1,p].>JYGP+<RcRikt"L(e!bGZKOs0F.8')L2bOO@36.3MiAWkg-R)69`^TD'bl^9`bsqnf_[uVL%Q%0@o7>XQo943RU66X4p'P[ldEARbd1_#(pnJEOp$4'e'-+tI4W<a`e&8$#86761#&H4dF,Y1cP)FG)U@:Crd<J2EQ70K'Q2=4qS%5nQHb&J0(pXOnE00mKX;R=oJ&Kg8H@i#T/@7"f%-)_-Mlo/(Ad8B50"/<:27#Y4Jq@6DO9(dgL,@AI>cisA1233e:d--cjdG!JqK%c>]R<2A$TMLlTNtkPti+cN]/$_5)k.k#e8a4HSJL9Eg<XR&UE]_6^B`IT.cW@2&cP'J@6V4A@d]5r41<.%8*XTHaLg`'o>hEVq'c%EtBS?a`7G1(/YL.8".:n-5DYg'Nmk=a$hDBi'Bl3=:>e%LH19Lgb1B':`ZE+7#m?3(%Du4UkrLn/1uh-'W2SJ]TL^'>bA17*>2nK%AH3;tE<)U9PfC3e_=7rm?Q)QL$c3RP7=O9*_Oq0*#fB[X!M1iu&'o<cG/-1eN"Hr"@cOtS@CZN/30$`&kg:4^TjnBp<ER.m<.YoS%<+;L$E"RdM)N'1N"%B:&@JEquKZ_@*'EaF"_b#fU@"GQ_]*'EN%*1a])?h4Da&GJJ9Rq?r97tY&a?t$C%+:fH1ds*h0\uM$\Ic8&%+`O5_N*ujOf9c[a-cKK8VZ6]C&;4QA^d'QlkQFA8@>MJq6&>+e6?S`TWJUuG=Fm=!m:&WBcpYrb</`+LE@S,[lFbOB,NbZT"\_-M%^naJH!d_kf!DGus4e,@2QY,8/)%4be,#NW[KuG5k]JpjC2!ku4!7UNJ.KY:M`fC0YDhO"b_A'jE"s%\<Oi3n/0cOm8_6a2I;%\Eu%"`RiP6kt6mYp)=kL;o)s#(e%,D'KeHE1t()913$@'D;QL;iE[_R\p`'/eSt5)lQ$<XKXE#,aB`'U=Or@+bh9CPsH'/bcD():(*kR%'*LcUM@mdk1*@E;'5G$2/s-&E+I^<r`q['"//sAP'LQ82YlqFnfGuP?0sQh;#ZQ]@':L+/_C&Gl<Rei0O#(cAdgcX/n071>EMVHU%+qTm(W!67U8;/aB%.[X@Pt@1>;I"3D2A/F.EPO:_VdiUAe';-e6&`dM(@iSs+>9Z)R3)`ASru&e!DCJ`65<!Hb,OJ2L(i_^#76iB%0Rc2<MKbQpI0__;W-:_=hOl74:.UJ'j2em=*!du\oBOU\KWGa:!p)]?M(?3n%]s*d8ARhgBSp1hjV&K2;Q,\GK,#XTE$f-=FNf%S%n5BD0Ko0P51(kul"pHsD*;Cs,bg?`'^#3p%oQZKj$*<VU=Cq`*;&,cp.F9nRE@L9_%H%C](ur^$!b*KiM-C*d&0qU(]SKfT%L]DM%8;M4MF`e:8.8BDmp/-MhEO7RCBp1=9Nrm'q<sVG/;OD9j,MGC?$=G5bck)k&fh`rug^GdO0sNME)7,-M"\o\8pdPGqWtsnpc![59%S/agO)jDN`/;4eDpo%;n$qus@UG>F+<$KG:fSBnuH!lTS@Os+!EX^Hl,-^g[Pr+&NF_q_4borVPR&%XX;6[VtXmr%r"=E).fnqmZ%C`eX2aT4%#`0?A;E=$/S0P[Pd,13haO",ikeZgja9HXZ_/Wkk)@!9AD:)Ztb:n@lN860=g["/6bnBStk/=&OW#=ZH#l6:5HEJ]Ih%G$rC1Ph7T`8Q:RGZjK(=V(P/R%8UcnM=QFJ_m;e-0-S[d<,(.ghF&Cs_N*e]8L)UaTfGJ59-u88@tjG/RW^N,.4#>2&>Na2Lnd@m%KOofQkD"g><+Rpl-<[g@\=b$P)?a*gW(7P[(en*81]o81[;c[.6GO,iLko5r7@"Q-6!RS0E"NsM+/?4138dV.e@hM+)-iEa-"1?*%o#1\7.9]o-&TctV;/;*$7pRAi9(FAN_h/#N_b./1/!To5_F[cbnet@;=;iXqbo6qYCqIOIR(150P+rIsL_39`nr/*HE?=_=;%Ybg%#ppgY=Xms=MEs\H3hjQU[2paB,pX99(NhE.NaoH`5fAADfT#u\L5QZa,6:'pS8^CK<0_Z_3*WcI).L</]T.`^M;/u(Ko!5@:l(W1%4PdB[CPJje;+GD#-=G=;.l)R*!d-QDKs?<LEKW>E!)4WTf?/mS+Y@o6$k*=4l3<]8=DWl>T7B*<JtS@DJ.`u8P[oi<<ZiFb,<glO%<a?ts*p?2+:f63Y`3t8;&R$O.g8uekedO<N'?HL#`?H:25aWi#8PHBh9[Ert(7/L;XIqjfZ^n0:f^je@BaNu%hnHh,<L4rPmMG(O%S/4IMGfuBHXI6![R5$O7j*C.PH#(@,BK,A.12:5Rs5(:e>Vbm),pNPJ[BmTiCLfi7La]`of5rQ2H62Ij7,D]^,I.FR`9'RWmP#tp%^F.7VFPgF?k&G6QmAJZHn5Pbb3O]"&J%$-\-&L(?e'%/c!i6siAR->;mD/Zm[2RuW/[`<EcuF:^m*=H$BBS@m5P<FL4F[#?DqO?t%d\I5^^GGsUo`Xe0lfTb$dAr(VIXc\A['=A#b\oZ2YAXJC"7%_j^&V?FYcdZ_9*WtSA:@/`qH+Dc9g.dhDF6?Q*0A]$Sq5onGRC*&%f<dG>C*Ue;]QECjpE>T4?Lp:*"OUQkq^-e!WU?+HaRQBX*S'JE!IQ8^`mjbZq"n@HUN#1DAQS_V#7.)TNAfP=%]@ED/%9]@d\kR#%!A%SHY6UZ:$HJf!H*B5IeOR\L@fYoUk1&3Sh$u7f\6e8RF+EdGL1]qiMAem@WR;=.U/iDcQI</+EbSEY_PH..b[$kmo%>qQf;BW*%:2@[ge&.=J7]a.6UUEbX.X08::.Ve;[I-\oSbabBbuuaiXDTV1/MO>sdt:fp&eR]_A)7]%V5WAX`-'=TM5j_C%;b<&VQ,IpDcKT0%^Mo'[Cb(,(CH'9j2+W[^k"*uY3Qs\Q9=m3YU592V4l>5m5JE&K.[grI72+%ZTZt[o72'U4T6VrUkjPs-\IB?QeGU:Dcc")^@_4aJ%o5?LMa=->;;Df+d8KelB9RpnWBnr[#&t26HA*TIecV\d'Ml$g)jK<6dfF+P^:k.O3qMZo#N.#E'm:Z_ZA,69"9L/?Bl9eK=Z^/!\%;q7pE";;pD/G75;\=*_?Bf>65<TW6DrRZ/N9[*]>;n-k^4rcDoE=0WpNVXmFi4<Cd'KtrQ]KSbj4[?/_7SrbOXR.m),#NW6YJ/9f%IIOAV4i#JU>Q*j@Nd<%FHW5?CkaC5F,1oT8,bucZka>k[#@Y2/H4.0QalP-PWI1)/;pVOf.7//,"ctdpbb[gc<U\Re`/O84"m,`_%K5MNgJM7st6o3eS02;7+PX'E1kLs:I/B;S5=P"#O"d"$c&r<MYKKRt3[Gqu*/=;$qQ$$VP(@>#&4@m%eP:Y=?nEAu6^U5RbS?t9e%dCu;3Zh5(omN=>Wcnk!h\MJ@#%X0>XWcjpW*ul^Mi3?E"7ZTdb"r92"Q9(;G4tNBLOc&2PUPSifRCS6Db'C*1OCbgh:E\fb\kPC9%K[JU&r2c;2nE*"95*01cfWctc5EO8G;ja5]KJsgF)^Se_BXa\C\(<,?#Tf_,-fGo[%s-p4Hbo-3cP,qk4Bdo3qA'ntJjR[!6WI>+%q=j$q;f1&qqducVI(7iH<c+a^`1&P^J<i;])62EQP!&,BW!J\m_p&[iMqc8hWX:+n[W?20*5$s"oPeX9?Fa[,GiBhu4!7-l@Jjib%85RhDDl0't&l]H`Jgu;J<7M1klD8\S#qET\%l;.gTY_E/\C:qhE)rR1,J)Y.?<#aCcL7OY>UNpZ%7b^Od(ICj:H^8CT<'nKGAWHj%qBfT/n'YNIG?&XNfghlPS=ZbQZDN)XgQS<&'VWrEGjEtZY.U,s*TogB*T\c,fj(Q+T_9QGeSg"6<`JkQCYl(88,L@>e@m3Z\I'?U%1?Qttc+XBh-rC"Y(*e!eWMnhaP9YZlJEXASb-/Y/2G--i$I;@*pW+31;)/juEi(%2qiZPLB9m1Do+V4([0Z`X'<"#^m$WbQJ5p&1%D"s8jd7YjDDO\$M6ugrm*_g6plun_d&#C_*oP6o2:8bQK4d5Nn7n@?O!,\/KJj(>nTm;NfYt\.bd.H9,,HXJ)!dj5H.>&)^kM;/A%"[56N2=_H3GRE=0:BAg!I2ac2bKLdn'EQoM70NA+lu5*QT37%4DHIsW>2eaKLN11Hgh-WE&$YD[[3'l$ol7XK:'<4<l4Iq9_c>02%`&G3Hi"&%;p1P;oSKO'`+P+:>/AiHNU)bj7QZdUZVG?sGSXJ=4j5+Z@lCHU!nBM0`]JFUL,n#,6ja?>j4d>_GDlM(n_eOtSZB4eA%E6R,4;sj[6-V.9!.)tSpW?,Df\7"N%)$.SSf(GS33SM:WfQ<=6@qMln<:SW.)h!:V@q*A41Y5t[L;Q/1!SYQ3#2Re"b1$[DM%5G$%&Obu6RG5O3@@"Kef;f_^R[O'']"X(TMgK(0XLVsJOLRE)BBJf'gKUpgCZnL"C\OS^=J@%2IaeWq[,/YPbW5(27r7k*Q,JI0FQW;O%i,,XAq"PMYV5cu]US1bMQlX+!_C$m\Ap$`:3j<f<6>FaN]O:[p_&@n.HW#9)fs<F\7!0JN?<dG%U4reeNQnTl$E[5FY06a%M80YI%Ske)DYAU\Ie#.BCSEQ`eU4nmsQjBko?KOGK.!U4YG*nFZ=+<45(;\Qo&6OIA_H&t0QJ+m+/[/DJXIaESdOmd/YQD*6<WlE1!E(Q%%,Z1?"bQNeq/9Hp35.2u995K_ZBT-t&XbI[lFN?!u9nV9%NP:i;h..*Z1/n#^AQFFJ9s#LQ#@F;`L6PgMT!E51Ls0Umh5hpD/3oPJ%86'7jaCSBP9rd-Rk/(2&`8qW0d["%</9<B`)Cq\!R9[boEpW)?feSJ,Ub'+bXY=T=ZiKb]U3uh6[,^.hS7Vl7(T,a+m2bf86qk*B%@*(#W#Sf<#>(n?8)N+i=?\?ndk7#]U%Qt'aCtHp_#+gReWPd9T2<17!7=`R7;D/*R'0p>-bW-#Q.mg^u=3I?GDXi:.Y0lfY?ncEb%oR]g6E$M*Q*QC^l^kP$49t*SPGWX8B7EGS%&PV[GZj;$^0RQ'E=eB/p6qI.i&-tPrH&j?IYkD6b@DRYmH\9^.-e/2JhZq[sW#\jT%#q=EOQFU,?5rC4B^o#+""@23tTc-rF&T+cn.*ZkHe.JSs![^kK!4?3nC1o27aQTK>Q7OqtMGXDV2+4rDWWCHt02r%/R1?4tOO3np%2/n/q$e5eSFV@27D)M7DX=mNT^tK=!!M/O:;@OV^GYs2LdSpaW!ROgkeNbCp:^pNkP[:9mK&`LB!9J5t%=i%SW<OmUM=`a))R(%5%If]rX,;<$?W<UZ9F\iOLbp>=ZWhIgIog1Mm3,&.S2%Vh8e:9O/5jWfj)GY8O>!Akh5Ui.B?QTcHH$_6RP[:9mbX/96eUYcBje*M9%jA\JLQ"g:Ub<\!nhHPE%)Xu=D&#oZDbO(r@)L[Jr<!1.,g-IS-)Neb?><UcKf^/R0)?@15O-+m[Usk[aH6d/]UkPI?>Gf]^^XOeu%3J,/O(L-50C9X-&!EsEUcc&W23kQP[Ch/O(,HJhs;/CrZZ=\ZpoFja9@p/rD`A]$_dejPj8$t`]_cd%WmTC5H]#sYKd\mph9CX]#%*3NKS9>V;>6L/Rojr,@)\TZ3FXcIXF.N-eM+cgCF?l566iY2#GY[pr`k0lWW7&HhEPgFYBC<b\&*NE>V+TY(Yi0_ZN(p^_0P;1M:%C.=2i6Q_=b0fN1'ld"a,2K_!Eq#^(E!c"&e3LeW]&Cu47ft(C)o=Kic"3@3(Ws^=DGpPJf73^\0688*!-_XfjFT!>m;ZXd^pF5Rd%>8Bg<3bo4)Kk-]*qZ1*:2'7*ch%s<)5g"7Vl<TLn[4(!^mUe1,p^<H]<<!)+#.oVs:)JF-L^;%:N>I[gPRY;U(::O//aH"M&DbH$%?qL,"ElB^='?YksU0B:*1!RmSOA*:i,j]-nUGLhZ]dFtu<FoflIFtZN$*74c/a;KWbPfEeU\,bLgORP%M65nN8d/C;J<kmPm\4d)%+FMJucMfQI4n29FMf6F'%'W^S*hrbg`pJ)\ah]]kg>%-UN,Dqrok:hCQ0/%D="HV^VaV#p_F)\poiWS<LeEk(i?X((miU?:-I!CI%=Hp0*mGuaW^>'`M\uG!X*5O*@[T^ObhNBA`k5<r=B%FZFF+@;hmd(>Em;PCM5"Zk+:eTq6;]]f_AAfLJ!59*t4)#.=0;(G>#pFO]%eqmL!W>J:,(@[<mF`gX(!o1c*E$a-j$4G.!,&Z))lS^Y.TsU<1/8CL7#pLug:;d=_mP[=RqNZlS$u<rM-K5rWVj<+T4`k&*:^;%[%rH19ObjI>7IH7^TbdV*u+r"?M707q/MgO(VIPA$!Eg^_rNo4cb(V[]8_Z4+^Z'2;L!6O`-#/43O0F_X\:)q[7_b7a.p#Mq.3c<lO%Z6.]N2h>.6j+nLoLIB_JECm*Tk:[i6ASVnSpoZun]54UW*V)-_qT,iD.#CAGNuE6Lq;:_XYaBo09]3$IGqmiXetWdO_q6Oje"%hI%fc]?T0W_.f!g@d9SqO4l`si5dqf!r8,IHfrk)UFj`(s`=LR6;L1s)"(7J9gC^D+O]f2QNNQ+'s2Vga[PQX<PC!M7P:mS"u4<$^\!%^pL1E`[q8OV>00ZY/e[%peJ&n7@2!:JA0:jM<1+QY&pZm5VhM6gimQ>g#"'F]82"WTdo%9O)D0Xj;^BrH,WCRG-(IMf/^32)2!8)%/H6VbTB7/fLr?s6Wln(i<i0_@.1H";n-_it+(Pp&B+\<KiK[s52Q0J<Gj2>M$Ji/U\je!AcQEYgG*feJ_^1Y,>'0CZ?mG>Vr^KWD%moZB%.0_UH!KI!-&.Fu8NQC)WqY<8Bj50ARRlB2+"I$f::n@^9i&eQ-3n*%4ZFZF(pj$>T-Ml6+YQ3A$l5*LI_nm8bKgj@k@,=sM%G).4.X.F<ec0MJ*'gN4)[/136]ipJbboFWD?<8.NgmffOA,V!q_(W=$,37?U!:@?!e:k_XB`\@Roj#253oYCR>roKuHHm_QpGKnW%SfnLtEP:0+BX`r'@M591)3C"cqmq)UIClX9=lu7Il\_@H5\=-TR>`!%4iC[h*3U\,hb`:tmIi[+I76\p=21p[](0lKQ#"'PWhHAZ%bpURT[&$0o*Fnpn`'0<2R../W$qGa)K*^>CG#hP2Hc[=PU8cDNW0hr'eE2e\;q6OQ[i(R]\FehUihWO72?P]=a)[Xok./_:Q$'@e%AjEb+ciPd[5l%i21/2WjW#NN-PhEBOJThT`3`:Jl3;,E%o?lV2RB"gCBI>`/d#@S#>Yj#8jQ9e"2B$`S1icu\N@!$aqLAH;`Ef!6%`>ufmFC_3a;[0o]8CI/+nU$er'^K@d[dZ&(:E9eUXm6s=%p"sOM@NFi3`S;:,(^ju&KcK*6UV+9r]2]g&M)luR0+91Ae.*k&&[Z\%mubnO$A'<f7#DK$)!4YkGJ5<7/UM*+&<n216>).^h1ij9$cjYC,H(_kTQ/"C$+uJ%Ab8usDe-jT]:S@mY`#q;F`VJEZ6M;4PAd"a%"?>4$e%mDiGrOTB*>-'ajsL1u2"l+K;A"k[m&`j8nT!;,%t@\&&$H7(F?dK"58bX=RKh,dqKV<DZ,jnq4C_>DSp%^d@I6,HR];-B%?oG0OS-1[]3WiB`4_;W-'%0)Zc:pK=[^[!_-u=Y_"46FX;.TM/><o>FjNR&%;q5EGQYT0\dLKutc-i@UP?C^ZdroL^E2Ssg]m2!(%>_f@8$bGbA7TF'9\t<Ub'4,],$XXQIB&GSI0t+JG-Ln=[5<&\4*Tt\9;eDoL"DFhk)g#'a/m9oT+f\3Xk"QAd9V43q;e=l`erUd,%.CZg/Nuc2]p2RH,-EMnKLaE5"S2%5YX7(oSQ=sm2n"bibn9bFAA<8(/mV$0Q9"XIt;e3IcFCVpG$`;#;SKG0QREo0d%K*Eeh-YX*%q_/!ChkbE3;em&R>27^I.Eol(qSp*=b@Ht@6t*&G.8l2"Y12!A2[?9sf'&:-9.gsYR"S@C:_T.or5/um*9E;.,:(1["i"Q#oI?)7%9*TS#&69QX8s:9H)[)Fs=Ls@WE^20h+sihHEf5,8-0?XLQf4G="Iq<#PT9OUF(4))dmSJ=pJS^o1W&HlkfXsS"rkOtGEtg)3aHQY%nl1bX"fPH;k<`AGjD`,MV41.f<rn2H@(Z]:V."L37EUdad++pO<reA$2^dAA>A!oPr3EQ[KrY8j<0?A=_,=f&X*SbCCR$=gGA71j%()b6(`X_2WcA@,@:D<D!4K)dJMUo%>GMQq9")I.T?)FAS<f\`=[e!g\!_!V:`.RBo+VZthA=c;t[23'73o(gQ\kk8@\O6.?3``&:%dm]U_K<,"UAIkYi9B'U8]:+rT#/=:-!j)j]hHH9TK9oEj"kJe?N1NR`H)AV991:99Bm3)t@-ImKm4ONd1636[;1O``;l'WL#)gtm%6NsQfgi9P)q56[H4OH^8DQ$+K_P>)i2.3A'dNP[Q"=ts6JaBls,Z?(qkIV`AMN(T3,>7&>!!h+^kc[d_+"L`q1"f'%B.[m&XE;c3%^T,I=2,510]3*sk8H?+B;ZEc&K\^ORk5]4+/FNaKq!R++?_@2b>5el.3OQrdn&adi!3WZ_i#Hu+5hjjiP.8$'3.e):2946+,5%t3%R+cG3J=33(SN,LAA_<1DFrsG94ft9!:YY%\k7jUBnXgC;opa8tD,dH!K:Indr[e[V@>$YRK$ls=+!UDr#nS=\;A?b6k##_)d-o"G%<+ZJ>A7KCc.8+b_cJFNnCn-j+g6W\M%p$0N1O&#"QaOmU-Q*XC"%'FeHKS\'K$RXD(<aS'))d\W?AN&n9hW5]pjR`!>OcGt9*$]D%=:O2;S9:70"Wfu!CEV)da.L0k<@2'=eG'FPfOL0*@k:2H!Kmdb9-V*Y]9<Q\0j*:FpMNS\R?-!3/5@*=2qSkZ@Ui"bWAO"RB=9%"%Ik;UO":/;t[Ud"@cSXhq\BuP.:-=]H52qI<M=Lgu"E!_I(?ec_2U#XqZt9U["'OLo&EAf(/V_6=?s(&,#S:SRd>'M"mD][<B#X"(%dE"L/Z%1G*QeI<)Cie1+8Klf>R=\C$=Q&Ip=OU.h26`!sT'm@F&$c>Wp3Kfl,"0PC,)*m!;/0jMpfOSK<%4X^+bTng3N.q*b(t@V%_bSpa-uX\T.V/`RAn\&BO*1ehD=V3$RQ'QrA/+NuL!3`8#4/GJ$;ei&!$rT7-j-+D)Uk-D'+sU0R-FgW9]f"5FTB9M@,Fsq'LYU4%WS2!eWYV:T6C&pbY,_)0TFsA`2^sbsQS>_%152FdO1MWk?.[V<PR)tG`>E__/0rF8:SJ\8&X/I07;\d!\+ct(k/MSKhKoid!0]1R%!Al*;O;q(CC2'71kQesuV>)3DQ[$4@ESfm;`nI(j:3R0"+ISqYg3p>\Tj:>dj/pf_;;+h3f;Bi5Mm(r$0HAW.Y&D7UWq9,\0s0)c%Y*^K!O%*][267'tnYL\oUYU[?]Kq$3+<I9K;7l?'/p5hM-7j,L>ieDQXPVKJNM@M31R/A-1aEnKq9fp@Y=n-b-*8$Ni&ebX9TL'Y%S\i1%DQ<nq$TfQ=Dibb"._-PdRPL16o5mVO.g]XB3qkntbu"4:i<<`m1:JPXXWrL43@RQ?5Yt@gSH`!TP?t2^etU&+<J1-0_#!aE%gG)o+/0rmE3#YUUPMC<W!h$[ZLOGo2;k,j-*0W^jamC&6lbfS-)j3:WR-D0l'?b$2.;nA%Hb^uNH-;`hjYV/r]1_No1PRbt//j:r%X]'I'V])3c*$i&Y41lTPH.-+n0RjER&[H8"mQ!B:"4-&)ki4UT<`7>7gP?+ZB1*e#(=Yc`Rkaj:)8mE05s.GL!#SB11<E8DOEuG]%G#Kn^L3DmsS4tYlK_QlZ=]KT(mA*qHT(\m*ogZ<,#;W/97iVoSg2$Wmg1#inEDN]U(N"&?q,/q!`lS\AMC<:U9NM?*bWFP1+&Z'2%GHA9[1fH?E.s_!G7$AJDW.lVKb(A"M:j=QN\cLo)C+#h`Wc?^glN.'Z'K1$5)t+MZe#d>EJeW:5\o.kb=p)9`o*978\^A*QD0'X>%9^[U*$/06:hlr).1YO2MIG:^Ej@1^V]u3X2Yd`FmM9Neh0HN,/CDu00QTYB#>Dj9kkI'2)b_cP,]EO4_i/fJ!KXFhI;f$1A0[I9A%)4R&fC2o"Xn.RuCP<N+(&,gapkQ_E=,o$h:$2j2+Oq`R^q)-e!HK17*5-W_:U%Z=^EDe,@QuiI$ej8.eb4pMC-rX\[/#[38132b_%WIAu+37&kK6otf1.9a@10*FQ7FfXNE>6PbYKVmn,(\QqkijJilrD#&3U/O7AiPUGI'G_i?[Whu?(ddP[.G>MnocZ<i?7:c/]g1nX%SH6U&fS]K<G%oc:\fYq,70k20Ur:jh\!.5Xp'BsKL.(@o7a:X4ZfmMknEmijV;huV^Pn=Ko<f+-Y]LEKe?BAV4,\_G=lBLa'&E*J%S<j5Z015Ni9g<0E.:F>D-O6?r;E@MZm5p+G\^dYi_nR?eli$)<Qa;7[qdaL'e\(]TdRPcP3qsc4I3#%+N'obJZ[`ZXN,L_lll%uY%APHqh0fa53WeD60@!m<n>49PK\3N6P8'j^>FpY6nYsRi7DZh@\MDkY&k+ER9]G4SYn2MPOkGmT.[8Woq(^-k(hmU.!E1Z/o8fn)N%P?6Bkd]P4Y\r>[G!Rg:/.`E51Jn7P9SQrRtnb^0`dWEY@SO\s0(E3n`PnXep9i,OY.*5V284VB+45)RR-4)sEjWrC*L("pAe=\L#%7-J=bU)P$!6R!K>8k,\kR;E>Mge"LnU]6m)@mP6L240g.d4Qkf9TAR/kpdIRRArt7"1ILUp=`^Nh[-<t4sQCUEPf2*cB"N(`[.H#%0BMq<Zli1b[jX#iYoVOPPCVKM+I]hn#g'_*<YGo//:!'Z1C,\a.T6:-->@X+B7pY\mQRl"!""@81!gY^6DNeZ*;\>)3f=Aem8&i+%*[.(:ornK9f>4D6I6)>Z;G`XK&T6;ZMO_X0"UH-d]LmY@,;`N1=q9'%=CiJ9?UhD?n`uNHdVdj7)jfgkh@'FEW_lYIa"Wf?VSBhR%YGs,&jnMc<B=05m@,6,c=`SP$FuLh##o1Z-U$a:0>8P1Iq.Y:a8oT@RQF"1t\]S[BI_ggl(I4q"94iPQBnrHu%E$ab&p>[BJ/AS/%*:\:FZGU#P00/guq@XLp\qBGkLm)1]Ih!Z#A^*)R]V:mr`E^))Gf)@5Z2QDX$d.9^oCrl[C,EfYm:KD6_'OIof"*+]3<H-c^WN`B%9N;Hl+Q/fS8^n5uE1GNDe^A>+J?qciA=nPj1KF)5dk^b3JbMe)1)#r13&?]t72#`]5G0jX#\D"hAMAi&D1p9ZCq%]-[ir7U+J/`=%&MHQq"5)_a/:aO4*)@(>jnRE]-thr`Q-nH+6VX)T&ZQ*F(b^rQMj7iUZ%)U(-O;AicdVN,;NTn6d`Tg<K'Aqk.mJ9?%s&IrpZs8m%>`m<qB04i'/t:+e*LdPqAh>=7aXK#]WMgnDEofaB&$m&+.%;1*bZ`_Zr@i$GY%+Qn2JY%)X.NuU-=Cu0*pp7DLUgP,&3"A,VIhDp%EQQ7sgoSJu1[jW]R'i;h*L3,%XQ=@aHCCnuCk!Uk;>'1RdF)TKVAa\i!nVQu[1>q!Vi*IcIIbG^oc>PjBkN?)/`U!XMSHMJ>*mRU%KiWO)e>af?Q[5lN5PO2,F,(Z^:efgM@k_WH]VcDGO.b_e!-*"%[7&!t`+>90Y3?YX>*:nK`,3I'G.Tgt\V#J]W$Hapg,;sB+tDDS%iZ(hpgb;GuY6MWd9WgP83ja:"KC-8:;>?1[&qg@oN79=KjVnW;eNN"-JA2,Zi]Re#$*'SMcIb]VJhQFEH2k;]!a&/JEt0l^PF:Y?%<\qCt@3GoJX&=$_ZuWi.+Y;Ou,3?%6UXKP;<HU?OR4gmBW_:SiO>7pZN"_@2/b0d4:p0I+1aO#;,n,@`=S3X^Pg%n3=)!B:E0i'4%A/&.VX::ZdgoM&j;5;B*b#kUc33@M!&F+CEeK.Gg[\TP#-d9kAXJY+.Kj2/dq.fD%p3[,7r;['\Q'BSJO$A6m3*lm#LoY-COl0:e%ZRd*h!:E^;`ui.DE="464ig3/K'JFr;ArB8LH^\a?W!*fOCD[C3SG0kTa2n!;UrY$JWXh$Cn*AeK-q"&:JL^O_X)r?OcH(idZ#le%XNhe>dcbF#;aUlU3(Pd")uP:>WGj2N(*Oou,Gp,NIS5h=SS2mLg)_h21-pPln=a-O%'2C#U`6%BPDKTWU]DBtYFK]fPa+EUiMAQF%in8E[3_m2j(?et#)anL]%\_\tpgA)#.5SXV?(kW/Lssca<*Hl0,XFA4WAg\d:*k)5Vnhs?K@u(F`iksl,=QRZ!E/O5H"kJ+WtN'*%0b)3IYnGLtEah(]Wf[=n</":\3qgIJC%PIj-f`/;4r2-s@iB&(7U@!3,i<@jm4PFLlF\sIHIC4PL\NEJB3LGhdKGbJf&WY.W<o\K%1J6!@j1(cn(9*ep\rV"R;HipMPa7?&daG's-cM(RaC&DWWP0]^Qs=j[UKqreLO(FPlqRVs2DL0uBl04o:gt?9SRFC3)o(Q?eI!V]%bc]Gn",,RT;OA^d92\7"Bk`OU>e.#OUH5'Imn-6^1ps3>e'\hK01#flbCu9`0s4eR_KrnqE%N;8VTklA1[g;PKFRJ+ijddX2,'/b%Nmc?qhNX<Q,]:t'90[7(=Qo/#caX*j#--(M;R)c1!Skn@.pBIGc'`:skf^uPK5bEk\n[C/M<S':RRM$N2/g?WBpKo`c[bT7!6p(h%qL(`@mq&ar<)k.'b]Ej&SQpmrj#htK(EYr>VB]Wg)ejFAWg/uafuDGM)3:c?=VXL`dt"lB<12u1mn-;E83;#^8koUFNm(T&&cBjJ%2gbs_\Y-ct-^]h7C7=[Phha5(KXW;.pYC/)\J`0UJk=bR%\MCYW-"KuJBTJ#AiqPrQ)dC/?AaYPO(Y1)c['(B!@a@)]-Ku6O9>0A%FIY9Kj3bJCb[<6Q3Jq?eNG?J.W1VL;]3Y+NXEJuEglRSiSk)mQS<rLY[,`s4B!o/qO6V<X0XKif4/8WGWh@7=(^B4,a1EE\Bt'a=%8(lKX!-)+W>Q/(0^!m2u':X]UW@^nb<#%B>I8,WOOj5!`GF_I/rn,1EiiQrL>ihncc"22/VYie?:/`41bAoKn5mZb3WE50]#2OPk%JsoLs1j5i_B"l0""Z.a')[L1Zi+jgkaA8S(flk`(T10DRV.)AJc%9ooe+9%0+hZLf%`hEJ=qbGL#N;Q_\G9ih;O5E"BgBA!r]koN%OPM&):BOQ,Yd)DMY0O+@Kr3KM)q$3`mNU2)4\/E_e.H_Q3e0Lmm6u@)57uDH>GWAl-`Blk83R4m#\m=_qW+hfZ(NV^]FQm1P%@$1%)3$[neL_dDO]TQkPK1`&9)UT$ci*K'2R9ruSY8LZ0_ku`@&Qpf8mQG+Tmh7aj`!I20-g>#^.!#(917-[rp7qj81F`ld7?9YSM1*2%<r0X9@8f,.+$`!kWqJu[OcV9uOEI7KU)G0!R#$i:9E[&>dQ;5%SS)nS9UqdL0`/[A)rT#2McQF(0:pe[jGI78KF&-6eB$f]@YVok%cmV7aV<1N/c'Z:MW)VX@MT%n3lOslVQj@)eK$To/*27dnrcn'/!7X+Qo1[LsB,N"))Be<9R8PseqLnp3*l3lTG'CSTJ+lQ=Jg,Fe%!#c<?h?cGG<Fb\sS</%E,,j?)^/QO8ohMUV8sQ^GSd6Q@pB8-a)R3f?M#b)5,%0Q)\;+,Xg27-h;6i_<F\cD&e88jVg)[UXbWXA4%:V*UL>]igBm*3D`W0'M>h%M.]a-<oW[C!45A&_Mk7Gl<?<'LJ>i5U?E-go`S$YqUda'OnqT*V+c-gmtkp,,;#`pIF?\E]\O=,llP%rrhK.3-=gh@,T-5??K'E<,[jY-if[E=X@I/gd)N<eMRB<o8Wa+fFR^PTYJ1o&Z1%%S.'U(gp_R*JqF+WDIFc6];>U0>;e@@]GMY'%T?hQ!X[fd`CmM0"7^5-UEM'/)0h'GfUJUMPci6b"MVrq'?5L(t5D)%Y-TqA:H>:q9E\]SH.8M@2Q)@nLRMl@6O-b%CUO=sV.e_.d%UB7r(USNcJ1XV02-pVOWpeo"h.jXFUNP`'f[CE]!ca9N<7EAE&+rDZ,7j[mCpc13(b7fTAlPhRUr4a,3&*3"flS3-(6G)lUf,aEa%/_!A?+<HHW=sgtJXU:b*/8[9r3C0-7WQlAf)B]R@MP,]=Yq28gW'l<6Z<)&M8jg#5Oj&u@/lp?TC#P;8^d?^&4gmFMMZ]6s$u_Ic%F$!U%(?[*8_.@(+J4cr9OBcitP?3t!K=.MZ;@@L]SZ>B/WqV;o:eTL_8f59AjpCFdkA"\7(*Q]Q4BMu4H"W&7f3g1^9%YX+Kb]j@%!'15)icIf2HF+Go;Nl*Zr+2tI2JZtk?kaN/Z(n]d`MVTcZ^eEWT*K-4C**AJ_--grSA^#e#^M"5V8N[SYSP&cDJBX33^L>B#o31s%6Fd2o1trMkqL%;8U'6Fnl@nB*=o_8q;@kXO/_]G(Yu%P)@\abNoB2S]QCquX#YCRD$hUZHn>`K9=+dm\m;Oolem^KsnYTEmeh/Z>%d9:P%];(W1?;3p!f)fJ_)18*LVW\FT5rgc=YcXApDX/X$C>JME[7%RY/Z;W[@`,8d<4UG1#&hI)'4834d.s*kVO*Jb2ZPG,8<')E%WGrRp2f8],Q$?@%\h).e1UrF6'@\((XWd'="<mMnWHH*;Nu+!>p<fu]NnMs13<8uiE\prrR&pmoJCV0G;Buc,drnHDF.%"]&N=S/%(oH6_*f/psDY*:5is+GSY@u_`lES6U$K0"+09M6q,,Q"*gVNiXU2e)3T&)-?%=MIV0Q&@T2O21i3?U+q!bfSJh(coYgn8<WR&P'=%8#eKm*:^%5X)Sdr1N"D6`XRAi"16isW?+VQN11`"E,E)%Ra&@A/O]K)EDsJsT-G13!A`]tJFo)CNB+2k\-Xs/`XTfKmhq''Y-Lq3%B&'%1S9aS*eJ1.=MR[X>5rEN[=We?:)uR4N;d2o1Vd\-KD8m$#<Repr_:N=a-eu]NAj\pRc+'b/$"#K+!jmrV!1Im02f4UY_6G*:%\>_?qdmTDU-c:lYcJu"(EPj@W+e7Dl$k(!nfeiVAG2q`D/;Jl'H>5IGA)@E2(6.Z2TV<$o8um-r(UTS0MkXl$.N,XhfnP`>4X"BD%,A;*>b_C!`P8a5MN-h$f\fa,m)%1<5>e6<f!U(e4n`]HmaOsXF`M5c@^>`Rl=ef!M'b:<\o!K^Y@_)jqc&u&4g[m"NC8#'2]<Im#%Q?lF)[A/80mlhX>&_^DS!)7BKmWg[!KBooi5(iq#r.`Rs7m#q0jpIlISV?jYFf%'9QMe7VIZ5#=oIHU"M&o:(54#keWo=E8qMfXh%KYu[5lc(jY.eWJ7Wk'H_f4>m6K1N&;Q<P)hF0i'@AIdkUDL)_rd]Y3Pk$_^k^B1c`Vjn0qVd78>)G%V4aQ_:V#0d/lgi>\CJt%4K%T[L"U1AQnhEP9\gJ*jpOD!PsDL#1esGmOI+o#(:T0_7oO#"8?3+A0@c/.V"B9ZTEaJZqH0+U'$S_?L$0GTF?5mh+?#!%01m)j"SG%=L%t$1FVjIDsjCEZ`a@e8IKkO!hZrC+*)<D)Wkef#+_AqY\QV4%JiiV2t'=.>k58//Z'*[8p<A'%8\"j^#[lu)-(0AML]r[5m12g%@!P3PL1SjAhHA<UAfG+d)W/!XD/)bN%Dn:qCkILcggpkkLZ3Qe!C.k61tr"o2;FHaf0=T7?%(+:"&tSNO2uut)q&PT#^NjE"?"qa%2&Iu"GCqGupf>^!i6Ku`UpSm<AfF.ZZOJ+Wf`mttbFIhV')=Xa08:Or(*t_[LPBu26[]=`)B(o&!f`7*Jfurbn-b'uY>T"_YWOf\%:=4Og&U^f[DYju?#f-LS*[.jkn*J>*%B\i<ocrcG(e^oq]!%f1pV^U%^f\1*X/[4ld8>K\,PaG'"/(@6WY^\W*]$_7&^d^>lW+2I%lo2>-@KAVhB%$f33knU&0e4/mJ`2r)(PfBXV_ZI-B)kDS49-UXH7*nD+B/.TJC3iHadaE&JJm$Y=TAYP-f91%H3GX$I(M]E!,"%T%ZeZY)1oN\?W[.[[!62qA]C<TSWG:l&(]\dVN\Bi=Do"FSVUA!<7`Qlhb*?G:4U6/bUGpXWSi$T0TcYZ(4M\\A<)P69TK$]\OVsg$%gk^o^`I+Z.%@B1#1l?_>P6f$4g#<Eh:!+t0:-)/NWqGcHdM7s.OcU.uh'MC7%IUPaY%]0E,D`b@mSDJhEjpQMl31077jbTdLSZ"J%IN*F^#FDk+aK]kts/=J,X#l+)g<[RT9!VH`dro:M"7nTl!R^9(O"fm>=MBlXTWRWgrkXY[=;Ied4htst)]&V'm:81NRurGD5<".J%I;(:A]D7Sd2tO3QkZUg4r@7k*n(mmlJBV/krfn-ps%3E:LAB,(V3g+I6#V`HFoP&RW;'Eu,0r-o<DC=9R=?Mll<hAG<VPtP7NM39%]'*Kef2RWP3s>HsMaX:hA`OO2>4o'!*6DZAW9?`Br@96@rY<(fkDP.G--j$f]JSHT+at%6_%XN#^B1LU-8"lT'liD/"P(%<pslb1%!Z"#5UQ<p6_UY1m4\=N<k0(+korVWKfu:2l<]CcjBY4.B!,]IrI4GnMhb"%EM?Ho.d@edMfF`>1E-ls$+e:.B<1)-fPN[^De@EFZ%1d-%ag=[;8gq,mDfXL6RGrWn(PiqVTG[ZWQ%W1)SDZlUk*f+(8VQ+1L*(M\FITu[C,IhI5nG"g'bjc!K1'=2.n@Fd1Tq+3`Hd-?j%m;=<-<S5@K3HH1Ubo?hMDn%iLbkKhsb"?;WHs=uI-&r3;9XiN4FuuroM;nk%E?)eK:UZchfF)Q/MjhE\VshA"_]RX*rqUL4j8I#J%s65lZ2lh#Fs43V;?f*/Mk50e[+LO*SiG\?_V<mlf![ur..03\R,U+mAFYA.lMT_Rr$fT)<Y3lG5jfh_I,r3gU*t#?]&Jb]]&AAXp%cY%)g5'OF,"oOaPWoTKX&QP1eWK=s"\#!X3D(7p(;*H+Vhb2lm=Ol'DT5qn`("5W9*bOYBFhS",o9Si)ges&P9d$Hm[hM,rX)Z>'%3#(FY%JblWARY"dKE2;d>4tkA'$<7B(/.&k,aHobhUT>XNOb,WFhq!VM0l'Fne7b@CXH@:)1q)?\g\lr&I.CU?_9gbIV>$L*0SZg%42JIKNHX_0Hu^C^QTYOJm$8/=g,(0ZT3XXO]!8F"Vt`gdHm<9TLmCd5i*uo%b_8:[f7uQd@WmJika5KS);U)&7QujN_J#,r^h6p6%'CQ;-p$)"5fsrc<"hA7n?i4*oH*/o[lh>^t@)7V.d]j+FB"I?8E^9OBWdMh8k943:h#3/l3]RH[]3@EFk>N16EcPVci&E&26clNP%(k$Fjr.Gs@NlcQkr1':9%GZu7j%u6LI$\*]:'M9;G"^Ub\[)?9%rs(n7)WY6)^:%mMPt:_E0We9>ZNm``R%*P:cdZ(.)QkUk6OC&%ULLKU1sKT.`og<YIGoi7..ae$p'kF=4kD,PFHAe\k/S8B]NMT0>GqhM8>`o^4AKX/bg7=1j>:Fs4&SMo7`&g@VBT]A@(N+<"D*>+%*s)]U6VVV0T\Klh)YG4T15cOjIL)T0X<<$7`qjT)hY2NrO+6rdf73Y?a01!gq/8Lso']rb!RSU[QhQ".j$.tfLG-Dhs7su*s8L2+%IeheArg9iQXelL+rKmPg)ZA^ms8R:YIfKA]r:oHIrnB(jroL=JrUSd:s8M'Yq<?(`J,A!H^]+#o:]Ge?jia9Gq<@@_rqsr8?iL$h%J,[2Jeg&cDqsXR\^]*EbrZB2tL=Z~>%AI9_PrivateDataEnd